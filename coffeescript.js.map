{
  "version": 3,
  "file": "coffeescript.js",
  "sourceRoot": "\\",
  "sources": [
    "coffeescript.coffee"
  ],
  "names": [],
  "mappings": "AAGsC;;;;AAAA,IAAA,eAAA,EAAA,KAAA,EAAA,SAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,OAAA,EAAA,KAAA,EAAA,WAAA,EAAA,MAAA,EAAA,gBAAA,EAAA;;AAEtC,CAAA,CAAC,KAAD,CAAA,GAAY,OAAA,CAAQ,SAAR,CAAZ;;AACA,CAAA,CAAC,MAAD,CAAA,GAAY,OAAA,CAAQ,UAAR,CAAZ;;AACA,OAAA,GAAY,OAAA,CAAQ,WAAR;;AACZ,SAAA,GAAY,OAAA,CAAQ,aAAR,EAL0B;;;;AAUtC,WAAA,GAAe,OAAA,CAAQ,oBAAR,EAVuB;;;AAatC,OAAO,CAAC,OAAR,GAAkB,WAAW,CAAC;;AAE9B,OAAO,CAAC,eAAR,GAA0B,eAAA,GAAkB,CAAC,SAAD,EAAY,YAAZ,EAA0B,YAA1B,EAfN;;;AAkBtC,OAAO,CAAC,OAAR,GAAkB;;AAElB,CAAA,CAAC,YAAD,EAAe,gBAAf,CAAA,GAAmC,SAAnC,EApBsC;;;;;AAwBtC,OAAO,CAAC,gBAAR,GAA2B,iBAxBW;;;AA2BtC,YAAA,GAAe,QAAA,CAAC,GAAD,CAAA;AAAS,UAAA,KAAA;AAAA,SAClB,OAAO,MAAP,KAAiB,UADC;aAEtB,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAgB,CAAC,QAAjB,CAA0B,QAA1B;AAFsB,SAGlB,OAAO,IAAP,KAAe,UAHG;;;;;aAQtB,IAAA,CAAK,kBAAA,CAAmB,GAAnB,CAAuB,CAAC,OAAxB,CAAgC,iBAAhC,EAAmD,QAAA,CAAC,KAAD,EAAQ,EAAR,CAAA;eACvD,MAAM,CAAC,YAAP,CAAoB,IAAA,GAAO,EAA3B;MADuD,CAAnD,CAAL;AARsB;MAWtB,MAAM,IAAI,KAAJ,CAAU,2CAAV;AAXgB;AAAT,EA3BuB;;;;AA0CtC,gBAAA,GAAmB,QAAA,CAAC,EAAD,CAAA;SAClB,QAAA,CAAC,IAAD,EAAO,UAAU,CAAA,CAAjB,CAAA;AACD,QAAA;AAAE;aACC,EAAE,CAAC,IAAH,CAAQ,IAAR,EAAW,IAAX,EAAiB,OAAjB,EADD;KAEA,aAAA;MAAM;MACL,IAAa,OAAO,IAAP,KAAiB,QAA9B;QAAA,MAAM,IAAN;;MACA,MAAM,OAAO,CAAC,iBAAR,CAA0B,GAA1B,EAA+B,IAA/B,EAAqC,OAAO,CAAC,QAA7C,EAFP;;EAHD;AADkB,EA1CmB;;;;;;;;;;;;;;AA+DtC,OAAO,CAAC,OAAR,GAAkB,OAAA,GAAU,gBAAA,CAAiB,QAAA,CAAC,IAAD,EAAO,UAAU,CAAA,CAAjB,CAAA;AAE7C,MAAA,GAAA,EAAA,aAAA,EAAA,WAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,kBAAA,EAAA,uBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,WAAA;;EACC,OAAA,GAAU,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,OAAlB;EAEV,iBAAA,GAAoB,OAAO,CAAC,SAAR,IACf,OAAO,CAAC,SADO,IAEX;EACT,QAAA,GAAW,OAAO,CAAC,QAAR,IAAoB,OAAO,CAAC,iBAAR,CAAA;EAE/B,gBAAA,CAAiB,QAAjB,EAA2B,IAA3B;EAEA,IAAG,iBAAH;IACC,GAAA,GAAM,IAAI,SAAJ,CAAA,EADP;;EAGA,MAAA,GAAS,KAAK,CAAC,QAAN,CAAe,IAAf,EAAqB,OAArB,EAbV;;;EAkBC,OAAO,CAAC,cAAR;;AACC;IAAA,KAAA,wCAAA;;UAAkC,KAAK,CAAC,CAAD,CAAL,KAAY;qBAA9C,KAAK,CAAC,CAAD;;IAAL,CAAA;;OAnBF;;EAuBC,MAAO,sBAAA,IAAkB,OAAO,CAAC,IAAR,KAAgB,KAAzC;IACC,KAAA,wCAAA;;MACC,WAAG,KAAK,CAAC,CAAD,OAAQ,YAAb,QAAuB,QAA1B;QACC,OAAO,CAAC,IAAR,GAAe;AACf,cAFD;;IADD,CADD;GAvBD;;EA8BC,KAAA,GAAQ,MAAM,CAAC,KAAP,CAAa,MAAb,EA9BT;;;;;;EAsCC,IAAG,OAAO,CAAC,GAAX;IACC,KAAK,CAAC,gBAAN,GAAyB,OAAO,CAAC,uBAAR,CAAgC,MAAhC;IACzB,uBAAA,GAA0B,CAAC,IAAI,CAAC,KAAL,CAAW,QAAX,CAAA,IAAwB,EAAzB,CAA4B,CAAC,MAA7B,GAAsC;IAChE,kBAAA,GAAqB,KAAK,CAAC,IAAN,CAAW,IAAX,CAAgB,CAAC,CAAD;IACrC,GAAA,GAAM,KAAK,CAAC,GAAN,CAAU,OAAV;IACN,KAAA,GAAQ,CAAC,CAAD,EAAI,IAAI,CAAC,MAAT;IACR,GAAG,CAAC,KAAJ,GAAY,GAAG,CAAC,OAAO,CAAC,KAAZ,GAAoB,KAAK,CAAC,CAAD;IACrC,GAAG,CAAC,GAAJ,GAAU,GAAG,CAAC,OAAO,CAAC,GAAZ,GAAkB,KAAK,CAAC,CAAD;IACjC,GAAG,CAAC,KAAJ,GAAY,GAAG,CAAC,OAAO,CAAC,KAAZ,GAAoB;IAChC,GAAG,CAAC,GAAG,CAAC,KAAR,GAAgB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAhB,GAAwB;MAAC,IAAA,EAAM,CAAP;MAAU,MAAA,EAAQ;IAAlB;IACxC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAZ,GAAmB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAApB,GAA2B;IAC9C,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,MAAZ,GAAqB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAApB,GAA6B,kBAAkB,CAAC;IACrE,GAAG,CAAC,MAAJ,GAAa;AACb,WAAO,IAbR;;EAeA,SAAA,GAAY,KAAK,CAAC,kBAAN,CAAyB,OAAzB;EAEZ,WAAA,GAAc;EACd,IAAoB,OAAO,CAAC,MAA5B;IAAA,WAAA,IAAe,EAAf;;EACA,IAAoB,OAAO,CAAC,SAA5B;IAAA,WAAA,IAAe,EAAf;;EACA,aAAA,GAAgB;EAChB,EAAA,GAAK;EACL,KAAA,6CAAA;4BAAA;;IAEC,IAAG,iBAAH;;MAEC,IAAG,QAAQ,CAAC,YAAT,IAA0B,CAAI,UAAU,CAAC,IAAX,CAAgB,QAAQ,CAAC,IAAzB,CAAjC;QACC,GAAG,CAAC,GAAJ,CACC,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAvB,EAAmC,QAAQ,CAAC,YAAY,CAAC,YAAzD,CADD,EAEC,CAAC,WAAD,EAAc,aAAd,CAFD,EAGC;UAAC,SAAA,EAAW;QAAZ,CAHD,EADD;;MAKA,QAAA,GAAW,OAAO,CAAC,KAAR,CAAc,QAAQ,CAAC,IAAvB,EAA6B,IAA7B;MACX,WAAA,IAAe;MACf,IAAG,QAAH;QACC,aAAA,GAAgB,QAAQ,CAAC,IAAI,CAAC,MAAd,GAAuB,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAd,CAA0B,IAA1B,CAAA,GAAkC,CAAnC,EADxC;OAAA,MAAA;QAGC,aAAA,IAAiB,QAAQ,CAAC,IAAI,CAAC,OAHhC;OATD;KADF;;IAgBE,EAAA,IAAM,QAAQ,CAAC;EAjBhB;EAmBA,IAAG,OAAO,CAAC,MAAX;IACC,MAAA,GAAS,CAAA,0BAAA,CAAA,CAA6B,IAAC,CAAA,OAA9B,CAAA;IACT,EAAA,GAAK,CAAA,GAAA,CAAA,CAAM,MAAN,CAAA,EAAA,CAAA,CAAiB,EAAjB,CAAA,EAFN;;EAIA,IAAG,iBAAH;IACC,WAAA,GAAc,GAAG,CAAC,QAAJ,CAAa,OAAb,EAAsB,IAAtB,EADf;;EAGA,IAAG,OAAO,CAAC,SAAX;IACC,IAAG,OAAO,OAAO,CAAC,SAAf,KAA8B,QAAjC;;;MAGC,MAAM,IAAI,KAAJ,CAAU,4EAAV,EAHP;KAAF;;;IAOE,UAAA,GAAa,OAAO,CAAC,SAAS,CAAC;IAC/B,OAAO,OAAO,CAAC,SAAS,CAAC;IAEzB,iBAAA,GAAoB,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,OAAO,CAAC,SAA1B,EAVtB;;;;IAeE,IAAG,WAAA,IAAoB,0CAAvB;MACC,iBAAiB,CAAC,cAAlB,GAAmC,YADpC;;IAEA,gBAAA,GAAmB,UAAA,CAAW,EAAX,EAAe,iBAAf;IACnB,EAAA,GAAK,gBAAgB,CAAC;IACtB,IAAG,WAAA,IAAgB,gBAAgB,CAAC,GAApC;MACC,WAAA,GAAc,gBAAgB,CAAC,IADhC;KApBD;;EAuBA,IAAG,OAAO,CAAC,SAAX;IACC,OAAA,GAAU,YAAA,CAAa,IAAI,CAAC,SAAL,CAAe,WAAf,CAAb;IACV,gBAAA,GAAmB,CAAA,kDAAA,CAAA,CAAqD,OAArD,CAAA;IACnB,SAAA,GAAY,CAAA,cAAA,CAAA,CAAiB,QAAjB,CAAA;IACZ,EAAA,GAAK,CAAA,CAAA,CAAG,EAAH,CAAA,EAAA,CAAA,CAAU,gBAAV,CAAA,EAAA,CAAA,CAA+B,SAA/B,CAAA,EAJN;;EAMA,gBAAA,CAAiB,QAAjB,EAA2B,IAA3B,EAAiC,GAAjC;EAEA,IAAG,OAAO,CAAC,SAAX;AACC,WAAO;MACN,EADM;MAEN,SAAA,EAAW,GAFL;MAGN,WAAA,EAAa,IAAI,CAAC,SAAL,CAAe,WAAf,EAA4B,IAA5B,EAAkC,CAAlC;IAHP,EADR;GAAA,MAAA;AAOC,WAAO,GAPR;;AAvH4C,CAAjB,EA/DU;;;;;AAkMtC,OAAO,CAAC,MAAR,GAAiB,gBAAA,CAAiB,QAAA,CAAC,IAAD,EAAO,OAAP,CAAA;SACjC,KAAK,CAAC,QAAN,CAAe,IAAf,EAAqB,OAArB;AADiC,CAAjB,EAlMqB;;;;;AAwMtC,OAAO,CAAC,KAAR,GAAgB,gBAAA,CAAiB,QAAA,CAAC,MAAD,EAAS,OAAT,CAAA;EAChC,IAA2C,OAAO,MAAP,KAAiB,QAA5D;IAAA,MAAA,GAAS,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB,OAAvB,EAAT;;SACA,MAAM,CAAC,KAAP,CAAa,MAAb;AAFgC,CAAjB,EAxMsB;;;;;;;AAiNtC,OAAO,CAAC,GAAR,GAAc,OAAO,CAAC,IAAR,GAAe,OAAO,CAAC,QAAR,GAAmB,QAAA,CAAA,CAAA;EAC/C,MAAM,IAAI,KAAJ,CAAU,qCAAV;AADyC,EAjNV;;;AAqNtC,KAAA,GAAQ,IAAI,KAAJ,CAAA,EArN8B;;;;;AA0NtC,MAAM,CAAC,KAAP,GACC;EAAA,MAAA,EACC;IAAA,KAAA,EAAO;EAAP,CADD;EAEA,OAAA,EACC;IAAA,MAAA,EAAQ;EAAR,CAHD;EAIA,GAAA,EAAK,QAAA,CAAA,CAAA;AACN,QAAA,GAAA,EAAA;IAAE,KAAA,GAAQ,MAAM,CAAC,MAAM,CAAC,IAAC,CAAA,GAAD,EAAD;IACrB,IAAG,KAAH;MACC,CAAC,GAAD,EAAM,IAAC,CAAA,MAAP,EAAe,IAAC,CAAA,MAAhB,CAAA,GAA0B;MAC1B,MAAM,CAAC,UAAP,GAAoB,KAAK,CAAC,MAAN,IAAgB;MACpC,IAAC,CAAA,QAAD,GAAY,IAAC,CAAA,MAAM,CAAC,WAHrB;KAAA,MAAA;MAKC,GAAA,GAAM,GALP;;WAMA;EARI,CAJL;EAaA,QAAA,EAAU,QAAA,CAAC,MAAD,CAAA;IACT,MAAM,CAAC,MAAP,GAAgB;WAChB,IAAC,CAAA,GAAD,GAAO;EAFE,CAbV;EAgBA,aAAA,EAAe,QAAA,CAAA,CAAA;WAAG;EAAH;AAhBf,EA3NqC;;;AA8OtC,MAAM,CAAC,EAAP,GAAY,OAAA,CAAQ,SAAR,EA9O0B;;;AAiPtC,MAAM,CAAC,EAAE,CAAC,UAAV,GAAuB,QAAA,CAAC,OAAD,EAAU,CAAC,KAAD,CAAV,CAAA;AACvB,MAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,MAAA;;;;EAGC,CAAA,CAAC,UAAD,EAAa,MAAb,CAAA,GAAuB,MAAvB;EACA,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,CAAA,GAAkC;EAElC,SAAA;AAAY,YAAA,KAAA;AAAA,WACN,UAAA,KAAc,MAAM,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB,CADd;eAEV;AAFU,WAGN,aAAa,YAAb,aAAuB,SAHjB;eAIV;AAJU,WAKN,aAAa,gBAAb,aAA2B,YAA3B,aAAqC,cAArC,aAAiD,YAAjD,aAA2D,kBAA3D,aAA2E,WAA3E,aAAoF,aAL9E;eAMV,QAAQ,CAAC,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAA+B,CAAC,WAAhC,CAAA;AANU;eAQV,OAAO,CAAC,uBAAR,CAAgC,SAAhC;AARU;OANb;;;;;SAoBC,OAAO,CAAC,gBAAR,CAAyB,CAAA,WAAA,CAAA,CAAc,SAAd,CAAA,CAAzB,EAAoD,QAApD;AArBsB;;AAuBvB,OAAO,CAAC,eAAR,GAA0B,QAAA,CAAA,CAAA;AAC1B,MAAA,oBAAA,EAAA,gBAAA;;;EAEC,oBAAA,GAAuB,QAAA,CAAC,KAAD,EAAQ,gBAAR,CAAA;AACxB,QAAA,EAAA,EAAA,MAAA,EAAA,YAAA,EAAA,QAAA,EAAA,YAAA,EAAA,aAAA,EAAA,YAAA,EAAA,IAAA,EAAA,UAAA,EAAA,MAAA,EAAA,EAAA,EAAA;IAAE,QAAA,GAAW;IACX,YAAA,GAAe;IAEf,IAAG,KAAK,CAAC,QAAN,CAAA,CAAH;MACC,YAAA,GAAe,SADhB;KAAA,MAAA;MAGC,IAAG,KAAK,CAAC,MAAN,CAAA,CAAH;QACC,QAAA,GAAW,KAAK,CAAC,wBAAN,CAAA;QACX,KAAmD,QAAnD;UAAA,YAAA,GAAe,CAAA,CAAA,CAAG,KAAK,CAAC,aAAN,CAAA,CAAH,CAAA,EAAA,EAAf;SAFD;OAAA,MAAA;QAIC,QAAA,GAAW,KAAK,CAAC,WAAN,CAAA,EAJZ;;MAMA,aAAA,WAAa;MAEb,IAAA,GAAO,KAAK,CAAC,aAAN,CAAA;MACP,MAAA,GAAS,KAAK,CAAC,eAAN,CAAA,EATZ;;MAYG,MAAA,GAAS,gBAAA,CAAiB,QAAjB,EAA2B,IAA3B,EAAiC,MAAjC;MACT,YAAA,GACI,MAAH,GACC,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAA,CAAe,MAAM,CAAC,CAAD,CAArB,CAAA,CAAA,CAAA,CAA4B,MAAM,CAAC,CAAD,CAAlC,CAAA,CADD,GAGC,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAA,CAAe,IAAf,CAAA,CAAA,CAAA,CAAuB,MAAvB,CAAA,EApBH;;IAsBA,YAAA,GAAe,KAAK,CAAC,eAAN,CAAA;IACf,aAAA,GAAgB,KAAK,CAAC,aAAN,CAAA;IAChB,YAAA,GAAe,CAAI,CAAC,KAAK,CAAC,UAAN,CAAA,CAAA,IAAsB,aAAvB;IAEnB,IAAG,YAAH;MACC,UAAA,GAAa,KAAK,CAAC,aAAN,CAAA;MACb,QAAA,GAAW,KAAK,CAAC,WAAN,CAAA;MAEX,IAAG,YAAH;QACC,EAAA,GAAK,EAAA,GAAK;QACV,IAAG,QAAA,IAAa,YAAY,CAAC,OAAb,CAAqB,QAArB,CAAhB;UACC,EAAA,GAAK,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,EADN;;QAEA,IAAG,UAAA,IAAe,YAAY,CAAC,OAAb,CAAqB,CAAA,CAAA,CAAA,CAAI,UAAJ,CAAA,CAArB,CAAA,KAA4C,YAAY,CAAC,MAAb,GAAsB,UAAU,CAAC,MAAjC,GAA0C,CAAxG;UACC,EAAA,GAAK,CAAA,KAAA,CAAA,CAAQ,UAAR,CAAA,CAAA,EADN;;eAGA,CAAA,CAAA,CAAG,EAAH,CAAA,CAAA,CAAQ,YAAR,CAAA,CAAA,CAAuB,EAAvB,CAAA,EAAA,CAAA,CAA8B,YAA9B,CAAA,CAAA,EAPD;OAAA,MAAA;eASC,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAA,CAAe,UAAA,IAAc,aAA7B,CAAA,EAAA,CAAA,CAA+C,YAA/C,CAAA,CAAA,EATD;OAJD;KAAA,MAcK,IAAG,aAAH;aACJ,CAAA,IAAA,CAAA,CAAO,YAAA,IAAgB,aAAvB,CAAA,EAAA,CAAA,CAAyC,YAAzC,CAAA,CAAA,EADI;KAAA,MAEA,IAAG,YAAH;aACJ,CAAA,CAAA,CAAG,YAAH,CAAA,EAAA,CAAA,CAAoB,YAApB,CAAA,CAAA,EADI;KAAA,MAAA;aAGJ,aAHI;;EA9CiB;EAmDvB,gBAAA,GAAmB,QAAA,CAAC,QAAD,EAAW,IAAX,EAAiB,MAAjB,CAAA;AACpB,QAAA,MAAA,EAAA;IAAE,SAAA,GAAY,YAAA,CAAa,QAAb,EAAuB,IAAvB,EAA6B,MAA7B;IAEZ,IAA4D,iBAA5D;MAAA,MAAA,GAAS,SAAS,CAAC,cAAV,CAAyB,CAAC,IAAA,GAAO,CAAR,EAAW,MAAA,GAAS,CAApB,CAAzB,EAAT;;IACA,IAAG,cAAH;aAAgB,CAAC,MAAM,CAAC,CAAD,CAAN,GAAY,CAAb,EAAgB,MAAM,CAAC,CAAD,CAAN,GAAY,CAA5B,EAAhB;KAAA,MAAA;aAAoD,KAApD;;EAJkB,EArDpB;;;;;SA+DC,KAAK,CAAC,iBAAN,GAA0B,QAAA,CAAC,GAAD,EAAM,KAAN,CAAA;AAC3B,QAAA,KAAA,EAAA;IAAE,MAAA;;AAAS;MAAA,KAAA,uCAAA;;QAER,IAAS,KAAK,CAAC,WAAN,CAAA,CAAA,KAAuB,OAAO,CAAC,GAAxC;;AAAA,gBAAA;;qBACA,CAAA,KAAA,CAAA,CAAQ,oBAAA,CAAqB,KAArB,EAA4B,gBAA5B,CAAR,CAAA;MAHQ,CAAA;;;WAKT,CAAA,CAAA,CAAG,GAAG,CAAC,QAAJ,CAAA,CAAH,CAAA,EAAA,CAAA,CAAsB,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAtB,CAAA,EAAA;EANyB;AAhED;;AAwE1B,gBAAA,GAAmB,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACnB,MAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA;EAAC,SAAA,GAAY,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,CAAlB,CAAoB,CAAC,CAAD;EAChC,IAAA,uBAAO,SAAS,CAAE,KAAX,CAAiB,uBAAjB;EACP,IAAA,+CAAe,CAAE,KAAV,CAAgB,IAAhB,CAAqB,CAAC,MAAtB,CAA6B,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,KAAO;EAAd,CAA7B;EACP,oBAAG,IAAI,CAAE,gBAAN,GAAe,CAAlB;IACC,OAAO,CAAC,KAAR,CAAc,CAAA;;wBAAA,CAAd;IAKA,OAAO,CAAC,KAAR,CAAc,CAAA,uBAAA,CAAA,CAA0B,SAA1B,CAAA,WAAA,CAAA,CAAiD,IAAjD,CAAA,CAAA,CAAd;WACA,OAAO,CAAC,KAAR,CAAc,CAAA,oBAAA,CAAA,CAAuB,IAAI,CAAC,SAAL,CAAe,IAAf,CAAvB,CAAA,CAAd,EAPD;;AAJkB",
  "sourcesContent": [
    "# CoffeeScript can be used both on the server, as a command-line compiler based\r\n# on Node.js/V8, or to run CoffeeScript directly in the browser. This module\r\n# contains the main entry functions for tokenizing, parsing, and compiling\r\n# source CoffeeScript into JavaScript.\r\n\r\n{Lexer}   = require './lexer'\r\n{parser}  = require './parser'\r\nhelpers   = require './helpers'\r\nSourceMap = require './sourcemap'\r\n\r\n# Require `package.json`, which is two levels above this file, as this file is\r\n# evaluated from `lib/coffeescript`.\r\n\r\npackageJson\t = require '../../package.json'\r\n\r\n# --- The current CoffeeScript version number.\r\nexports.VERSION = packageJson.version\r\n\r\nexports.FILE_EXTENSIONS = FILE_EXTENSIONS = ['.coffee', '.litcoffee', '.coffee.md']\r\n\r\n# --- Expose helpers for testing.\r\nexports.helpers = helpers\r\n\r\n{getSourceMap, registerCompiled} = SourceMap\r\n# This is exported to enable an external module to implement caching of\r\n# sourcemaps. This is used only when `patchStackTrace` has been called to adjust\r\n# stack traces for files with cached source maps.\r\nexports.registerCompiled = registerCompiled\r\n\r\n# Function that allows for btoa in both nodejs and the browser.\r\nbase64encode = (src) -> switch\r\n\twhen typeof Buffer is 'function'\r\n\t\tBuffer.from(src).toString('base64')\r\n\twhen typeof btoa is 'function'\r\n\t\t# The contents of a `<script>` block are encoded via UTF-16, so if any extended\r\n\t\t# characters are used in the block, btoa will fail as it maxes out at UTF-8.\r\n\t\t# See https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\r\n\t\t# for the gory details, and for the solution implemented here.\r\n\t\tbtoa encodeURIComponent(src).replace /%([0-9A-F]{2})/g, (match, p1) ->\r\n\t\t\tString.fromCharCode '0x' + p1\r\n\telse\r\n\t\tthrow new Error('Unable to base64 encode inline sourcemap.')\r\n\r\n# Function wrapper to add source file information to SyntaxErrors thrown by the\r\n# lexer/parser/compiler.\r\nwithPrettyErrors = (fn) ->\r\n\t(code, options = {}) ->\r\n\t\ttry\r\n\t\t\tfn.call @, code, options\r\n\t\tcatch err\r\n\t\t\tthrow err if typeof code isnt 'string' # Support `CoffeeScript.nodes(tokens)`.\r\n\t\t\tthrow helpers.updateSyntaxError err, code, options.filename\r\n\r\n# Compile CoffeeScript code to JavaScript, using the Coffee/Jison compiler.\r\n#\r\n# If `options.sourceMap` is specified, then `options.filename` must also be\r\n# specified. All options that can be passed to `SourceMap#generate` may also\r\n# be passed here.\r\n#\r\n# This returns a javascript string, unless `options.sourceMap` is passed,\r\n# in which case this returns a `{js, v3SourceMap, sourceMap}`\r\n# object, where sourceMap is a sourcemap.coffee#SourceMap object, handy for\r\n# doing programmatic lookups.\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexports.compile = compile = withPrettyErrors (code, options = {}) ->\r\n\r\n\t# --- Clone `options`\r\n\toptions = Object.assign {}, options\r\n\r\n\tgenerateSourceMap = options.sourceMap \\\r\n\t\t\t|| options.inlineMap \\\r\n\t\t\t|| not options.filename?\r\n\tfilename = options.filename || helpers.anonymousFileName()\r\n\r\n\tcheckShebangLine filename, code\r\n\r\n\tif generateSourceMap\r\n\t\tmap = new SourceMap\r\n\r\n\ttokens = lexer.tokenize code, options\r\n\r\n\t# --- Pass a list of referenced variables, so that\r\n\t#     generated variables won’t get the same name.\r\n\r\n\toptions.referencedVars = (\r\n\t\ttoken[1] for token in tokens when token[0] is 'IDENTIFIER'\r\n\t\t)\r\n\r\n\t# --- Check for import or export; if found, force bare mode.\r\n\tunless options.bare? and options.bare is yes\r\n\t\tfor token in tokens\r\n\t\t\tif token[0] in ['IMPORT', 'EXPORT']\r\n\t\t\t\toptions.bare = yes\r\n\t\t\t\tbreak\r\n\r\n\t# --- This contains the AST inside it\r\n\tnodes = parser.parse tokens\r\n\r\n\t# If all that was requested was a POJO representation of the nodes, e.g.\r\n\t# the abstract syntax tree (AST), we can stop now and just return that\r\n\t# (after fixing the location data for the root/`File`»`Program` node,\r\n\t# which might’ve gotten misaligned from the original source due to the\r\n\t# `clean` function in the lexer).\r\n\r\n\tif options.ast\r\n\t\tnodes.allCommentTokens = helpers.extractAllCommentTokens tokens\r\n\t\tsourceCodeNumberOfLines = (code.match(/\\r?\\n/g) or '').length + 1\r\n\t\tsourceCodeLastLine = /.*$/.exec(code)[0] # `.*` matches all but line break characters.\r\n\t\tast = nodes.ast options\r\n\t\trange = [0, code.length]\r\n\t\tast.start = ast.program.start = range[0]\r\n\t\tast.end = ast.program.end = range[1]\r\n\t\tast.range = ast.program.range = range\r\n\t\tast.loc.start = ast.program.loc.start = {line: 1, column: 0}\r\n\t\tast.loc.end.line = ast.program.loc.end.line = sourceCodeNumberOfLines\r\n\t\tast.loc.end.column = ast.program.loc.end.column = sourceCodeLastLine.length\r\n\t\tast.tokens = tokens\r\n\t\treturn ast\r\n\r\n\tfragments = nodes.compileToFragments options\r\n\r\n\tcurrentLine = 0\r\n\tcurrentLine += 1 if options.header\r\n\tcurrentLine += 1 if options.shiftLine\r\n\tcurrentColumn = 0\r\n\tjs = \"\"\r\n\tfor fragment in fragments\r\n\t\t# Update the sourcemap with data from each fragment.\r\n\t\tif generateSourceMap\r\n\t\t\t# Do not include empty, whitespace, or semicolon-only fragments.\r\n\t\t\tif fragment.locationData and not /^[;\\s]*$/.test fragment.code\r\n\t\t\t\tmap.add(\r\n\t\t\t\t\t[fragment.locationData.first_line, fragment.locationData.first_column]\r\n\t\t\t\t\t[currentLine, currentColumn]\r\n\t\t\t\t\t{noReplace: true})\r\n\t\t\tnewLines = helpers.count fragment.code, \"\\n\"\r\n\t\t\tcurrentLine += newLines\r\n\t\t\tif newLines\r\n\t\t\t\tcurrentColumn = fragment.code.length - (fragment.code.lastIndexOf(\"\\n\") + 1)\r\n\t\t\telse\r\n\t\t\t\tcurrentColumn += fragment.code.length\r\n\r\n\t\t# Copy the code from each fragment into the final JavaScript.\r\n\t\tjs += fragment.code\r\n\r\n\tif options.header\r\n\t\theader = \"Generated by CoffeeScript #{@VERSION}\"\r\n\t\tjs = \"// #{header}\\n#{js}\"\r\n\r\n\tif generateSourceMap\r\n\t\tv3SourceMap = map.generate options, code\r\n\r\n\tif options.transpile\r\n\t\tif typeof options.transpile isnt 'object'\r\n\t\t\t# This only happens if run via the Node API and `transpile` is set to\r\n\t\t\t# something other than an object.\r\n\t\t\tthrow new Error 'The transpile option must be given an object with options to pass to Babel'\r\n\r\n\t\t# Get the reference to Babel that we have been passed if this compiler\r\n\t\t# is run via the CLI or Node API.\r\n\t\ttranspiler = options.transpile.transpile\r\n\t\tdelete options.transpile.transpile\r\n\r\n\t\ttranspilerOptions = Object.assign {}, options.transpile\r\n\r\n\t\t# See https://github.com/babel/babel/issues/827#issuecomment-77573107:\r\n\t\t# Babel can take a v3 source map object as input in `inputSourceMap`\r\n\t\t# and it will return an *updated* v3 source map object in its output.\r\n\t\tif v3SourceMap and not transpilerOptions.inputSourceMap?\r\n\t\t\ttranspilerOptions.inputSourceMap = v3SourceMap\r\n\t\ttranspilerOutput = transpiler js, transpilerOptions\r\n\t\tjs = transpilerOutput.code\r\n\t\tif v3SourceMap and transpilerOutput.map\r\n\t\t\tv3SourceMap = transpilerOutput.map\r\n\r\n\tif options.inlineMap\r\n\t\tencoded = base64encode JSON.stringify v3SourceMap\r\n\t\tsourceMapDataURI = \"//# sourceMappingURL=data:application/json;base64,#{encoded}\"\r\n\t\tsourceURL = \"//# sourceURL=#{filename}\"\r\n\t\tjs = \"#{js}\\n#{sourceMapDataURI}\\n#{sourceURL}\"\r\n\r\n\tregisterCompiled filename, code, map\r\n\r\n\tif options.sourceMap\r\n\t\treturn {\r\n\t\t\tjs\r\n\t\t\tsourceMap: map\r\n\t\t\tv3SourceMap: JSON.stringify v3SourceMap, null, 2\r\n\t\t}\r\n\telse\r\n\t\treturn js\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n# Tokenize a string of CoffeeScript code, and return the array of tokens.\r\nexports.tokens = withPrettyErrors (code, options) ->\r\n\tlexer.tokenize code, options\r\n\r\n# Parse a string of CoffeeScript code or an array of lexed tokens, and\r\n# return the AST. You can then compile it by calling `.compile()` on the root,\r\n# or traverse it by using `.traverseChildren()` with a callback.\r\nexports.nodes = withPrettyErrors (source, options) ->\r\n\tsource = lexer.tokenize source, options if typeof source is 'string'\r\n\tparser.parse source\r\n\r\n# This file used to export these methods; leave stubs that throw warnings\r\n# instead. These methods have been moved into `index.coffee` to provide\r\n# separate entrypoints for Node and non-Node environments, so that static\r\n# analysis tools don’t choke on Node packages when compiling for a non-Node\r\n# environment.\r\nexports.run = exports.eval = exports.register = ->\r\n\tthrow new Error 'require index.coffee, not this file'\r\n\r\n# Instantiate a Lexer for our use here.\r\nlexer = new Lexer\r\n\r\n# The real Lexer produces a generic stream of tokens. This object provides a\r\n# thin wrapper around it, compatible with the Jison API. We can then pass it\r\n# directly as a “Jison lexer.”\r\nparser.lexer =\r\n\tyylloc:\r\n\t\trange: []\r\n\toptions:\r\n\t\tranges: yes\r\n\tlex: ->\r\n\t\ttoken = parser.tokens[@pos++]\r\n\t\tif token\r\n\t\t\t[tag, @yytext, @yylloc] = token\r\n\t\t\tparser.errorToken = token.origin or token\r\n\t\t\t@yylineno = @yylloc.first_line\r\n\t\telse\r\n\t\t\ttag = ''\r\n\t\ttag\r\n\tsetInput: (tokens) ->\r\n\t\tparser.tokens = tokens\r\n\t\t@pos = 0\r\n\tupcomingInput: -> ''\r\n\r\n# Make all the AST nodes visible to the parser.\r\nparser.yy = require './nodes'\r\n\r\n# Override Jison's default error handling function.\r\nparser.yy.parseError = (message, {token}) ->\r\n\t# Disregard Jison's message, it contains redundant line number information.\r\n\t# Disregard the token, we take its value directly from the lexer in case\r\n\t# the error is caused by a generated token which might refer to its origin.\r\n\t{errorToken, tokens} = parser\r\n\t[errorTag, errorText, errorLoc] = errorToken\r\n\r\n\terrorText = switch\r\n\t\twhen errorToken is tokens[tokens.length - 1]\r\n\t\t\t'end of input'\r\n\t\twhen errorTag in ['INDENT', 'OUTDENT']\r\n\t\t\t'indentation'\r\n\t\twhen errorTag in ['IDENTIFIER', 'NUMBER', 'INFINITY', 'STRING', 'STRING_START', 'REGEX', 'REGEX_START']\r\n\t\t\terrorTag.replace(/_START$/, '').toLowerCase()\r\n\t\telse\r\n\t\t\thelpers.nameWhitespaceCharacter errorText\r\n\r\n\t# The second argument has a `loc` property, which should have the location\r\n\t# data for this token. Unfortunately, Jison seems to send an outdated `loc`\r\n\t# (from the previous token), so we take the location information directly\r\n\t# from the lexer.\r\n\thelpers.throwSyntaxError \"unexpected #{errorText}\", errorLoc\r\n\r\nexports.patchStackTrace = ->\r\n\t# Based on http://v8.googlecode.com/svn/branches/bleeding_edge/src/messages.js\r\n\t# Modified to handle sourceMap\r\n\tformatSourcePosition = (frame, getSourceMapping) ->\r\n\t\tfilename = undefined\r\n\t\tfileLocation = ''\r\n\r\n\t\tif frame.isNative()\r\n\t\t\tfileLocation = \"native\"\r\n\t\telse\r\n\t\t\tif frame.isEval()\r\n\t\t\t\tfilename = frame.getScriptNameOrSourceURL()\r\n\t\t\t\tfileLocation = \"#{frame.getEvalOrigin()}, \" unless filename\r\n\t\t\telse\r\n\t\t\t\tfilename = frame.getFileName()\r\n\r\n\t\t\tfilename or= \"<anonymous>\"\r\n\r\n\t\t\tline = frame.getLineNumber()\r\n\t\t\tcolumn = frame.getColumnNumber()\r\n\r\n\t\t\t# Check for a sourceMap position\r\n\t\t\tsource = getSourceMapping filename, line, column\r\n\t\t\tfileLocation =\r\n\t\t\t\tif source\r\n\t\t\t\t\t\"#{filename}:#{source[0]}:#{source[1]}\"\r\n\t\t\t\telse\r\n\t\t\t\t\t\"#{filename}:#{line}:#{column}\"\r\n\r\n\t\tfunctionName = frame.getFunctionName()\r\n\t\tisConstructor = frame.isConstructor()\r\n\t\tisMethodCall = not (frame.isToplevel() or isConstructor)\r\n\r\n\t\tif isMethodCall\r\n\t\t\tmethodName = frame.getMethodName()\r\n\t\t\ttypeName = frame.getTypeName()\r\n\r\n\t\t\tif functionName\r\n\t\t\t\ttp = as = ''\r\n\t\t\t\tif typeName and functionName.indexOf typeName\r\n\t\t\t\t\ttp = \"#{typeName}.\"\r\n\t\t\t\tif methodName and functionName.indexOf(\".#{methodName}\") isnt functionName.length - methodName.length - 1\r\n\t\t\t\t\tas = \" [as #{methodName}]\"\r\n\r\n\t\t\t\t\"#{tp}#{functionName}#{as} (#{fileLocation})\"\r\n\t\t\telse\r\n\t\t\t\t\"#{typeName}.#{methodName or '<anonymous>'} (#{fileLocation})\"\r\n\t\telse if isConstructor\r\n\t\t\t\"new #{functionName or '<anonymous>'} (#{fileLocation})\"\r\n\t\telse if functionName\r\n\t\t\t\"#{functionName} (#{fileLocation})\"\r\n\t\telse\r\n\t\t\tfileLocation\r\n\r\n\tgetSourceMapping = (filename, line, column) ->\r\n\t\tsourceMap = getSourceMap filename, line, column\r\n\r\n\t\tanswer = sourceMap.sourceLocation [line - 1, column - 1] if sourceMap?\r\n\t\tif answer? then [answer[0] + 1, answer[1] + 1] else null\r\n\r\n\t# Based on [michaelficarra/CoffeeScriptRedux](http://goo.gl/ZTx1p)\r\n\t# NodeJS / V8 have no support for transforming positions in stack traces using\r\n\t# sourceMap, so we must monkey-patch Error to display CoffeeScript source\r\n\t# positions.\r\n\tError.prepareStackTrace = (err, stack) ->\r\n\t\tframes = for frame in stack\r\n\t\t\t# Don’t display stack frames deeper than `CoffeeScript.run`.\r\n\t\t\tbreak if frame.getFunction() is exports.run\r\n\t\t\t\"\t\tat #{formatSourcePosition frame, getSourceMapping}\"\r\n\r\n\t\t\"#{err.toString()}\\n#{frames.join '\\n'}\\n\"\r\n\r\ncheckShebangLine = (file, input) ->\r\n\tfirstLine = input.split(/$/m, 1)[0]\r\n\trest = firstLine?.match(/^#!\\s*([^\\s]+\\s*)(.*)/)\r\n\targs = rest?[2]?.split(/\\s/).filter (s) -> s isnt ''\r\n\tif args?.length > 1\r\n\t\tconsole.error '''\r\n\t\t\tThe script to be run begins with a shebang line with more than one\r\n\t\t\targument. This script will fail on platforms such as Linux which only\r\n\t\t\tallow a single argument.\r\n\t\t'''\r\n\t\tconsole.error \"The shebang line was: '#{firstLine}' in file '#{file}'\"\r\n\t\tconsole.error \"The arguments were: #{JSON.stringify args}\"\r\n"
  ]
}