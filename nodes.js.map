{
  "version": 3,
  "file": "nodes.js",
  "sourceRoot": "\\",
  "sources": [
    "nodes.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# `nodes.coffee` contains all of the node classes for the syntax tree. Most\r\n# nodes are created as the result of actions in the [grammar](grammar.html),\r\n# but some are created by other nodes as a method of code generation. To convert\r\n# the syntax tree into a string of JavaScript code, call `compile()` on the root.\r\n\r\nError.stackTraceLimit = Infinity\r\n\r\n{Scope} = require './scope'\r\n{isUnassignable, JS_FORBIDDEN} = require './lexer'\r\n\r\n# Import the helpers we plan to use.\r\n{compact, flatten, extend, merge, del, starts, ends, some,\r\naddDataToNode, attachCommentsToNode, locationDataToString,\r\nthrowSyntaxError, replaceUnicodeCodePointEscapes,\r\nisFunction, isPlainObject, isNumber, parseNumber} = require './helpers'\r\n\r\n# Functions required by parser.\r\nexports.extend = extend\r\nexports.addDataToNode = addDataToNode\r\n\r\n# Constant functions for nodes that don’t need customization.\r\nYES     = -> yes\r\nNO      = -> no\r\nTHIS    = -> this\r\nNEGATE  = -> @negated = not @negated; this\r\n\r\n#### CodeFragment\r\n\r\n# The various nodes defined below all compile to a collection of **CodeFragment** objects.\r\n# A CodeFragments is a block of generated code, and the location in the source file where the code\r\n# came from. CodeFragments can be assembled together into working code just by catting together\r\n# all the CodeFragments' `code` snippets, in order.\r\nexports.CodeFragment = class CodeFragment\r\n  constructor: (parent, code) ->\r\n    @code = \"#{code}\"\r\n    @type = parent?.constructor?.name or 'unknown'\r\n    @locationData = parent?.locationData\r\n    @comments = parent?.comments\r\n\r\n  toString: ->\r\n    # This is only intended for debugging.\r\n    \"#{@code}#{if @locationData then \": \" + locationDataToString(@locationData) else ''}\"\r\n\r\n# Convert an array of CodeFragments into a string.\r\nfragmentsToText = (fragments) ->\r\n  (fragment.code for fragment in fragments).join('')\r\n\r\n#### Base\r\n\r\n# The **Base** is the abstract base class for all nodes in the syntax tree.\r\n# Each subclass implements the `compileNode` method, which performs the\r\n# code generation for that node. To compile a node to JavaScript,\r\n# call `compile` on it, which wraps `compileNode` in some generic extra smarts,\r\n# to know when the generated code needs to be wrapped up in a closure.\r\n# An options hash is passed and cloned throughout, containing information about\r\n# the environment from higher in the tree (such as if a returned value is\r\n# being requested by the surrounding function), information about the current\r\n# scope, and indentation level.\r\nexports.Base = class Base\r\n\r\n  compile: (o, lvl) ->\r\n    fragmentsToText @compileToFragments o, lvl\r\n\r\n  # Occasionally a node is compiled multiple times, for example to get the name\r\n  # of a variable to add to scope tracking. When we know that a “premature”\r\n  # compilation won’t result in comments being output, set those comments aside\r\n  # so that they’re preserved for a later `compile` call that will result in\r\n  # the comments being included in the output.\r\n  compileWithoutComments: (o, lvl, method = 'compile') ->\r\n    if @comments\r\n      @ignoreTheseCommentsTemporarily = @comments\r\n      delete @comments\r\n    unwrapped = @unwrapAll()\r\n    if unwrapped.comments\r\n      unwrapped.ignoreTheseCommentsTemporarily = unwrapped.comments\r\n      delete unwrapped.comments\r\n\r\n    fragments = @[method] o, lvl\r\n\r\n    if @ignoreTheseCommentsTemporarily\r\n      @comments = @ignoreTheseCommentsTemporarily\r\n      delete @ignoreTheseCommentsTemporarily\r\n    if unwrapped.ignoreTheseCommentsTemporarily\r\n      unwrapped.comments = unwrapped.ignoreTheseCommentsTemporarily\r\n      delete unwrapped.ignoreTheseCommentsTemporarily\r\n\r\n    fragments\r\n\r\n  compileNodeWithoutComments: (o, lvl) ->\r\n    @compileWithoutComments o, lvl, 'compileNode'\r\n\r\n  # Common logic for determining whether to wrap this node in a closure before\r\n  # compiling it, or to compile directly. We need to wrap if this node is a\r\n  # *statement*, and it's not a *pureStatement*, and we're not at\r\n  # the top level of a block (which would be unnecessary), and we haven't\r\n  # already been asked to return the result (because statements know how to\r\n  # return results).\r\n  compileToFragments: (o, lvl) ->\r\n    o        = extend {}, o\r\n    o.level  = lvl if lvl\r\n    node     = @unfoldSoak(o) or this\r\n    node.tab = o.indent\r\n\r\n    fragments = if o.level is LEVEL_TOP or not node.isStatement(o)\r\n      node.compileNode o\r\n    else\r\n      node.compileClosure o\r\n    @compileCommentFragments o, node, fragments\r\n    fragments\r\n\r\n  compileToFragmentsWithoutComments: (o, lvl) ->\r\n    @compileWithoutComments o, lvl, 'compileToFragments'\r\n\r\n  # Statements converted into expressions via closure-wrapping share a scope\r\n  # object with their parent closure, to preserve the expected lexical scope.\r\n  compileClosure: (o) ->\r\n    @checkForPureStatementInExpression()\r\n    o.sharedScope = yes\r\n    func = new Code [], Block.wrap [this]\r\n    args = []\r\n    if @contains ((node) -> node instanceof SuperCall)\r\n      func.bound = yes\r\n    else if (argumentsNode = @contains isLiteralArguments) or @contains isLiteralThis\r\n      args = [new ThisLiteral]\r\n      if argumentsNode\r\n        meth = 'apply'\r\n        args.push new IdentifierLiteral 'arguments'\r\n      else\r\n        meth = 'call'\r\n      func = new Value func, [new Access new PropertyName meth]\r\n    parts = (new Call func, args).compileNode o\r\n\r\n    switch\r\n      when func.isGenerator or func.base?.isGenerator\r\n        parts.unshift @makeCode \"(yield* \"\r\n        parts.push    @makeCode \")\"\r\n      when func.isAsync or func.base?.isAsync\r\n        parts.unshift @makeCode \"(await \"\r\n        parts.push    @makeCode \")\"\r\n    parts\r\n\r\n  compileCommentFragments: (o, node, fragments) ->\r\n    return fragments unless node.comments\r\n    # This is where comments, that are attached to nodes as a `comments`\r\n    # property, become `CodeFragment`s. “Inline block comments,” e.g.\r\n    # `/* */`-delimited comments that are interspersed within code on a line,\r\n    # are added to the current `fragments` stream. All other fragments are\r\n    # attached as properties to the nearest preceding or following fragment,\r\n    # to remain stowaways until they get properly output in `compileComments`\r\n    # later on.\r\n    unshiftCommentFragment = (commentFragment) ->\r\n      if commentFragment.unshift\r\n        # Find the first non-comment fragment and insert `commentFragment`\r\n        # before it.\r\n        unshiftAfterComments fragments, commentFragment\r\n      else\r\n        if fragments.length isnt 0\r\n          precedingFragment = fragments[fragments.length - 1]\r\n          if commentFragment.newLine and precedingFragment.code isnt '' and\r\n             not /\\n\\s*$/.test precedingFragment.code\r\n            commentFragment.code = \"\\n#{commentFragment.code}\"\r\n        fragments.push commentFragment\r\n\r\n    for comment in node.comments when comment not in @compiledComments\r\n      @compiledComments.push comment # Don’t output this comment twice.\r\n      # For block/here comments, denoted by `###`, that are inline comments\r\n      # like `1 + ### comment ### 2`, create fragments and insert them into\r\n      # the fragments array.\r\n      # Otherwise attach comment fragments to their closest fragment for now,\r\n      # so they can be inserted into the output later after all the newlines\r\n      # have been added.\r\n      if comment.here # Block comment, delimited by `###`.\r\n        commentFragment = new HereComment(comment).compileNode o\r\n      else # Line comment, delimited by `#`.\r\n        commentFragment = new LineComment(comment).compileNode o\r\n      if (commentFragment.isHereComment and not commentFragment.newLine) or\r\n         node.includeCommentFragments()\r\n        # Inline block comments, like `1 + /* comment */ 2`, or a node whose\r\n        # `compileToFragments` method has logic for outputting comments.\r\n        unshiftCommentFragment commentFragment\r\n      else\r\n        fragments.push @makeCode '' if fragments.length is 0\r\n        if commentFragment.unshift\r\n          fragments[0].precedingComments ?= []\r\n          fragments[0].precedingComments.push commentFragment\r\n        else\r\n          fragments[fragments.length - 1].followingComments ?= []\r\n          fragments[fragments.length - 1].followingComments.push commentFragment\r\n    fragments\r\n\r\n  # If the code generation wishes to use the result of a complex expression\r\n  # in multiple places, ensure that the expression is only ever evaluated once,\r\n  # by assigning it to a temporary variable. Pass a level to precompile.\r\n  #\r\n  # If `level` is passed, then returns `[val, ref]`, where `val` is the compiled value, and `ref`\r\n  # is the compiled reference. If `level` is not passed, this returns `[val, ref]` where\r\n  # the two values are raw nodes which have not been compiled.\r\n  cache: (o, level, shouldCache) ->\r\n    complex = if shouldCache? then shouldCache this else @shouldCache()\r\n    if complex\r\n      ref = new IdentifierLiteral o.scope.freeVariable 'ref'\r\n      sub = new Assign ref, this\r\n      if level then [sub.compileToFragments(o, level), [@makeCode(ref.value)]] else [sub, ref]\r\n    else\r\n      ref = if level then @compileToFragments o, level else this\r\n      [ref, ref]\r\n\r\n  # Occasionally it may be useful to make an expression behave as if it was 'hoisted', whereby the\r\n  # result of the expression is available before its location in the source, but the expression's\r\n  # variable scope corresponds to the source position. This is used extensively to deal with executable\r\n  # class bodies in classes.\r\n  #\r\n  # Calling this method mutates the node, proxying the `compileNode` and `compileToFragments`\r\n  # methods to store their result for later replacing the `target` node, which is returned by the\r\n  # call.\r\n  hoist: ->\r\n    @hoisted = yes\r\n    target   = new HoistTarget @\r\n\r\n    compileNode        = @compileNode\r\n    compileToFragments = @compileToFragments\r\n\r\n    @compileNode = (o) ->\r\n      target.update compileNode, o\r\n\r\n    @compileToFragments = (o) ->\r\n      target.update compileToFragments, o\r\n\r\n    target\r\n\r\n  cacheToCodeFragments: (cacheValues) ->\r\n    [fragmentsToText(cacheValues[0]), fragmentsToText(cacheValues[1])]\r\n\r\n  # Construct a node that returns the current node’s result.\r\n  # Note that this is overridden for smarter behavior for\r\n  # many statement nodes (e.g. `If`, `For`).\r\n  makeReturn: (results, mark) ->\r\n    if mark\r\n      # Mark this node as implicitly returned, so that it can be part of the\r\n      # node metadata returned in the AST.\r\n      @canBeReturned = yes\r\n      return\r\n    node = @unwrapAll()\r\n    if results\r\n      new Call new Literal(\"#{results}.push\"), [node]\r\n    else\r\n      new Return node\r\n\r\n  # Does this node, or any of its children, contain a node of a certain kind?\r\n  # Recursively traverses down the *children* nodes and returns the first one\r\n  # that verifies `pred`. Otherwise return undefined. `contains` does not cross\r\n  # scope boundaries.\r\n  contains: (pred) ->\r\n    node = undefined\r\n    @traverseChildren no, (n) ->\r\n      if pred n\r\n        node = n\r\n        return no\r\n    node\r\n\r\n  # Pull out the last node of a node list.\r\n  lastNode: (list) ->\r\n    if list.length is 0 then null else list[list.length - 1]\r\n\r\n  # Debugging representation of the node, for inspecting the parse tree.\r\n  # This is what `coffee --nodes` prints out.\r\n  toString: (idt = '', name = @constructor.name) ->\r\n    tree = '\\n' + idt + name\r\n    tree += '?' if @soak\r\n    @eachChild (node) -> tree += node.toString idt + TAB\r\n    tree\r\n\r\n  checkForPureStatementInExpression: ->\r\n    if jumpNode = @jumps()\r\n      jumpNode.error 'cannot use a pure statement in an expression'\r\n\r\n  # Plain JavaScript object representation of the node, that can be serialized\r\n  # as JSON. This is what the `ast` option in the Node API returns.\r\n  # We try to follow the [Babel AST spec](https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md)\r\n  # as closely as possible, for improved interoperability with other tools.\r\n  # **WARNING: DO NOT OVERRIDE THIS METHOD IN CHILD CLASSES.**\r\n  # Only override the component `ast*` methods as needed.\r\n  ast: (o, level) ->\r\n    # Merge `level` into `o` and perform other universal checks.\r\n    o = @astInitialize o, level\r\n    # Create serializable representation of this node.\r\n    astNode = @astNode o\r\n    # Mark AST nodes that correspond to expressions that (implicitly) return.\r\n    # We can’t do this as part of `astNode` because we need to assemble child\r\n    # nodes first before marking the parent being returned.\r\n    if @astNode? and @canBeReturned\r\n      Object.assign astNode, {returns: yes}\r\n    astNode\r\n\r\n  astInitialize: (o, level) ->\r\n    o = Object.assign {}, o\r\n    o.level = level if level?\r\n    if o.level > LEVEL_TOP\r\n      @checkForPureStatementInExpression()\r\n    # `@makeReturn` must be called before `astProperties`, because the latter may call\r\n    # `.ast()` for child nodes and those nodes would need the return logic from `makeReturn`\r\n    # already executed by then.\r\n    @makeReturn null, yes if @isStatement(o) and o.level isnt LEVEL_TOP and o.scope?\r\n    o\r\n\r\n  astNode: (o) ->\r\n    # Every abstract syntax tree node object has four categories of properties:\r\n    # - type, stored in the `type` field and a string like `NumberLiteral`.\r\n    # - location data, stored in the `loc`, `start`, `end` and `range` fields.\r\n    # - properties specific to this node, like `parsedValue`.\r\n    # - properties that are themselves child nodes, like `body`.\r\n    # These fields are all intermixed in the Babel spec; `type` and `start` and\r\n    # `parsedValue` are all top level fields in the AST node object. We have\r\n    # separate methods for returning each category, that we merge together here.\r\n    Object.assign {}, {type: @astType(o)}, @astProperties(o), @astLocationData()\r\n\r\n  # By default, a node class has no specific properties.\r\n  astProperties: -> {}\r\n\r\n  # By default, a node class’s AST `type` is its class name.\r\n  astType: -> @constructor.name\r\n\r\n  # The AST location data is a rearranged version of our Jison location data,\r\n  # mutated into the structure that the Babel spec uses.\r\n  astLocationData: ->\r\n    jisonLocationDataToAstLocationData @locationData\r\n\r\n  # Determines whether an AST node needs an `ExpressionStatement` wrapper.\r\n  # Typically matches our `isStatement()` logic but this allows overriding.\r\n  isStatementAst: (o) ->\r\n    @isStatement o\r\n\r\n  # Passes each child to a function, breaking when the function returns `false`.\r\n  eachChild: (func) ->\r\n    return this unless @children\r\n    for attr in @children when @[attr]\r\n      for child in flatten [@[attr]]\r\n        return this if func(child) is false\r\n    this\r\n\r\n  traverseChildren: (crossScope, func) ->\r\n    @eachChild (child) ->\r\n      recur = func(child)\r\n      child.traverseChildren(crossScope, func) unless recur is no\r\n\r\n  # `replaceInContext` will traverse children looking for a node for which `match` returns\r\n  # true. Once found, the matching node will be replaced by the result of calling `replacement`.\r\n  replaceInContext: (match, replacement) ->\r\n    return false unless @children\r\n    for attr in @children when children = @[attr]\r\n      if Array.isArray children\r\n        for child, i in children\r\n          if match child\r\n            children[i..i] = replacement child, @\r\n            return true\r\n          else\r\n            return true if child.replaceInContext match, replacement\r\n      else if match children\r\n        @[attr] = replacement children, @\r\n        return true\r\n      else\r\n        return true if children.replaceInContext match, replacement\r\n\r\n  invert: ->\r\n    new Op '!', this\r\n\r\n  unwrapAll: ->\r\n    node = this\r\n    continue until node is node = node.unwrap()\r\n    node\r\n\r\n  # Default implementations of the common node properties and methods. Nodes\r\n  # will override these with custom logic, if needed.\r\n\r\n  # `children` are the properties to recurse into when tree walking. The\r\n  # `children` list *is* the structure of the AST. The `parent` pointer, and\r\n  # the pointer to the `children` are how you can traverse the tree.\r\n  children: []\r\n\r\n  # `isStatement` has to do with “everything is an expression”. A few things\r\n  # can’t be expressions, such as `break`. Things that `isStatement` returns\r\n  # `true` for are things that can’t be used as expressions. There are some\r\n  # error messages that come from `nodes.coffee` due to statements ending up\r\n  # in expression position.\r\n  isStatement: NO\r\n\r\n  # Track comments that have been compiled into fragments, to avoid outputting\r\n  # them twice.\r\n  compiledComments: []\r\n\r\n  # `includeCommentFragments` lets `compileCommentFragments` know whether this node\r\n  # has special awareness of how to handle comments within its output.\r\n  includeCommentFragments: NO\r\n\r\n  # `jumps` tells you if an expression, or an internal part of an expression,\r\n  # has a flow control construct (like `break`, `continue`, or `return`)\r\n  # that jumps out of the normal flow of control and can’t be used as a value.\r\n  # (Note that `throw` is not considered a flow control construct.)\r\n  # This is important because flow control in the middle of an expression\r\n  # makes no sense; we have to disallow it.\r\n  jumps: NO\r\n\r\n  # If `node.shouldCache() is false`, it is safe to use `node` more than once.\r\n  # Otherwise you need to store the value of `node` in a variable and output\r\n  # that variable several times instead. Kind of like this: `5` need not be\r\n  # cached. `returnFive()`, however, could have side effects as a result of\r\n  # evaluating it more than once, and therefore we need to cache it. The\r\n  # parameter is named `shouldCache` rather than `mustCache` because there are\r\n  # also cases where we might not need to cache but where we want to, for\r\n  # example a long expression that may well be idempotent but we want to cache\r\n  # for brevity.\r\n  shouldCache: YES\r\n\r\n  isChainable: NO\r\n  isAssignable: NO\r\n  isNumber: NO\r\n\r\n  unwrap: THIS\r\n  unfoldSoak: NO\r\n\r\n  # Is this node used to assign a certain variable?\r\n  assigns: NO\r\n\r\n  # For this node and all descendents, set the location data to `locationData`\r\n  # if the location data is not already set.\r\n  updateLocationDataIfMissing: (locationData, force) ->\r\n    @forceUpdateLocation = yes if force\r\n    return this if @locationData and not @forceUpdateLocation\r\n    delete @forceUpdateLocation\r\n    @locationData = locationData\r\n\r\n    @eachChild (child) ->\r\n      child.updateLocationDataIfMissing locationData\r\n\r\n  # Add location data from another node\r\n  withLocationDataFrom: ({locationData}) ->\r\n    @updateLocationDataIfMissing locationData\r\n\r\n  # Add location data and comments from another node\r\n  withLocationDataAndCommentsFrom: (node) ->\r\n    @withLocationDataFrom node\r\n    {comments} = node\r\n    @comments = comments if comments?.length\r\n    this\r\n\r\n  # Throw a SyntaxError associated with this node’s location.\r\n  error: (message) ->\r\n    throwSyntaxError message, @locationData\r\n\r\n  makeCode: (code) ->\r\n    new CodeFragment this, code\r\n\r\n  wrapInParentheses: (fragments) ->\r\n    [@makeCode('('), fragments..., @makeCode(')')]\r\n\r\n  wrapInBraces: (fragments) ->\r\n    [@makeCode('{'), fragments..., @makeCode('}')]\r\n\r\n  # `fragmentsList` is an array of arrays of fragments. Each array in fragmentsList will be\r\n  # concatenated together, with `joinStr` added in between each, to produce a final flat array\r\n  # of fragments.\r\n  joinFragmentArrays: (fragmentsList, joinStr) ->\r\n    answer = []\r\n    for fragments, i in fragmentsList\r\n      if i then answer.push @makeCode joinStr\r\n      answer = answer.concat fragments\r\n    answer\r\n\r\n#### HoistTarget\r\n\r\n# A **HoistTargetNode** represents the output location in the node tree for a hoisted node.\r\n# See Base#hoist.\r\nexports.HoistTarget = class HoistTarget extends Base\r\n  # Expands hoisted fragments in the given array\r\n  @expand = (fragments) ->\r\n    for fragment, i in fragments by -1 when fragment.fragments\r\n      fragments[i..i] = @expand fragment.fragments\r\n    fragments\r\n\r\n  constructor: (@source) ->\r\n    super()\r\n\r\n    # Holds presentational options to apply when the source node is compiled.\r\n    @options = {}\r\n\r\n    # Placeholder fragments to be replaced by the source node’s compilation.\r\n    @targetFragments = { fragments: [] }\r\n\r\n  isStatement: (o) ->\r\n    @source.isStatement o\r\n\r\n  # Update the target fragments with the result of compiling the source.\r\n  # Calls the given compile function with the node and options (overriden with the target\r\n  # presentational options).\r\n  update: (compile, o) ->\r\n    @targetFragments.fragments = compile.call @source, merge o, @options\r\n\r\n  # Copies the target indent and level, and returns the placeholder fragments\r\n  compileToFragments: (o, level) ->\r\n    @options.indent = o.indent\r\n    @options.level  = level ? o.level\r\n    [ @targetFragments ]\r\n\r\n  compileNode: (o) ->\r\n    @compileToFragments o\r\n\r\n  compileClosure: (o) ->\r\n    @compileToFragments o\r\n\r\n#### Root\r\n\r\n# The root node of the node tree\r\nexports.Root = class Root extends Base\r\n  constructor: (@body) ->\r\n    super()\r\n\r\n    @isAsync = (new Code [], @body).isAsync\r\n\r\n  children: ['body']\r\n\r\n  # Wrap everything in a safety closure, unless requested not to. It would be\r\n  # better not to generate them in the first place, but for now, clean up\r\n  # obvious double-parentheses.\r\n  compileNode: (o) ->\r\n    o.indent    = if o.bare then '' else TAB\r\n    o.level     = LEVEL_TOP\r\n    o.compiling = yes\r\n    @initializeScope o\r\n    fragments = @body.compileRoot o\r\n    return fragments if o.bare\r\n    functionKeyword = \"#{if @isAsync then 'async ' else ''}function\"\r\n    [].concat @makeCode(\"(#{functionKeyword}() {\\n\"), fragments, @makeCode(\"\\n}).call(this);\\n\")\r\n\r\n  initializeScope: (o) ->\r\n    o.scope = new Scope null, @body, null, o.referencedVars ? []\r\n    # Mark given local variables in the root scope as parameters so they don’t\r\n    # end up being declared on the root block.\r\n    o.scope.parameter name for name in o.locals or []\r\n\r\n  commentsAst: ->\r\n    @allComments ?=\r\n      for commentToken in (@allCommentTokens ? []) when not commentToken.heregex\r\n        if commentToken.here\r\n          new HereComment commentToken\r\n        else\r\n          new LineComment commentToken\r\n    comment.ast() for comment in @allComments\r\n\r\n  astNode: (o) ->\r\n    o.level = LEVEL_TOP\r\n    @initializeScope o\r\n    super o\r\n\r\n  astType: -> 'File'\r\n\r\n  astProperties: (o) ->\r\n    @body.isRootBlock = yes\r\n    return\r\n      program: Object.assign @body.ast(o), @astLocationData()\r\n      comments: @commentsAst()\r\n\r\n#### Block\r\n\r\n# The block is the list of expressions that forms the body of an\r\n# indented block of code -- the implementation of a function, a clause in an\r\n# `if`, `switch`, or `try`, and so on...\r\nexports.Block = class Block extends Base\r\n  constructor: (nodes) ->\r\n    super()\r\n\r\n    @expressions = compact flatten nodes or []\r\n\r\n  children: ['expressions']\r\n\r\n  # Tack an expression on to the end of this expression list.\r\n  push: (node) ->\r\n    @expressions.push node\r\n    this\r\n\r\n  # Remove and return the last expression of this expression list.\r\n  pop: ->\r\n    @expressions.pop()\r\n\r\n  # Add an expression at the beginning of this expression list.\r\n  unshift: (node) ->\r\n    @expressions.unshift node\r\n    this\r\n\r\n  # If this Block consists of just a single node, unwrap it by pulling\r\n  # it back out.\r\n  unwrap: ->\r\n    if @expressions.length is 1 then @expressions[0] else this\r\n\r\n  # Is this an empty block of code?\r\n  isEmpty: ->\r\n    not @expressions.length\r\n\r\n  isStatement: (o) ->\r\n    for exp in @expressions when exp.isStatement o\r\n      return yes\r\n    no\r\n\r\n  jumps: (o) ->\r\n    for exp in @expressions\r\n      return jumpNode if jumpNode = exp.jumps o\r\n\r\n  # A Block node does not return its entire body, rather it\r\n  # ensures that the final expression is returned.\r\n  makeReturn: (results, mark) ->\r\n    len = @expressions.length\r\n    [..., lastExp] = @expressions\r\n    lastExp = lastExp?.unwrap() or no\r\n    # We also need to check that we’re not returning a JSX tag if there’s an\r\n    # adjacent one at the same level; JSX doesn’t allow that.\r\n    if lastExp and lastExp instanceof Parens and lastExp.body.expressions.length > 1\r\n      {body:{expressions}} = lastExp\r\n      [..., penult, last] = expressions\r\n      penult = penult.unwrap()\r\n      last = last.unwrap()\r\n      if penult instanceof JSXElement and last instanceof JSXElement\r\n        expressions[expressions.length - 1].error 'Adjacent JSX elements must be wrapped in an enclosing tag'\r\n    if mark\r\n      @expressions[len - 1]?.makeReturn results, mark\r\n      return\r\n    while len--\r\n      expr = @expressions[len]\r\n      @expressions[len] = expr.makeReturn results\r\n      @expressions.splice(len, 1) if expr instanceof Return and not expr.expression\r\n      break\r\n    this\r\n\r\n  compile: (o, lvl) ->\r\n    return new Root(this).withLocationDataFrom(this).compile o, lvl unless o.scope\r\n\r\n    super o, lvl\r\n\r\n  # Compile all expressions within the **Block** body. If we need to return\r\n  # the result, and it’s an expression, simply return it. If it’s a statement,\r\n  # ask the statement to do so.\r\n  compileNode: (o) ->\r\n    @tab  = o.indent\r\n    top   = o.level is LEVEL_TOP\r\n    compiledNodes = []\r\n\r\n    for node, index in @expressions\r\n      if node.hoisted\r\n        # This is a hoisted expression.\r\n        # We want to compile this and ignore the result.\r\n        node.compileToFragments o\r\n        continue\r\n      node = (node.unfoldSoak(o) or node)\r\n      if node instanceof Block\r\n        # This is a nested block. We don’t do anything special here like\r\n        # enclose it in a new scope; we just compile the statements in this\r\n        # block along with our own.\r\n        compiledNodes.push node.compileNode o\r\n      else if top\r\n        node.front = yes\r\n        fragments = node.compileToFragments o\r\n        unless node.isStatement o\r\n          fragments = indentInitial fragments, @\r\n          [..., lastFragment] = fragments\r\n          unless lastFragment.code is '' or lastFragment.isComment\r\n            fragments.push @makeCode ';'\r\n        compiledNodes.push fragments\r\n      else\r\n        compiledNodes.push node.compileToFragments o, LEVEL_LIST\r\n    if top\r\n      if @spaced\r\n        return [].concat @joinFragmentArrays(compiledNodes, '\\n\\n'), @makeCode('\\n')\r\n      else\r\n        return @joinFragmentArrays(compiledNodes, '\\n')\r\n    if compiledNodes.length\r\n      answer = @joinFragmentArrays(compiledNodes, ', ')\r\n    else\r\n      answer = [@makeCode 'void 0']\r\n    if compiledNodes.length > 1 and o.level >= LEVEL_LIST then @wrapInParentheses answer else answer\r\n\r\n  compileRoot: (o) ->\r\n    @spaced = yes\r\n    fragments = @compileWithDeclarations o\r\n    HoistTarget.expand fragments\r\n    @compileComments fragments\r\n\r\n  # Compile the expressions body for the contents of a function, with\r\n  # declarations of all inner variables pushed up to the top.\r\n  compileWithDeclarations: (o) ->\r\n    fragments = []\r\n    post = []\r\n    for exp, i in @expressions\r\n      exp = exp.unwrap()\r\n      break unless exp instanceof Literal\r\n    o = merge(o, level: LEVEL_TOP)\r\n    if i\r\n      rest = @expressions.splice i, 9e9\r\n      [spaced,    @spaced] = [@spaced, no]\r\n      [fragments, @spaced] = [@compileNode(o), spaced]\r\n      @expressions = rest\r\n    post = @compileNode o\r\n    {scope} = o\r\n    if scope.expressions is this\r\n      declars = o.scope.hasDeclarations()\r\n      assigns = scope.hasAssignments\r\n      if declars or assigns\r\n        fragments.push @makeCode '\\n' if i\r\n        fragments.push @makeCode \"#{@tab}var \"\r\n        if declars\r\n          declaredVariables = scope.declaredVariables()\r\n          for declaredVariable, declaredVariablesIndex in declaredVariables\r\n            fragments.push @makeCode declaredVariable\r\n            if Object::hasOwnProperty.call o.scope.comments, declaredVariable\r\n              fragments.push o.scope.comments[declaredVariable]...\r\n            if declaredVariablesIndex isnt declaredVariables.length - 1\r\n              fragments.push @makeCode ', '\r\n        if assigns\r\n          fragments.push @makeCode \",\\n#{@tab + TAB}\" if declars\r\n          fragments.push @makeCode scope.assignedVariables().join(\",\\n#{@tab + TAB}\")\r\n        fragments.push @makeCode \";\\n#{if @spaced then '\\n' else ''}\"\r\n      else if fragments.length and post.length\r\n        fragments.push @makeCode \"\\n\"\r\n    fragments.concat post\r\n\r\n  compileComments: (fragments) ->\r\n    for fragment, fragmentIndex in fragments\r\n      # Insert comments into the output at the next or previous newline.\r\n      # If there are no newlines at which to place comments, create them.\r\n      if fragment.precedingComments\r\n        # Determine the indentation level of the fragment that we are about\r\n        # to insert comments before, and use that indentation level for our\r\n        # inserted comments. At this point, the fragments’ `code` property\r\n        # is the generated output JavaScript, and CoffeeScript always\r\n        # generates output indented by two spaces; so all we need to do is\r\n        # search for a `code` property that begins with at least two spaces.\r\n        fragmentIndent = ''\r\n        for pastFragment in fragments[0...(fragmentIndex + 1)] by -1\r\n          indent = /^ {2,}/m.exec pastFragment.code\r\n          if indent\r\n            fragmentIndent = indent[0]\r\n            break\r\n          else if '\\n' in pastFragment.code\r\n            break\r\n        code = \"\\n#{fragmentIndent}\" + (\r\n            for commentFragment in fragment.precedingComments\r\n              if commentFragment.isHereComment and commentFragment.multiline\r\n                multident commentFragment.code, fragmentIndent, no\r\n              else\r\n                commentFragment.code\r\n          ).join(\"\\n#{fragmentIndent}\").replace /^(\\s*)$/gm, ''\r\n        for pastFragment, pastFragmentIndex in fragments[0...(fragmentIndex + 1)] by -1\r\n          newLineIndex = pastFragment.code.lastIndexOf '\\n'\r\n          if newLineIndex is -1\r\n            # Keep searching previous fragments until we can’t go back any\r\n            # further, either because there are no fragments left or we’ve\r\n            # discovered that we’re in a code block that is interpolated\r\n            # inside a string.\r\n            if pastFragmentIndex is 0\r\n              pastFragment.code = '\\n' + pastFragment.code\r\n              newLineIndex = 0\r\n            else if pastFragment.isStringWithInterpolations and pastFragment.code is '{'\r\n              code = code[1..] + '\\n' # Move newline to end.\r\n              newLineIndex = 1\r\n            else\r\n              continue\r\n          delete fragment.precedingComments\r\n          pastFragment.code = pastFragment.code[0...newLineIndex] +\r\n            code + pastFragment.code[newLineIndex..]\r\n          break\r\n\r\n      # Yes, this is awfully similar to the previous `if` block, but if you\r\n      # look closely you’ll find lots of tiny differences that make this\r\n      # confusing if it were abstracted into a function that both blocks share.\r\n      if fragment.followingComments\r\n        # Does the first trailing comment follow at the end of a line of code,\r\n        # like `; // Comment`, or does it start a new line after a line of code?\r\n        trail = fragment.followingComments[0].trail\r\n        fragmentIndent = ''\r\n        # Find the indent of the next line of code, if we have any non-trailing\r\n        # comments to output. We need to first find the next newline, as these\r\n        # comments will be output after that; and then the indent of the line\r\n        # that follows the next newline.\r\n        unless trail and fragment.followingComments.length is 1\r\n          onNextLine = no\r\n          for upcomingFragment in fragments[fragmentIndex...]\r\n            unless onNextLine\r\n              if '\\n' in upcomingFragment.code\r\n                onNextLine = yes\r\n              else\r\n                continue\r\n            else\r\n              indent = /^ {2,}/m.exec upcomingFragment.code\r\n              if indent\r\n                fragmentIndent = indent[0]\r\n                break\r\n              else if '\\n' in upcomingFragment.code\r\n                break\r\n        # Is this comment following the indent inserted by bare mode?\r\n        # If so, there’s no need to indent this further.\r\n        code = if fragmentIndex is 1 and /^\\s+$/.test fragments[0].code\r\n          ''\r\n        else if trail\r\n          ' '\r\n        else\r\n          \"\\n#{fragmentIndent}\"\r\n        # Assemble properly indented comments.\r\n        code += (\r\n            for commentFragment in fragment.followingComments\r\n              if commentFragment.isHereComment and commentFragment.multiline\r\n                multident commentFragment.code, fragmentIndent, no\r\n              else\r\n                commentFragment.code\r\n          ).join(\"\\n#{fragmentIndent}\").replace /^(\\s*)$/gm, ''\r\n        for upcomingFragment, upcomingFragmentIndex in fragments[fragmentIndex...]\r\n          newLineIndex = upcomingFragment.code.indexOf '\\n'\r\n          if newLineIndex is -1\r\n            # Keep searching upcoming fragments until we can’t go any\r\n            # further, either because there are no fragments left or we’ve\r\n            # discovered that we’re in a code block that is interpolated\r\n            # inside a string.\r\n            if upcomingFragmentIndex is fragments.length - 1\r\n              upcomingFragment.code = upcomingFragment.code + '\\n'\r\n              newLineIndex = upcomingFragment.code.length\r\n            else if upcomingFragment.isStringWithInterpolations and upcomingFragment.code is '}'\r\n              code = \"#{code}\\n\"\r\n              newLineIndex = 0\r\n            else\r\n              continue\r\n          delete fragment.followingComments\r\n          # Avoid inserting extra blank lines.\r\n          code = code.replace /^\\n/, '' if upcomingFragment.code is '\\n'\r\n          upcomingFragment.code = upcomingFragment.code[0...newLineIndex] +\r\n            code + upcomingFragment.code[newLineIndex..]\r\n          break\r\n\r\n    fragments\r\n\r\n  # Wrap up the given nodes as a **Block**, unless it already happens\r\n  # to be one.\r\n  @wrap: (nodes) ->\r\n    return nodes[0] if nodes.length is 1 and nodes[0] instanceof Block\r\n    new Block nodes\r\n\r\n  astNode: (o) ->\r\n    if (o.level? and o.level isnt LEVEL_TOP) and @expressions.length\r\n      return (new Sequence(@expressions).withLocationDataFrom @).ast o\r\n\r\n    super o\r\n\r\n  astType: ->\r\n    if @isRootBlock\r\n      'Program'\r\n    else if @isClassBody\r\n      'ClassBody'\r\n    else\r\n      'BlockStatement'\r\n\r\n  astProperties: (o) ->\r\n    checkForDirectives = del o, 'checkForDirectives'\r\n\r\n    sniffDirectives @expressions, notFinalExpression: checkForDirectives if @isRootBlock or checkForDirectives\r\n    directives = []\r\n    body = []\r\n    for expression in @expressions\r\n      expressionAst = expression.ast o\r\n      # Ignore generated PassthroughLiteral\r\n      if not expressionAst?\r\n        continue\r\n      else if expression instanceof Directive\r\n        directives.push expressionAst\r\n      # If an expression is a statement, it can be added to the body as is.\r\n      else if expression.isStatementAst o\r\n        body.push expressionAst\r\n      # Otherwise, we need to wrap it in an `ExpressionStatement` AST node.\r\n      else\r\n        body.push Object.assign\r\n            type: 'ExpressionStatement'\r\n            expression: expressionAst\r\n          ,\r\n            expression.astLocationData()\r\n\r\n    return {\r\n      # For now, we’re not including `sourceType` on the `Program` AST node.\r\n      # Its value could be either `'script'` or `'module'`, and there’s no way\r\n      # for CoffeeScript to always know which it should be. The presence of an\r\n      # `import` or `export` statement in source code would imply that it should\r\n      # be a `module`, but a project may consist of mostly such files and also\r\n      # an outlier file that lacks `import` or `export` but is still imported\r\n      # into the project and therefore expects to be treated as a `module`.\r\n      # Determining the value of `sourceType` is essentially the same challenge\r\n      # posed by determining the parse goal of a JavaScript file, also `module`\r\n      # or `script`, and so if Node figures out a way to do so for `.js` files\r\n      # then CoffeeScript can copy Node’s algorithm.\r\n\r\n      # sourceType: 'module'\r\n      body, directives\r\n    }\r\n\r\n  astLocationData: ->\r\n    return if @isRootBlock and not @locationData?\r\n    super()\r\n\r\n# A directive e.g. 'use strict'.\r\n# Currently only used during AST generation.\r\nexports.Directive = class Directive extends Base\r\n  constructor: (@value) ->\r\n    super()\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      value: Object.assign {},\r\n        @value.ast o\r\n        type: 'DirectiveLiteral'\r\n\r\n#### Literal\r\n\r\n# `Literal` is a base class for static values that can be passed through\r\n# directly into JavaScript without translation, such as: strings, numbers,\r\n# `true`, `false`, `null`...\r\nexports.Literal = class Literal extends Base\r\n  constructor: (@value) ->\r\n    super()\r\n\r\n  shouldCache: NO\r\n\r\n  assigns: (name) ->\r\n    name is @value\r\n\r\n  compileNode: (o) ->\r\n    [@makeCode @value]\r\n\r\n  astProperties: ->\r\n    return\r\n      value: @value\r\n\r\n  toString: ->\r\n    # This is only intended for debugging.\r\n    \" #{if @isStatement() then super() else @constructor.name}: #{@value}\"\r\n\r\nexports.NumberLiteral = class NumberLiteral extends Literal\r\n  constructor: (@value, {@parsedValue} = {}) ->\r\n    super()\r\n    unless @parsedValue?\r\n      if isNumber @value\r\n        @parsedValue = @value\r\n        @value = \"#{@value}\"\r\n      else\r\n        @parsedValue = parseNumber @value\r\n\r\n  isBigInt: ->\r\n    /n$/.test @value\r\n\r\n  astType: ->\r\n    if @isBigInt()\r\n      'BigIntLiteral'\r\n    else\r\n      'NumericLiteral'\r\n\r\n  astProperties: ->\r\n    return\r\n      value:\r\n        if @isBigInt()\r\n          @parsedValue.toString()\r\n        else\r\n          @parsedValue\r\n      extra:\r\n        rawValue:\r\n          if @isBigInt()\r\n            @parsedValue.toString()\r\n          else\r\n            @parsedValue\r\n        raw: @value\r\n\r\nexports.InfinityLiteral = class InfinityLiteral extends NumberLiteral\r\n  constructor: (@value, {@originalValue = 'Infinity'} = {}) ->\r\n    super()\r\n\r\n  compileNode: ->\r\n    [@makeCode '2e308']\r\n\r\n  astNode: (o) ->\r\n    unless @originalValue is 'Infinity'\r\n      return new NumberLiteral(@value).withLocationDataFrom(@).ast o\r\n    super o\r\n\r\n  astType: -> 'Identifier'\r\n\r\n  astProperties: ->\r\n    return\r\n      name: 'Infinity'\r\n      declaration: no\r\n\r\nexports.NaNLiteral = class NaNLiteral extends NumberLiteral\r\n  constructor: ->\r\n    super 'NaN'\r\n\r\n  compileNode: (o) ->\r\n    code = [@makeCode '0/0']\r\n    if o.level >= LEVEL_OP then @wrapInParentheses code else code\r\n\r\n  astType: -> 'Identifier'\r\n\r\n  astProperties: ->\r\n    return\r\n      name: 'NaN'\r\n      declaration: no\r\n\r\nexports.StringLiteral = class StringLiteral extends Literal\r\n  constructor: (@originalValue, {@quote, @initialChunk, @finalChunk, @indent, @double, @heregex} = {}) ->\r\n    super ''\r\n    @quote = null if @quote is '///'\r\n    @fromSourceString = @quote?\r\n    @quote ?= '\"'\r\n    heredoc = @isFromHeredoc()\r\n\r\n    val = @originalValue\r\n    if @heregex\r\n      val = val.replace HEREGEX_OMIT, '$1$2'\r\n      val = replaceUnicodeCodePointEscapes val, flags: @heregex.flags\r\n    else\r\n      val = val.replace STRING_OMIT, '$1'\r\n      val =\r\n        unless @fromSourceString\r\n          val\r\n        else if heredoc\r\n          indentRegex = /// \\n#{@indent} ///g if @indent\r\n\r\n          val = val.replace indentRegex, '\\n' if indentRegex\r\n          val = val.replace LEADING_BLANK_LINE,  '' if @initialChunk\r\n          val = val.replace TRAILING_BLANK_LINE, '' if @finalChunk\r\n          val\r\n        else\r\n          val.replace SIMPLE_STRING_OMIT, (match, offset) =>\r\n            if (@initialChunk and offset is 0) or\r\n               (@finalChunk and offset + match.length is val.length)\r\n              ''\r\n            else\r\n              ' '\r\n    @delimiter = @quote.charAt 0\r\n    @value = makeDelimitedLiteral val, {\r\n      @delimiter\r\n      @double\r\n    }\r\n\r\n    @unquotedValueForTemplateLiteral = makeDelimitedLiteral val, {\r\n      delimiter: '`'\r\n      @double\r\n      escapeNewlines: no\r\n      includeDelimiters: no\r\n      convertTrailingNullEscapes: yes\r\n    }\r\n\r\n    @unquotedValueForJSX = makeDelimitedLiteral val, {\r\n      @double\r\n      escapeNewlines: no\r\n      includeDelimiters: no\r\n      escapeDelimiter: no\r\n    }\r\n\r\n  compileNode: (o) ->\r\n    return StringWithInterpolations.fromStringLiteral(@).compileNode o if @shouldGenerateTemplateLiteral()\r\n    return [@makeCode @unquotedValueForJSX] if @jsx\r\n    super o\r\n\r\n  # `StringLiteral`s can represent either entire literal strings\r\n  # or pieces of text inside of e.g. an interpolated string.\r\n  # When parsed as the former but needing to be treated as the latter\r\n  # (e.g. the string part of a tagged template literal), this will return\r\n  # a copy of the `StringLiteral` with the quotes trimmed from its location\r\n  # data (like it would have if parsed as part of an interpolated string).\r\n  withoutQuotesInLocationData: ->\r\n    endsWithNewline = @originalValue[-1..] is '\\n'\r\n    locationData = Object.assign {}, @locationData\r\n    locationData.first_column          += @quote.length\r\n    if endsWithNewline\r\n      locationData.last_line -= 1\r\n      locationData.last_column =\r\n        if locationData.last_line is locationData.first_line\r\n          locationData.first_column + @originalValue.length - '\\n'.length\r\n        else\r\n          @originalValue[...-1].length - '\\n'.length - @originalValue[...-1].lastIndexOf('\\n')\r\n    else\r\n      locationData.last_column         -= @quote.length\r\n    locationData.last_column_exclusive -= @quote.length\r\n    locationData.range = [\r\n      locationData.range[0] + @quote.length\r\n      locationData.range[1] - @quote.length\r\n    ]\r\n    copy = new StringLiteral @originalValue, {@quote, @initialChunk, @finalChunk, @indent, @double, @heregex}\r\n    copy.locationData = locationData\r\n    copy\r\n\r\n  isFromHeredoc: ->\r\n    @quote.length is 3\r\n\r\n  shouldGenerateTemplateLiteral: ->\r\n    @isFromHeredoc()\r\n\r\n  astNode: (o) ->\r\n    return StringWithInterpolations.fromStringLiteral(@).ast o if @shouldGenerateTemplateLiteral()\r\n    super o\r\n\r\n  astProperties: ->\r\n    return\r\n      value: @originalValue\r\n      extra:\r\n        raw: \"#{@delimiter}#{@originalValue}#{@delimiter}\"\r\n\r\nexports.RegexLiteral = class RegexLiteral extends Literal\r\n  constructor: (value, {@delimiter = '/', @heregexCommentTokens = []} = {}) ->\r\n    super ''\r\n    heregex = @delimiter is '///'\r\n    endDelimiterIndex = value.lastIndexOf '/'\r\n    @flags = value[endDelimiterIndex + 1..]\r\n    val = @originalValue = value[1...endDelimiterIndex]\r\n    val = val.replace HEREGEX_OMIT, '$1$2' if heregex\r\n    val = replaceUnicodeCodePointEscapes val, {@flags}\r\n    @value = \"#{makeDelimitedLiteral val, delimiter: '/'}#{@flags}\"\r\n\r\n  REGEX_REGEX: /// ^ / (.*) / \\w* $ ///\r\n\r\n  astType: -> 'RegExpLiteral'\r\n\r\n  astProperties: (o) ->\r\n    [, pattern] = @REGEX_REGEX.exec @value\r\n    return {\r\n      value: undefined\r\n      pattern, @flags, @delimiter\r\n      originalPattern: @originalValue\r\n      extra:\r\n        raw: @value\r\n        originalRaw: \"#{@delimiter}#{@originalValue}#{@delimiter}#{@flags}\"\r\n        rawValue: undefined\r\n      comments:\r\n        for heregexCommentToken in @heregexCommentTokens\r\n          if heregexCommentToken.here\r\n            new HereComment(heregexCommentToken).ast o\r\n          else\r\n            new LineComment(heregexCommentToken).ast o\r\n    }\r\n\r\nexports.PassthroughLiteral = class PassthroughLiteral extends Literal\r\n  constructor: (@originalValue, {@here, @generated} = {}) ->\r\n    super ''\r\n    @value = @originalValue.replace /\\\\+(`|$)/g, (string) ->\r\n      # `string` is always a value like '\\`', '\\\\\\`', '\\\\\\\\\\`', etc.\r\n      # By reducing it to its latter half, we turn '\\`' to '`', '\\\\\\`' to '\\`', etc.\r\n      string[-Math.ceil(string.length / 2)..]\r\n\r\n  astNode: (o) ->\r\n    return null if @generated\r\n    super o\r\n\r\n  astProperties: ->\r\n    return {\r\n      value: @originalValue\r\n      here: !!@here\r\n    }\r\n\r\nexports.IdentifierLiteral = class IdentifierLiteral extends Literal\r\n  isAssignable: YES\r\n\r\n  eachName: (iterator) ->\r\n    iterator @\r\n\r\n  astType: ->\r\n    if @jsx\r\n      'JSXIdentifier'\r\n    else\r\n      'Identifier'\r\n\r\n  astProperties: ->\r\n    return\r\n      name: @value\r\n      declaration: !!@isDeclaration\r\n\r\nexports.PropertyName = class PropertyName extends Literal\r\n  isAssignable: YES\r\n\r\n  astType: ->\r\n    if @jsx\r\n      'JSXIdentifier'\r\n    else\r\n      'Identifier'\r\n\r\n  astProperties: ->\r\n    return\r\n      name: @value\r\n      declaration: no\r\n\r\nexports.ComputedPropertyName = class ComputedPropertyName extends PropertyName\r\n  compileNode: (o) ->\r\n    [@makeCode('['), @value.compileToFragments(o, LEVEL_LIST)..., @makeCode(']')]\r\n\r\n  astNode: (o) ->\r\n    @value.ast o\r\n\r\nexports.StatementLiteral = class StatementLiteral extends Literal\r\n  isStatement: YES\r\n\r\n  makeReturn: THIS\r\n\r\n  jumps: (o) ->\r\n    return this if @value is 'break' and not (o?.loop or o?.block)\r\n    return this if @value is 'continue' and not o?.loop\r\n\r\n  compileNode: (o) ->\r\n    [@makeCode \"#{@tab}#{@value};\"]\r\n\r\n  astType: ->\r\n    switch @value\r\n      when 'continue' then 'ContinueStatement'\r\n      when 'break'    then 'BreakStatement'\r\n      when 'debugger' then 'DebuggerStatement'\r\n\r\nexports.ThisLiteral = class ThisLiteral extends Literal\r\n  constructor: (value) ->\r\n    super 'this'\r\n    @shorthand = value is '@'\r\n\r\n  compileNode: (o) ->\r\n    code = if o.scope.method?.bound then o.scope.method.context else @value\r\n    [@makeCode code]\r\n\r\n  astType: -> 'ThisExpression'\r\n\r\n  astProperties: ->\r\n    return\r\n      shorthand: @shorthand\r\n\r\nexports.UndefinedLiteral = class UndefinedLiteral extends Literal\r\n  constructor: ->\r\n    super 'undefined'\r\n\r\n  compileNode: (o) ->\r\n    [@makeCode if o.level >= LEVEL_ACCESS then '(void 0)' else 'void 0']\r\n\r\n  astType: -> 'Identifier'\r\n\r\n  astProperties: ->\r\n    return\r\n      name: @value\r\n      declaration: no\r\n\r\nexports.NullLiteral = class NullLiteral extends Literal\r\n  constructor: ->\r\n    super 'null'\r\n\r\nexports.BooleanLiteral = class BooleanLiteral extends Literal\r\n  constructor: (value, {@originalValue} = {}) ->\r\n    super value\r\n    @originalValue ?= @value\r\n\r\n  astProperties: ->\r\n    value: if @value is 'true' then yes else no\r\n    name: @originalValue\r\n\r\nexports.DefaultLiteral = class DefaultLiteral extends Literal\r\n  astType: -> 'Identifier'\r\n\r\n  astProperties: ->\r\n    return\r\n      name: 'default'\r\n      declaration: no\r\n\r\n#### Return\r\n\r\n# A `return` is a *pureStatement*—wrapping it in a closure wouldn’t make sense.\r\nexports.Return = class Return extends Base\r\n  constructor: (@expression, {@belongsToFuncDirectiveReturn} = {}) ->\r\n    super()\r\n\r\n  children: ['expression']\r\n\r\n  isStatement:     YES\r\n  makeReturn:      THIS\r\n  jumps:           THIS\r\n\r\n  compileToFragments: (o, level) ->\r\n    expr = @expression?.makeReturn()\r\n    if expr and expr not instanceof Return then expr.compileToFragments o, level else super o, level\r\n\r\n  compileNode: (o) ->\r\n    answer = []\r\n    # TODO: If we call `expression.compile()` here twice, we’ll sometimes\r\n    # get back different results!\r\n    if @expression\r\n      answer = @expression.compileToFragments o, LEVEL_PAREN\r\n      unshiftAfterComments answer, @makeCode \"#{@tab}return \"\r\n      # Since the `return` got indented by `@tab`, preceding comments that are\r\n      # multiline need to be indented.\r\n      for fragment in answer\r\n        if fragment.isHereComment and '\\n' in fragment.code\r\n          fragment.code = multident fragment.code, @tab\r\n        else if fragment.isLineComment\r\n          fragment.code = \"#{@tab}#{fragment.code}\"\r\n        else\r\n          break\r\n    else\r\n      answer.push @makeCode \"#{@tab}return\"\r\n    answer.push @makeCode ';'\r\n    answer\r\n\r\n  checkForPureStatementInExpression: ->\r\n    # don’t flag `return` from `await return`/`yield return` as invalid.\r\n    return if @belongsToFuncDirectiveReturn\r\n    super()\r\n\r\n  astType: -> 'ReturnStatement'\r\n\r\n  astProperties: (o) ->\r\n    argument: @expression?.ast(o, LEVEL_PAREN) ? null\r\n\r\n# Parent class for `YieldReturn`/`AwaitReturn`.\r\nexports.FuncDirectiveReturn = class FuncDirectiveReturn extends Return\r\n  constructor: (expression, {@returnKeyword}) ->\r\n    super expression\r\n\r\n  compileNode: (o) ->\r\n    @checkScope o\r\n    super o\r\n\r\n  checkScope: (o) ->\r\n    unless o.scope.parent?\r\n      @error \"#{@keyword} can only occur inside functions\"\r\n\r\n  isStatementAst: NO\r\n\r\n  astNode: (o) ->\r\n    @checkScope o\r\n\r\n    new Op @keyword,\r\n      new Return @expression, belongsToFuncDirectiveReturn: yes\r\n      .withLocationDataFrom(\r\n        if @expression?\r\n          locationData: mergeLocationData @returnKeyword.locationData, @expression.locationData\r\n        else\r\n          @returnKeyword\r\n      )\r\n    .withLocationDataFrom @\r\n    .ast o\r\n\r\n# `yield return` works exactly like `return`, except that it turns the function\r\n# into a generator.\r\nexports.YieldReturn = class YieldReturn extends FuncDirectiveReturn\r\n  keyword: 'yield'\r\n\r\nexports.AwaitReturn = class AwaitReturn extends FuncDirectiveReturn\r\n  keyword: 'await'\r\n\r\n#### Value\r\n\r\n# A value, variable or literal or parenthesized, indexed or dotted into,\r\n# or vanilla.\r\nexports.Value = class Value extends Base\r\n  constructor: (base, props, tag, isDefaultValue = no) ->\r\n    super()\r\n    return base if not props and base instanceof Value\r\n    @base           = base\r\n    @properties     = props or []\r\n    @tag            = tag\r\n    @[tag]          = yes if tag\r\n    @isDefaultValue = isDefaultValue\r\n    # If this is a `@foo =` assignment, if there are comments on `@` move them\r\n    # to be on `foo`.\r\n    if @base?.comments and @base instanceof ThisLiteral and @properties[0]?.name?\r\n      moveComments @base, @properties[0].name\r\n\r\n  children: ['base', 'properties']\r\n\r\n  # Add a property (or *properties* ) `Access` to the list.\r\n  add: (props) ->\r\n    @properties = @properties.concat props\r\n    @forceUpdateLocation = yes\r\n    this\r\n\r\n  hasProperties: ->\r\n    @properties.length isnt 0\r\n\r\n  bareLiteral: (type) ->\r\n    not @properties.length and @base instanceof type\r\n\r\n  # Some boolean checks for the benefit of other nodes.\r\n  isArray        : -> @bareLiteral(Arr)\r\n  isRange        : -> @bareLiteral(Range)\r\n  shouldCache    : -> @hasProperties() or @base.shouldCache()\r\n  isAssignable   : (opts) -> @hasProperties() or @base.isAssignable opts\r\n  isNumber       : -> @bareLiteral(NumberLiteral)\r\n  isString       : -> @bareLiteral(StringLiteral)\r\n  isRegex        : -> @bareLiteral(RegexLiteral)\r\n  isUndefined    : -> @bareLiteral(UndefinedLiteral)\r\n  isNull         : -> @bareLiteral(NullLiteral)\r\n  isBoolean      : -> @bareLiteral(BooleanLiteral)\r\n  isAtomic       : ->\r\n    for node in @properties.concat @base\r\n      return no if node.soak or node instanceof Call or node instanceof Op and node.operator is 'do'\r\n    yes\r\n\r\n  isNotCallable  : -> @isNumber() or @isString() or @isRegex() or\r\n                      @isArray() or @isRange() or @isSplice() or @isObject() or\r\n                      @isUndefined() or @isNull() or @isBoolean()\r\n\r\n  isStatement : (o)    -> not @properties.length and @base.isStatement o\r\n  isJSXTag    : -> @base instanceof JSXTag\r\n  assigns     : (name) -> not @properties.length and @base.assigns name\r\n  jumps       : (o)    -> not @properties.length and @base.jumps o\r\n\r\n  isObject: (onlyGenerated) ->\r\n    return no if @properties.length\r\n    (@base instanceof Obj) and (not onlyGenerated or @base.generated)\r\n\r\n  isElision: ->\r\n    return no unless @base instanceof Arr\r\n    @base.hasElision()\r\n\r\n  isSplice: ->\r\n    [..., lastProperty] = @properties\r\n    lastProperty instanceof Slice\r\n\r\n  looksStatic: (className) ->\r\n    return no unless ((thisLiteral = @base) instanceof ThisLiteral or (name = @base).value is className) and\r\n      @properties.length is 1 and @properties[0].name?.value isnt 'prototype'\r\n    return\r\n      staticClassName: thisLiteral ? name\r\n\r\n  # The value can be unwrapped as its inner node, if there are no attached\r\n  # properties.\r\n  unwrap: ->\r\n    if @properties.length then this else @base\r\n\r\n  # A reference has base part (`this` value) and name part.\r\n  # We cache them separately for compiling complex expressions.\r\n  # `a()[b()] ?= c` -> `(_base = a())[_name = b()] ? _base[_name] = c`\r\n  cacheReference: (o) ->\r\n    [..., name] = @properties\r\n    if @properties.length < 2 and not @base.shouldCache() and not name?.shouldCache()\r\n      return [this, this]  # `a` `a.b`\r\n    base = new Value @base, @properties[...-1]\r\n    if base.shouldCache()  # `a().b`\r\n      bref = new IdentifierLiteral o.scope.freeVariable 'base'\r\n      base = new Value new Parens new Assign bref, base\r\n    return [base, bref] unless name  # `a()`\r\n    if name.shouldCache()  # `a[b()]`\r\n      nref = new IdentifierLiteral o.scope.freeVariable 'name'\r\n      name = new Index new Assign nref, name.index\r\n      nref = new Index nref\r\n    [base.add(name), new Value(bref or base.base, [nref or name])]\r\n\r\n  # We compile a value to JavaScript by compiling and joining each property.\r\n  # Things get much more interesting if the chain of properties has *soak*\r\n  # operators `?.` interspersed. Then we have to take care not to accidentally\r\n  # evaluate anything twice when building the soak chain.\r\n  compileNode: (o) ->\r\n    @base.front = @front\r\n    props = @properties\r\n    if props.length and @base.cached?\r\n      # Cached fragments enable correct order of the compilation,\r\n      # and reuse of variables in the scope.\r\n      # Example:\r\n      # `a(x = 5).b(-> x = 6)` should compile in the same order as\r\n      # `a(x = 5); b(-> x = 6)`\r\n      # (see issue #4437, https://github.com/jashkenas/coffeescript/issues/4437)\r\n      fragments = @base.cached\r\n    else\r\n      fragments = @base.compileToFragments o, (if props.length then LEVEL_ACCESS else null)\r\n    if props.length and SIMPLENUM.test fragmentsToText fragments\r\n      fragments.push @makeCode '.'\r\n    for prop in props\r\n      fragments.push (prop.compileToFragments o)...\r\n\r\n    fragments\r\n\r\n  # Unfold a soak into an `If`: `a?.b` -> `a.b if a?`\r\n  unfoldSoak: (o) ->\r\n    @unfoldedSoak ?= do =>\r\n      ifn = @base.unfoldSoak o\r\n      if ifn\r\n        ifn.body.properties.push @properties...\r\n        return ifn\r\n      for prop, i in @properties when prop.soak\r\n        prop.soak = off\r\n        fst = new Value @base, @properties[...i]\r\n        snd = new Value @base, @properties[i..]\r\n        if fst.shouldCache()\r\n          ref = new IdentifierLiteral o.scope.freeVariable 'ref'\r\n          fst = new Parens new Assign ref, fst\r\n          snd.base = ref\r\n        return new If new Existence(fst), snd, soak: on\r\n      no\r\n\r\n  eachName: (iterator, {checkAssignability = yes} = {}) ->\r\n    if @hasProperties()\r\n      iterator @\r\n    else if not checkAssignability or @base.isAssignable()\r\n      @base.eachName iterator\r\n    else\r\n      @error 'tried to assign to unassignable value'\r\n\r\n  # For AST generation, we need an `object` that’s this `Value` minus its last\r\n  # property, if it has properties.\r\n  object: ->\r\n    return @ unless @hasProperties()\r\n    # Get all properties except the last one; for a `Value` with only one\r\n    # property, `initialProperties` is an empty array.\r\n    initialProperties = @properties[0...@properties.length - 1]\r\n    # Create the `object` that becomes the new “base” for the split-off final\r\n    # property.\r\n    object = new Value @base, initialProperties, @tag, @isDefaultValue\r\n    # Add location data to our new node, so that it has correct location data\r\n    # for source maps or later conversion into AST location data.\r\n    object.locationData =\r\n      if initialProperties.length is 0\r\n        # This new `Value` has only one property, so the location data is just\r\n        # that of the parent `Value`’s base.\r\n        @base.locationData\r\n      else\r\n        # This new `Value` has multiple properties, so the location data spans\r\n        # from the parent `Value`’s base to the last property that’s included\r\n        # in this new node (a.k.a. the second-to-last property of the parent).\r\n        mergeLocationData @base.locationData, initialProperties[initialProperties.length - 1].locationData\r\n    object\r\n\r\n  containsSoak: ->\r\n    return no unless @hasProperties()\r\n\r\n    for property in @properties when property.soak\r\n      return yes\r\n\r\n    return yes if @base instanceof Call and @base.soak\r\n\r\n    no\r\n\r\n  astNode: (o) ->\r\n    # If the `Value` has no properties, the AST node is just whatever this\r\n    # node’s `base` is.\r\n    return @base.ast o unless @hasProperties()\r\n    # Otherwise, call `Base::ast` which in turn calls the `astType` and\r\n    # `astProperties` methods below.\r\n    super o\r\n\r\n  astType: ->\r\n    if @isJSXTag()\r\n      'JSXMemberExpression'\r\n    else if @containsSoak()\r\n      'OptionalMemberExpression'\r\n    else\r\n      'MemberExpression'\r\n\r\n  # If this `Value` has properties, the *last* property (e.g. `c` in `a.b.c`)\r\n  # becomes the `property`, and the preceding properties (e.g. `a.b`) become\r\n  # a child `Value` node assigned to the `object` property.\r\n  astProperties: (o) ->\r\n    [..., property] = @properties\r\n    property.name.jsx = yes if @isJSXTag()\r\n    computed = property instanceof Index or property.name?.unwrap() not instanceof PropertyName\r\n    return {\r\n      object: @object().ast o, LEVEL_ACCESS\r\n      property: property.ast o, (LEVEL_PAREN if computed)\r\n      computed\r\n      optional: !!property.soak\r\n      shorthand: !!property.shorthand\r\n    }\r\n\r\n  astLocationData: ->\r\n    return super() unless @isJSXTag()\r\n    # don't include leading < of JSX tag in location data\r\n    mergeAstLocationData(\r\n      jisonLocationDataToAstLocationData(@base.tagNameLocationData),\r\n      jisonLocationDataToAstLocationData(@properties[@properties.length - 1].locationData)\r\n    )\r\n\r\nexports.MetaProperty = class MetaProperty extends Base\r\n  constructor: (@meta, @property) ->\r\n    super()\r\n\r\n  children: ['meta', 'property']\r\n\r\n  checkValid: (o) ->\r\n    if @meta.value is 'new'\r\n      if @property instanceof Access and @property.name.value is 'target'\r\n        unless o.scope.parent?\r\n          @error \"new.target can only occur inside functions\"\r\n      else\r\n        @error \"the only valid meta property for new is new.target\"\r\n    else if @meta.value is 'import'\r\n      unless @property instanceof Access and @property.name.value is 'meta'\r\n        @error \"the only valid meta property for import is import.meta\"\r\n\r\n  compileNode: (o) ->\r\n    @checkValid o\r\n    fragments = []\r\n    fragments.push @meta.compileToFragments(o, LEVEL_ACCESS)...\r\n    fragments.push @property.compileToFragments(o)...\r\n    fragments\r\n\r\n  astProperties: (o) ->\r\n    @checkValid o\r\n\r\n    return\r\n      meta: @meta.ast o, LEVEL_ACCESS\r\n      property: @property.ast o\r\n\r\n#### HereComment\r\n\r\n# Comment delimited by `###` (becoming `/* */`).\r\nexports.HereComment = class HereComment extends Base\r\n  constructor: ({ @content, @newLine, @unshift, @locationData }) ->\r\n    super()\r\n\r\n  compileNode: (o) ->\r\n    multiline = '\\n' in @content\r\n\r\n    # Unindent multiline comments. They will be reindented later.\r\n    if multiline\r\n      indent = null\r\n      for line in @content.split '\\n'\r\n        leadingWhitespace = /^\\s*/.exec(line)[0]\r\n        if not indent or leadingWhitespace.length < indent.length\r\n          indent = leadingWhitespace\r\n      @content = @content.replace /// \\n #{indent} ///g, '\\n' if indent\r\n\r\n    hasLeadingMarks = /\\n\\s*[#|\\*]/.test @content\r\n    @content = @content.replace /^([ \\t]*)#(?=\\s)/gm, ' *' if hasLeadingMarks\r\n\r\n    @content = \"/*#{@content}#{if hasLeadingMarks then ' ' else ''}*/\"\r\n    fragment = @makeCode @content\r\n    fragment.newLine = @newLine\r\n    fragment.unshift = @unshift\r\n    fragment.multiline = multiline\r\n    # Don’t rely on `fragment.type`, which can break when the compiler is minified.\r\n    fragment.isComment = fragment.isHereComment = yes\r\n    fragment\r\n\r\n  astType: -> 'CommentBlock'\r\n\r\n  astProperties: ->\r\n    return\r\n      value: @content\r\n\r\n#### LineComment\r\n\r\n# Comment running from `#` to the end of a line (becoming `//`).\r\nexports.LineComment = class LineComment extends Base\r\n  constructor: ({ @content, @newLine, @unshift, @locationData, @precededByBlankLine }) ->\r\n    super()\r\n\r\n  compileNode: (o) ->\r\n    fragment = @makeCode(if /^\\s*$/.test @content then '' else \"#{if @precededByBlankLine then \"\\n#{o.indent}\" else ''}//#{@content}\")\r\n    fragment.newLine = @newLine\r\n    fragment.unshift = @unshift\r\n    fragment.trail = not @newLine and not @unshift\r\n    # Don’t rely on `fragment.type`, which can break when the compiler is minified.\r\n    fragment.isComment = fragment.isLineComment = yes\r\n    fragment\r\n\r\n  astType: -> 'CommentLine'\r\n\r\n  astProperties: ->\r\n    return\r\n      value: @content\r\n\r\n#### JSX\r\n\r\nexports.JSXIdentifier = class JSXIdentifier extends IdentifierLiteral\r\n  astType: -> 'JSXIdentifier'\r\n\r\nexports.JSXTag = class JSXTag extends JSXIdentifier\r\n  constructor: (value, {\r\n    @tagNameLocationData\r\n    @closingTagOpeningBracketLocationData\r\n    @closingTagSlashLocationData\r\n    @closingTagNameLocationData\r\n    @closingTagClosingBracketLocationData\r\n  }) ->\r\n    super value\r\n\r\n  astProperties: ->\r\n    return\r\n      name: @value\r\n\r\nexports.JSXExpressionContainer = class JSXExpressionContainer extends Base\r\n  constructor: (@expression, {locationData} = {}) ->\r\n    super()\r\n    @expression.jsxAttribute = yes\r\n    @locationData = locationData ? @expression.locationData\r\n\r\n  children: ['expression']\r\n\r\n  compileNode: (o) ->\r\n    @expression.compileNode(o)\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      expression: astAsBlockIfNeeded @expression, o\r\n\r\nexports.JSXEmptyExpression = class JSXEmptyExpression extends Base\r\n\r\nexports.JSXText = class JSXText extends Base\r\n  constructor: (stringLiteral) ->\r\n    super()\r\n    @value = stringLiteral.unquotedValueForJSX\r\n    @locationData = stringLiteral.locationData\r\n\r\n  astProperties: ->\r\n    return {\r\n      @value\r\n      extra:\r\n        raw: @value\r\n    }\r\n\r\nexports.JSXAttribute = class JSXAttribute extends Base\r\n  constructor: ({@name, value}) ->\r\n    super()\r\n    @value =\r\n      if value?\r\n        value = value.base\r\n        if value instanceof StringLiteral and not value.shouldGenerateTemplateLiteral()\r\n          value\r\n        else\r\n          new JSXExpressionContainer value\r\n      else\r\n        null\r\n    @value?.comments = value.comments\r\n\r\n  children: ['name', 'value']\r\n\r\n  compileNode: (o) ->\r\n    compiledName = @name.compileToFragments o, LEVEL_LIST\r\n    return compiledName unless @value?\r\n    val = @value.compileToFragments o, LEVEL_LIST\r\n    compiledName.concat @makeCode('='), val\r\n\r\n  astProperties: (o) ->\r\n    name = @name\r\n    if ':' in name.value\r\n      name = new JSXNamespacedName name\r\n    return\r\n      name: name.ast o\r\n      value: @value?.ast(o) ? null\r\n\r\nexports.JSXAttributes = class JSXAttributes extends Base\r\n  constructor: (arr) ->\r\n    super()\r\n    @attributes = []\r\n    for object in arr.objects\r\n      @checkValidAttribute object\r\n      {base} = object\r\n      if base instanceof IdentifierLiteral\r\n        # attribute with no value eg disabled\r\n        attribute = new JSXAttribute name: new JSXIdentifier(base.value).withLocationDataAndCommentsFrom base\r\n        attribute.locationData = base.locationData\r\n        @attributes.push attribute\r\n      else if not base.generated\r\n        # object spread attribute eg {...props}\r\n        attribute = base.properties[0]\r\n        attribute.jsx = yes\r\n        attribute.locationData = base.locationData\r\n        @attributes.push attribute\r\n      else\r\n        # Obj containing attributes with values eg a=\"b\" c={d}\r\n        for property in base.properties\r\n          {variable, value} = property\r\n          attribute = new JSXAttribute {\r\n            name: new JSXIdentifier(variable.base.value).withLocationDataAndCommentsFrom variable.base\r\n            value\r\n          }\r\n          attribute.locationData = property.locationData\r\n          @attributes.push attribute\r\n    @locationData = arr.locationData\r\n\r\n  children: ['attributes']\r\n\r\n  # Catch invalid attributes: <div {a:\"b\", props} {props} \"value\" />\r\n  checkValidAttribute: (object) ->\r\n    {base: attribute} = object\r\n    properties = attribute?.properties or []\r\n    if not (attribute instanceof Obj or attribute instanceof IdentifierLiteral) or (attribute instanceof Obj and not attribute.generated and (properties.length > 1 or not (properties[0] instanceof Splat)))\r\n      object.error \"\"\"\r\n        Unexpected token. Allowed JSX attributes are: id=\"val\", src={source}, {props...} or attribute.\r\n      \"\"\"\r\n\r\n  compileNode: (o) ->\r\n    fragments = []\r\n    for attribute in @attributes\r\n      fragments.push @makeCode ' '\r\n      fragments.push attribute.compileToFragments(o, LEVEL_TOP)...\r\n    fragments\r\n\r\n  astNode: (o) ->\r\n    attribute.ast(o) for attribute in @attributes\r\n\r\nexports.JSXNamespacedName = class JSXNamespacedName extends Base\r\n  constructor: (tag) ->\r\n    super()\r\n    [namespace, name] = tag.value.split ':'\r\n    @namespace = new JSXIdentifier(namespace).withLocationDataFrom locationData: extractSameLineLocationDataFirst(namespace.length) tag.locationData\r\n    @name      = new JSXIdentifier(name     ).withLocationDataFrom locationData: extractSameLineLocationDataLast(name.length      ) tag.locationData\r\n    @locationData = tag.locationData\r\n\r\n  children: ['namespace', 'name']\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      namespace: @namespace.ast o\r\n      name: @name.ast o\r\n\r\n# Node for a JSX element\r\nexports.JSXElement = class JSXElement extends Base\r\n  constructor: ({@tagName, @attributes, @content}) ->\r\n    super()\r\n\r\n  children: ['tagName', 'attributes', 'content']\r\n\r\n  compileNode: (o) ->\r\n    @content?.base.jsx = yes\r\n    fragments = [@makeCode('<')]\r\n    fragments.push (tag = @tagName.compileToFragments(o, LEVEL_ACCESS))...\r\n    fragments.push @attributes.compileToFragments(o)...\r\n    if @content\r\n      fragments.push @makeCode('>')\r\n      fragments.push @content.compileNode(o, LEVEL_LIST)...\r\n      fragments.push [@makeCode('</'), tag..., @makeCode('>')]...\r\n    else\r\n      fragments.push @makeCode(' />')\r\n    fragments\r\n\r\n  isFragment: ->\r\n    !@tagName.base.value.length\r\n\r\n  astNode: (o) ->\r\n    # The location data spanning the opening element < ... > is captured by\r\n    # the generated Arr which contains the element's attributes\r\n    @openingElementLocationData = jisonLocationDataToAstLocationData @attributes.locationData\r\n\r\n    tagName = @tagName.base\r\n    tagName.locationData = tagName.tagNameLocationData\r\n    if @content?\r\n      @closingElementLocationData = mergeAstLocationData(\r\n        jisonLocationDataToAstLocationData tagName.closingTagOpeningBracketLocationData\r\n        jisonLocationDataToAstLocationData tagName.closingTagClosingBracketLocationData\r\n      )\r\n\r\n    super o\r\n\r\n  astType: ->\r\n    if @isFragment()\r\n      'JSXFragment'\r\n    else\r\n      'JSXElement'\r\n\r\n  elementAstProperties: (o) ->\r\n    tagNameAst = =>\r\n      tag = @tagName.unwrap()\r\n      if tag?.value and ':' in tag.value\r\n        tag = new JSXNamespacedName tag\r\n      tag.ast o\r\n\r\n    openingElement = Object.assign {\r\n      type: 'JSXOpeningElement'\r\n      name: tagNameAst()\r\n      selfClosing: not @closingElementLocationData?\r\n      attributes: @attributes.ast o\r\n    }, @openingElementLocationData\r\n\r\n    closingElement = null\r\n    if @closingElementLocationData?\r\n      closingElement = Object.assign {\r\n        type: 'JSXClosingElement'\r\n        name: Object.assign(\r\n          tagNameAst(),\r\n          jisonLocationDataToAstLocationData @tagName.base.closingTagNameLocationData\r\n        )\r\n      }, @closingElementLocationData\r\n      if closingElement.name.type in ['JSXMemberExpression', 'JSXNamespacedName']\r\n        rangeDiff = closingElement.range[0] - openingElement.range[0] + '/'.length\r\n        columnDiff = closingElement.loc.start.column - openingElement.loc.start.column + '/'.length\r\n        shiftAstLocationData = (node) =>\r\n          node.range = [\r\n            node.range[0] + rangeDiff\r\n            node.range[1] + rangeDiff\r\n          ]\r\n          node.start += rangeDiff\r\n          node.end += rangeDiff\r\n          node.loc.start =\r\n            line: @closingElementLocationData.loc.start.line\r\n            column: node.loc.start.column + columnDiff\r\n          node.loc.end =\r\n            line: @closingElementLocationData.loc.start.line\r\n            column: node.loc.end.column + columnDiff\r\n        if closingElement.name.type is 'JSXMemberExpression'\r\n          currentExpr = closingElement.name\r\n          while currentExpr.type is 'JSXMemberExpression'\r\n            shiftAstLocationData currentExpr unless currentExpr is closingElement.name\r\n            shiftAstLocationData currentExpr.property\r\n            currentExpr = currentExpr.object\r\n          shiftAstLocationData currentExpr\r\n        else # JSXNamespacedName\r\n          shiftAstLocationData closingElement.name.namespace\r\n          shiftAstLocationData closingElement.name.name\r\n\r\n    {openingElement, closingElement}\r\n\r\n  fragmentAstProperties: (o) ->\r\n    openingFragment = Object.assign {\r\n      type: 'JSXOpeningFragment'\r\n    }, @openingElementLocationData\r\n\r\n    closingFragment = Object.assign {\r\n      type: 'JSXClosingFragment'\r\n    }, @closingElementLocationData\r\n\r\n    {openingFragment, closingFragment}\r\n\r\n  contentAst: (o) ->\r\n    return [] unless @content and not @content.base.isEmpty?()\r\n\r\n    content = @content.unwrapAll()\r\n    children =\r\n      if content instanceof StringLiteral\r\n        [new JSXText content]\r\n      else # StringWithInterpolations\r\n        for element in @content.unwrapAll().extractElements o, includeInterpolationWrappers: yes, isJsx: yes\r\n          if element instanceof StringLiteral\r\n            new JSXText element\r\n          else # Interpolation\r\n            {expression} = element\r\n            unless expression?\r\n              emptyExpression = new JSXEmptyExpression()\r\n              emptyExpression.locationData = emptyExpressionLocationData {\r\n                interpolationNode: element\r\n                openingBrace: '{'\r\n                closingBrace: '}'\r\n              }\r\n\r\n              new JSXExpressionContainer emptyExpression, locationData: element.locationData\r\n            else\r\n              unwrapped = expression.unwrapAll()\r\n              if unwrapped instanceof JSXElement and\r\n                  # distinguish `<a><b /></a>` from `<a>{<b />}</a>`\r\n                  unwrapped.locationData.range[0] is element.locationData.range[0]\r\n                unwrapped\r\n              else\r\n                new JSXExpressionContainer unwrapped, locationData: element.locationData\r\n\r\n    child.ast(o) for child in children when not (child instanceof JSXText and child.value.length is 0)\r\n\r\n  astProperties: (o) ->\r\n    Object.assign(\r\n      if @isFragment()\r\n        @fragmentAstProperties o\r\n      else\r\n        @elementAstProperties o\r\n    ,\r\n      children: @contentAst o\r\n    )\r\n\r\n  astLocationData: ->\r\n    if @closingElementLocationData?\r\n      mergeAstLocationData @openingElementLocationData, @closingElementLocationData\r\n    else\r\n      @openingElementLocationData\r\n\r\n#### Call\r\n\r\n# Node for a function invocation.\r\nexports.Call = class Call extends Base\r\n  constructor: (@variable, @args = [], @soak, @token) ->\r\n    super()\r\n\r\n    @implicit = @args.implicit\r\n    @isNew = no\r\n    if @variable instanceof Value and @variable.isNotCallable()\r\n      @variable.error \"literal is not a function\"\r\n\r\n    if @variable.base instanceof JSXTag\r\n      return new JSXElement(\r\n        tagName: @variable\r\n        attributes: new JSXAttributes @args[0].base\r\n        content: @args[1]\r\n      )\r\n\r\n    # `@variable` never gets output as a result of this node getting created as\r\n    # part of `RegexWithInterpolations`, so for that case move any comments to\r\n    # the `args` property that gets passed into `RegexWithInterpolations` via\r\n    # the grammar.\r\n    if @variable.base?.value is 'RegExp' and @args.length isnt 0\r\n      moveComments @variable, @args[0]\r\n\r\n  children: ['variable', 'args']\r\n\r\n  # When setting the location, we sometimes need to update the start location to\r\n  # account for a newly-discovered `new` operator to the left of us. This\r\n  # expands the range on the left, but not the right.\r\n  updateLocationDataIfMissing: (locationData) ->\r\n    if @locationData and @needsUpdatedStartLocation\r\n      @locationData = Object.assign {},\r\n        @locationData,\r\n        first_line: locationData.first_line\r\n        first_column: locationData.first_column\r\n        range: [\r\n          locationData.range[0]\r\n          @locationData.range[1]\r\n        ]\r\n      base = @variable?.base or @variable\r\n      if base.needsUpdatedStartLocation\r\n        @variable.locationData = Object.assign {},\r\n          @variable.locationData,\r\n          first_line: locationData.first_line\r\n          first_column: locationData.first_column\r\n          range: [\r\n            locationData.range[0]\r\n            @variable.locationData.range[1]\r\n          ]\r\n        base.updateLocationDataIfMissing locationData\r\n      delete @needsUpdatedStartLocation\r\n    super locationData\r\n\r\n  # Tag this invocation as creating a new instance.\r\n  newInstance: ->\r\n    base = @variable?.base or @variable\r\n    if base instanceof Call and not base.isNew\r\n      base.newInstance()\r\n    else\r\n      @isNew = true\r\n    @needsUpdatedStartLocation = true\r\n    this\r\n\r\n  # Soaked chained invocations unfold into if/else ternary structures.\r\n  unfoldSoak: (o) ->\r\n    if @soak\r\n      if @variable instanceof Super\r\n        left = new Literal @variable.compile o\r\n        rite = new Value left\r\n        @variable.error \"Unsupported reference to 'super'\" unless @variable.accessor?\r\n      else\r\n        return ifn if ifn = unfoldSoak o, this, 'variable'\r\n        [left, rite] = new Value(@variable).cacheReference o\r\n      rite = new Call rite, @args\r\n      rite.isNew = @isNew\r\n      left = new Literal \"typeof #{ left.compile o } === \\\"function\\\"\"\r\n      return new If left, new Value(rite), soak: yes\r\n    call = this\r\n    list = []\r\n    loop\r\n      if call.variable instanceof Call\r\n        list.push call\r\n        call = call.variable\r\n        continue\r\n      break unless call.variable instanceof Value\r\n      list.push call\r\n      break unless (call = call.variable.base) instanceof Call\r\n    for call in list.reverse()\r\n      if ifn\r\n        if call.variable instanceof Call\r\n          call.variable = ifn\r\n        else\r\n          call.variable.base = ifn\r\n      ifn = unfoldSoak o, call, 'variable'\r\n    ifn\r\n\r\n  # Compile a vanilla function call.\r\n  compileNode: (o) ->\r\n    @checkForNewSuper()\r\n    @variable?.front = @front\r\n    compiledArgs = []\r\n    # If variable is `Accessor` fragments are cached and used later\r\n    # in `Value::compileNode` to ensure correct order of the compilation,\r\n    # and reuse of variables in the scope.\r\n    # Example:\r\n    # `a(x = 5).b(-> x = 6)` should compile in the same order as\r\n    # `a(x = 5); b(-> x = 6)`\r\n    # (see issue #4437, https://github.com/jashkenas/coffeescript/issues/4437)\r\n    varAccess = @variable?.properties?[0] instanceof Access\r\n    argCode = (arg for arg in (@args || []) when arg instanceof Code)\r\n    if argCode.length > 0 and varAccess and not @variable.base.cached\r\n      [cache] = @variable.base.cache o, LEVEL_ACCESS, -> no\r\n      @variable.base.cached = cache\r\n\r\n    for arg, argIndex in @args\r\n      if argIndex then compiledArgs.push @makeCode \", \"\r\n      compiledArgs.push (arg.compileToFragments o, LEVEL_LIST)...\r\n\r\n    fragments = []\r\n    if @isNew\r\n      fragments.push @makeCode 'new '\r\n    fragments.push @variable.compileToFragments(o, LEVEL_ACCESS)...\r\n    fragments.push @makeCode('('), compiledArgs..., @makeCode(')')\r\n    fragments\r\n\r\n  checkForNewSuper: ->\r\n    if @isNew\r\n      @variable.error \"Unsupported reference to 'super'\" if @variable instanceof Super\r\n\r\n  containsSoak: ->\r\n    return yes if @soak\r\n    return yes if @variable?.containsSoak?()\r\n    no\r\n\r\n  astNode: (o) ->\r\n    if @soak and @variable instanceof Super and o.scope.namedMethod()?.ctor\r\n      @variable.error \"Unsupported reference to 'super'\"\r\n    @checkForNewSuper()\r\n    super o\r\n\r\n  astType: ->\r\n    if @isNew\r\n      'NewExpression'\r\n    else if @containsSoak()\r\n      'OptionalCallExpression'\r\n    else\r\n      'CallExpression'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      callee: @variable.ast o, LEVEL_ACCESS\r\n      arguments: arg.ast(o, LEVEL_LIST) for arg in @args\r\n      optional: !!@soak\r\n      implicit: !!@implicit\r\n\r\n#### Super\r\n\r\n# Takes care of converting `super()` calls into calls against the prototype's\r\n# function of the same name.\r\n# When `expressions` are set the call will be compiled in such a way that the\r\n# expressions are evaluated without altering the return value of the `SuperCall`\r\n# expression.\r\nexports.SuperCall = class SuperCall extends Call\r\n  children: Call::children.concat ['expressions']\r\n\r\n  isStatement: (o) ->\r\n    @expressions?.length and o.level is LEVEL_TOP\r\n\r\n  compileNode: (o) ->\r\n    return super o unless @expressions?.length\r\n\r\n    superCall   = new Literal fragmentsToText super o\r\n    replacement = new Block @expressions.slice()\r\n\r\n    if o.level > LEVEL_TOP\r\n      # If we might be in an expression we need to cache and return the result\r\n      [superCall, ref] = superCall.cache o, null, YES\r\n      replacement.push ref\r\n\r\n    replacement.unshift superCall\r\n    replacement.compileToFragments o, if o.level is LEVEL_TOP then o.level else LEVEL_LIST\r\n\r\nexports.Super = class Super extends Base\r\n  constructor: (@accessor, @superLiteral) ->\r\n    super()\r\n\r\n  children: ['accessor']\r\n\r\n  compileNode: (o) ->\r\n    @checkInInstanceMethod o\r\n\r\n    method = o.scope.namedMethod()\r\n    unless method.ctor? or @accessor?\r\n      {name, variable} = method\r\n      if name.shouldCache() or (name instanceof Index and name.index.isAssignable())\r\n        nref = new IdentifierLiteral o.scope.parent.freeVariable 'name'\r\n        name.index = new Assign nref, name.index\r\n      @accessor = if nref? then new Index nref else name\r\n\r\n    if @accessor?.name?.comments\r\n      # A `super()` call gets compiled to e.g. `super.method()`, which means\r\n      # the `method` property name gets compiled for the first time here, and\r\n      # again when the `method:` property of the class gets compiled. Since\r\n      # this compilation happens first, comments attached to `method:` would\r\n      # get incorrectly output near `super.method()`, when we want them to\r\n      # get output on the second pass when `method:` is output. So set them\r\n      # aside during this compilation pass, and put them back on the object so\r\n      # that they’re there for the later compilation.\r\n      salvagedComments = @accessor.name.comments\r\n      delete @accessor.name.comments\r\n    fragments = (new Value (new Literal 'super'), if @accessor then [ @accessor ] else [])\r\n    .compileToFragments o\r\n    attachCommentsToNode salvagedComments, @accessor.name if salvagedComments\r\n    fragments\r\n\r\n  checkInInstanceMethod: (o) ->\r\n    method = o.scope.namedMethod()\r\n    @error 'cannot use super outside of an instance method' unless method?.isMethod\r\n\r\n  astNode: (o) ->\r\n    @checkInInstanceMethod o\r\n\r\n    if @accessor?\r\n      return (\r\n        new Value(\r\n          new Super().withLocationDataFrom (@superLiteral ? @)\r\n          [@accessor]\r\n        ).withLocationDataFrom @\r\n      ).ast o\r\n\r\n    super o\r\n\r\n#### RegexWithInterpolations\r\n\r\n# Regexes with interpolations are in fact just a variation of a `Call` (a\r\n# `RegExp()` call to be precise) with a `StringWithInterpolations` inside.\r\nexports.RegexWithInterpolations = class RegexWithInterpolations extends Base\r\n  constructor: (@call, {@heregexCommentTokens = []} = {}) ->\r\n    super()\r\n\r\n  children: ['call']\r\n\r\n  compileNode: (o) ->\r\n    @call.compileNode o\r\n\r\n  astType: -> 'InterpolatedRegExpLiteral'\r\n\r\n  astProperties: (o) ->\r\n    interpolatedPattern: @call.args[0].ast o\r\n    flags: @call.args[1]?.unwrap().originalValue ? ''\r\n    comments:\r\n      for heregexCommentToken in @heregexCommentTokens\r\n        if heregexCommentToken.here\r\n          new HereComment(heregexCommentToken).ast o\r\n        else\r\n          new LineComment(heregexCommentToken).ast o\r\n\r\n#### TaggedTemplateCall\r\n\r\nexports.TaggedTemplateCall = class TaggedTemplateCall extends Call\r\n  constructor: (variable, arg, soak) ->\r\n    arg = StringWithInterpolations.fromStringLiteral arg if arg instanceof StringLiteral\r\n    super variable, [ arg ], soak\r\n\r\n  compileNode: (o) ->\r\n    @variable.compileToFragments(o, LEVEL_ACCESS).concat @args[0].compileToFragments(o, LEVEL_LIST)\r\n\r\n  astType: -> 'TaggedTemplateExpression'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      tag: @variable.ast o, LEVEL_ACCESS\r\n      quasi: @args[0].ast o, LEVEL_LIST\r\n\r\n#### Extends\r\n\r\n# Node to extend an object's prototype with an ancestor object.\r\n# After `goog.inherits` from the\r\n# [Closure Library](https://github.com/google/closure-library/blob/master/closure/goog/base.js).\r\nexports.Extends = class Extends extends Base\r\n  constructor: (@child, @parent) ->\r\n    super()\r\n\r\n  children: ['child', 'parent']\r\n\r\n  # Hooks one constructor into another's prototype chain.\r\n  compileToFragments: (o) ->\r\n    new Call(new Value(new Literal utility 'extend', o), [@child, @parent]).compileToFragments o\r\n\r\n#### Access\r\n\r\n# A `.` access into a property of a value, or the `::` shorthand for\r\n# an access into the object's prototype.\r\nexports.Access = class Access extends Base\r\n  constructor: (@name, {@soak, @shorthand} = {}) ->\r\n    super()\r\n\r\n  children: ['name']\r\n\r\n  compileToFragments: (o) ->\r\n    name = @name.compileToFragments o\r\n    node = @name.unwrap()\r\n    if node instanceof PropertyName\r\n      [@makeCode('.'), name...]\r\n    else\r\n      [@makeCode('['), name..., @makeCode(']')]\r\n\r\n  shouldCache: NO\r\n\r\n  astNode: (o) ->\r\n    # Babel doesn’t have an AST node for `Access`, but rather just includes\r\n    # this Access node’s child `name` Identifier node as the `property` of\r\n    # the `MemberExpression` node.\r\n    @name.ast o\r\n\r\n#### Index\r\n\r\n# A `[ ... ]` indexed access into an array or object.\r\nexports.Index = class Index extends Base\r\n  constructor: (@index) ->\r\n    super()\r\n\r\n  children: ['index']\r\n\r\n  compileToFragments: (o) ->\r\n    [].concat @makeCode(\"[\"), @index.compileToFragments(o, LEVEL_PAREN), @makeCode(\"]\")\r\n\r\n  shouldCache: ->\r\n    @index.shouldCache()\r\n\r\n  astNode: (o) ->\r\n    # Babel doesn’t have an AST node for `Index`, but rather just includes\r\n    # this Index node’s child `index` Identifier node as the `property` of\r\n    # the `MemberExpression` node. The fact that the `MemberExpression`’s\r\n    # `property` is an Index means that `computed` is `true` for the\r\n    # `MemberExpression`.\r\n    @index.ast o\r\n\r\n#### Range\r\n\r\n# A range literal. Ranges can be used to extract portions (slices) of arrays,\r\n# to specify a range for comprehensions, or as a value, to be expanded into the\r\n# corresponding array of integers at runtime.\r\nexports.Range = class Range extends Base\r\n\r\n  children: ['from', 'to']\r\n\r\n  constructor: (@from, @to, tag) ->\r\n    super()\r\n\r\n    @exclusive = tag is 'exclusive'\r\n    @equals = if @exclusive then '' else '='\r\n\r\n  # Compiles the range's source variables -- where it starts and where it ends.\r\n  # But only if they need to be cached to avoid double evaluation.\r\n  compileVariables: (o) ->\r\n    o = merge o, top: true\r\n    shouldCache = del o, 'shouldCache'\r\n    [@fromC, @fromVar] = @cacheToCodeFragments @from.cache o, LEVEL_LIST, shouldCache\r\n    [@toC, @toVar]     = @cacheToCodeFragments @to.cache o, LEVEL_LIST, shouldCache\r\n    [@step, @stepVar]  = @cacheToCodeFragments step.cache o, LEVEL_LIST, shouldCache if step = del o, 'step'\r\n    @fromNum = if @from.isNumber() then parseNumber @fromVar else null\r\n    @toNum   = if @to.isNumber()   then parseNumber @toVar   else null\r\n    @stepNum = if step?.isNumber() then parseNumber @stepVar else null\r\n\r\n  # When compiled normally, the range returns the contents of the *for loop*\r\n  # needed to iterate over the values in the range. Used by comprehensions.\r\n  compileNode: (o) ->\r\n    @compileVariables o unless @fromVar\r\n    return @compileArray(o) unless o.index\r\n\r\n    # Set up endpoints.\r\n    known    = @fromNum? and @toNum?\r\n    idx      = del o, 'index'\r\n    idxName  = del o, 'name'\r\n    namedIndex = idxName and idxName isnt idx\r\n    varPart  =\r\n      if known and not namedIndex\r\n        \"var #{idx} = #{@fromC}\"\r\n      else\r\n        \"#{idx} = #{@fromC}\"\r\n    varPart += \", #{@toC}\" if @toC isnt @toVar\r\n    varPart += \", #{@step}\" if @step isnt @stepVar\r\n    [lt, gt] = [\"#{idx} <#{@equals}\", \"#{idx} >#{@equals}\"]\r\n\r\n    # Generate the condition.\r\n    [from, to] = [@fromNum, @toNum]\r\n    # Always check if the `step` isn't zero to avoid the infinite loop.\r\n    stepNotZero = \"#{ @stepNum ? @stepVar } !== 0\"\r\n    stepCond = \"#{ @stepNum ? @stepVar } > 0\"\r\n    lowerBound = \"#{lt} #{ if known then to else @toVar }\"\r\n    upperBound = \"#{gt} #{ if known then to else @toVar }\"\r\n    condPart =\r\n      if @step?\r\n        if @stepNum? and @stepNum isnt 0\r\n          if @stepNum > 0 then \"#{lowerBound}\" else \"#{upperBound}\"\r\n        else\r\n          \"#{stepNotZero} && (#{stepCond} ? #{lowerBound} : #{upperBound})\"\r\n      else\r\n        if known\r\n          \"#{ if from <= to then lt else gt } #{to}\"\r\n        else\r\n          \"(#{@fromVar} <= #{@toVar} ? #{lowerBound} : #{upperBound})\"\r\n\r\n    cond = if @stepVar then \"#{@stepVar} > 0\" else \"#{@fromVar} <= #{@toVar}\"\r\n\r\n    # Generate the step.\r\n    stepPart = if @stepVar\r\n      \"#{idx} += #{@stepVar}\"\r\n    else if known\r\n      if namedIndex\r\n        if from <= to then \"++#{idx}\" else \"--#{idx}\"\r\n      else\r\n        if from <= to then \"#{idx}++\" else \"#{idx}--\"\r\n    else\r\n      if namedIndex\r\n        \"#{cond} ? ++#{idx} : --#{idx}\"\r\n      else\r\n        \"#{cond} ? #{idx}++ : #{idx}--\"\r\n\r\n    varPart  = \"#{idxName} = #{varPart}\" if namedIndex\r\n    stepPart = \"#{idxName} = #{stepPart}\" if namedIndex\r\n\r\n    # The final loop body.\r\n    [@makeCode \"#{varPart}; #{condPart}; #{stepPart}\"]\r\n\r\n\r\n  # When used as a value, expand the range into the equivalent array.\r\n  compileArray: (o) ->\r\n    known = @fromNum? and @toNum?\r\n    if known and Math.abs(@fromNum - @toNum) <= 20\r\n      range = [@fromNum..@toNum]\r\n      range.pop() if @exclusive\r\n      return [@makeCode \"[#{ range.join(', ') }]\"]\r\n    idt    = @tab + TAB\r\n    i      = o.scope.freeVariable 'i', single: true, reserve: no\r\n    result = o.scope.freeVariable 'results', reserve: no\r\n    pre    = \"\\n#{idt}var #{result} = [];\"\r\n    if known\r\n      o.index = i\r\n      body    = fragmentsToText @compileNode o\r\n    else\r\n      vars    = \"#{i} = #{@fromC}\" + if @toC isnt @toVar then \", #{@toC}\" else ''\r\n      cond    = \"#{@fromVar} <= #{@toVar}\"\r\n      body    = \"var #{vars}; #{cond} ? #{i} <#{@equals} #{@toVar} : #{i} >#{@equals} #{@toVar}; #{cond} ? #{i}++ : #{i}--\"\r\n    post   = \"{ #{result}.push(#{i}); }\\n#{idt}return #{result};\\n#{o.indent}\"\r\n    hasArgs = (node) -> node?.contains isLiteralArguments\r\n    args   = ', arguments' if hasArgs(@from) or hasArgs(@to)\r\n    [@makeCode \"(function() {#{pre}\\n#{idt}for (#{body})#{post}}).apply(this#{args ? ''})\"]\r\n\r\n  astProperties: (o) ->\r\n    return {\r\n      from: @from?.ast(o) ? null\r\n      to: @to?.ast(o) ? null\r\n      @exclusive\r\n    }\r\n\r\n#### Slice\r\n\r\n# An array slice literal. Unlike JavaScript’s `Array#slice`, the second parameter\r\n# specifies the index of the end of the slice, just as the first parameter\r\n# is the index of the beginning.\r\nexports.Slice = class Slice extends Base\r\n\r\n  children: ['range']\r\n\r\n  constructor: (@range) ->\r\n    super()\r\n\r\n  # We have to be careful when trying to slice through the end of the array,\r\n  # `9e9` is used because not all implementations respect `undefined` or `1/0`.\r\n  # `9e9` should be safe because `9e9` > `2**32`, the max array length.\r\n  compileNode: (o) ->\r\n    {to, from} = @range\r\n    # Handle an expression in the property access, e.g. `a[!b in c..]`.\r\n    if from?.shouldCache()\r\n      from = new Value new Parens from\r\n    if to?.shouldCache()\r\n      to = new Value new Parens to\r\n    fromCompiled = from?.compileToFragments(o, LEVEL_PAREN) or [@makeCode '0']\r\n    if to\r\n      compiled     = to.compileToFragments o, LEVEL_PAREN\r\n      compiledText = fragmentsToText compiled\r\n      if not (not @range.exclusive and +compiledText is -1)\r\n        toStr = ', ' + if @range.exclusive\r\n          compiledText\r\n        else if to.isNumber()\r\n          \"#{+compiledText + 1}\"\r\n        else\r\n          compiled = to.compileToFragments o, LEVEL_ACCESS\r\n          \"+#{fragmentsToText compiled} + 1 || 9e9\"\r\n    [@makeCode \".slice(#{ fragmentsToText fromCompiled }#{ toStr or '' })\"]\r\n\r\n  astNode: (o) ->\r\n    @range.ast o\r\n\r\n#### Obj\r\n\r\n# An object literal, nothing fancy.\r\nexports.Obj = class Obj extends Base\r\n  constructor: (props, @generated = no) ->\r\n    super()\r\n\r\n    @objects = @properties = props or []\r\n\r\n  children: ['properties']\r\n\r\n  isAssignable: (opts) ->\r\n    for prop in @properties\r\n      # Check for reserved words.\r\n      message = isUnassignable prop.unwrapAll().value\r\n      prop.error message if message\r\n\r\n      prop = prop.value if prop instanceof Assign and\r\n        prop.context is 'object' and\r\n        prop.value?.base not instanceof Arr\r\n      return no unless prop.isAssignable opts\r\n    yes\r\n\r\n  shouldCache: ->\r\n    not @isAssignable()\r\n\r\n  # Check if object contains splat.\r\n  hasSplat: ->\r\n    return yes for prop in @properties when prop instanceof Splat\r\n    no\r\n\r\n  # Move rest property to the end of the list.\r\n  # `{a, rest..., b} = obj` -> `{a, b, rest...} = obj`\r\n  # `foo = ({a, rest..., b}) ->` -> `foo = {a, b, rest...}) ->`\r\n  reorderProperties: ->\r\n    props = @properties\r\n    splatProps = @getAndCheckSplatProps()\r\n    splatProp = props.splice splatProps[0], 1\r\n    @objects = @properties = [].concat props, splatProp\r\n\r\n  compileNode: (o) ->\r\n    @reorderProperties() if @hasSplat() and @lhs\r\n    props = @properties\r\n    if @generated\r\n      for node in props when node instanceof Value\r\n        node.error 'cannot have an implicit value in an implicit object'\r\n\r\n    idt      = o.indent += TAB\r\n    lastNode = @lastNode @properties\r\n\r\n    # If this object is the left-hand side of an assignment, all its children\r\n    # are too.\r\n    @propagateLhs()\r\n\r\n    isCompact = yes\r\n    for prop in @properties\r\n      if prop instanceof Assign and prop.context is 'object'\r\n        isCompact = no\r\n\r\n    answer = []\r\n    answer.push @makeCode if isCompact then '' else '\\n'\r\n    for prop, i in props\r\n      join = if i is props.length - 1\r\n        ''\r\n      else if isCompact\r\n        ', '\r\n      else if prop is lastNode\r\n        '\\n'\r\n      else\r\n        ',\\n'\r\n      indent = if isCompact then '' else idt\r\n\r\n      key = if prop instanceof Assign and prop.context is 'object'\r\n        prop.variable\r\n      else if prop instanceof Assign\r\n        prop.operatorToken.error \"unexpected #{prop.operatorToken.value}\" unless @lhs\r\n        prop.variable\r\n      else\r\n        prop\r\n      if key instanceof Value and key.hasProperties()\r\n        key.error 'invalid object key' if prop.context is 'object' or not key.this\r\n        key  = key.properties[0].name\r\n        prop = new Assign key, prop, 'object'\r\n      if key is prop\r\n        if prop.shouldCache()\r\n          [key, value] = prop.base.cache o\r\n          key  = new PropertyName key.value if key instanceof IdentifierLiteral\r\n          prop = new Assign key, value, 'object'\r\n        else if key instanceof Value and key.base instanceof ComputedPropertyName\r\n          # `{ [foo()] }` output as `{ [ref = foo()]: ref }`.\r\n          if prop.base.value.shouldCache()\r\n            [key, value] = prop.base.value.cache o\r\n            key  = new ComputedPropertyName key.value if key instanceof IdentifierLiteral\r\n            prop = new Assign key, value, 'object'\r\n          else\r\n            # `{ [expression] }` output as `{ [expression]: expression }`.\r\n            prop = new Assign key, prop.base.value, 'object'\r\n        else if not prop.bareLiteral?(IdentifierLiteral) and prop not instanceof Splat\r\n          prop = new Assign prop, prop, 'object'\r\n      if indent then answer.push @makeCode indent\r\n      answer.push prop.compileToFragments(o, LEVEL_TOP)...\r\n      if join then answer.push @makeCode join\r\n    answer.push @makeCode if isCompact then '' else \"\\n#{@tab}\"\r\n    answer = @wrapInBraces answer\r\n    if @front then @wrapInParentheses answer else answer\r\n\r\n  getAndCheckSplatProps: ->\r\n    return unless @hasSplat() and @lhs\r\n    props = @properties\r\n    splatProps = (i for prop, i in props when prop instanceof Splat)\r\n    props[splatProps[1]].error \"multiple spread elements are disallowed\" if splatProps?.length > 1\r\n    splatProps\r\n\r\n  assigns: (name) ->\r\n    for prop in @properties when prop.assigns name then return yes\r\n    no\r\n\r\n  eachName: (iterator) ->\r\n    for prop in @properties\r\n      prop = prop.value if prop instanceof Assign and prop.context is 'object'\r\n      prop = prop.unwrapAll()\r\n      prop.eachName iterator if prop.eachName?\r\n\r\n  # Convert “bare” properties to `ObjectProperty`s (or `Splat`s).\r\n  expandProperty: (property) ->\r\n    {variable, context, operatorToken} = property\r\n    key = if property instanceof Assign and context is 'object'\r\n      variable\r\n    else if property instanceof Assign\r\n      operatorToken.error \"unexpected #{operatorToken.value}\" unless @lhs\r\n      variable\r\n    else\r\n      property\r\n    if key instanceof Value and key.hasProperties()\r\n      key.error 'invalid object key' unless context isnt 'object' and key.this\r\n      if property instanceof Assign\r\n        return new ObjectProperty fromAssign: property\r\n      else\r\n        return new ObjectProperty key: property\r\n    return new ObjectProperty(fromAssign: property) unless key is property\r\n    return property if property instanceof Splat\r\n\r\n    new ObjectProperty key: property\r\n\r\n  expandProperties: ->\r\n    @expandProperty(property) for property in @properties\r\n\r\n  propagateLhs: (setLhs) ->\r\n    @lhs = yes if setLhs\r\n    return unless @lhs\r\n\r\n    for property in @properties\r\n      if property instanceof Assign and property.context is 'object'\r\n        {value} = property\r\n        unwrappedValue = value.unwrapAll()\r\n        if unwrappedValue instanceof Arr or unwrappedValue instanceof Obj\r\n          unwrappedValue.propagateLhs yes\r\n        else if unwrappedValue instanceof Assign\r\n          unwrappedValue.nestedLhs = yes\r\n      else if property instanceof Assign\r\n        # Shorthand property with default, e.g. `{a = 1} = b`.\r\n        property.nestedLhs = yes\r\n      else if property instanceof Splat\r\n        property.propagateLhs yes\r\n\r\n  astNode: (o) ->\r\n    @getAndCheckSplatProps()\r\n    super o\r\n\r\n  astType: ->\r\n    if @lhs\r\n      'ObjectPattern'\r\n    else\r\n      'ObjectExpression'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      implicit: !!@generated\r\n      properties:\r\n        property.ast(o) for property in @expandProperties()\r\n\r\nexports.ObjectProperty = class ObjectProperty extends Base\r\n  constructor: ({key, fromAssign}) ->\r\n    super()\r\n    if fromAssign\r\n      {variable: @key, value, context} = fromAssign\r\n      if context is 'object'\r\n        # All non-shorthand properties (i.e. includes `:`).\r\n        @value = value\r\n      else\r\n        # Left-hand-side shorthand with default e.g. `{a = 1} = b`.\r\n        @value = fromAssign\r\n        @shorthand = yes\r\n      @locationData = fromAssign.locationData\r\n    else\r\n      # Shorthand without default e.g. `{a}` or `{@a}` or `{[a]}`.\r\n      @key = key\r\n      @shorthand = yes\r\n      @locationData = key.locationData\r\n\r\n  astProperties: (o) ->\r\n    isComputedPropertyName = (@key instanceof Value and @key.base instanceof ComputedPropertyName) or @key.unwrap() instanceof StringWithInterpolations\r\n    keyAst = @key.ast o, LEVEL_LIST\r\n\r\n    return\r\n      key:\r\n        if keyAst?.declaration\r\n          Object.assign {}, keyAst, declaration: no\r\n        else\r\n          keyAst\r\n      value: @value?.ast(o, LEVEL_LIST) ? keyAst\r\n      shorthand: !!@shorthand\r\n      computed: !!isComputedPropertyName\r\n      method: no\r\n\r\n#### Arr\r\n\r\n# An array literal.\r\nexports.Arr = class Arr extends Base\r\n  constructor: (objs, @lhs = no) ->\r\n    super()\r\n    @objects = objs or []\r\n    @propagateLhs()\r\n\r\n  children: ['objects']\r\n\r\n  hasElision: ->\r\n    return yes for obj in @objects when obj instanceof Elision\r\n    no\r\n\r\n  isAssignable: (opts) ->\r\n    {allowExpansion, allowNontrailingSplat, allowEmptyArray = no} = opts ? {}\r\n    return allowEmptyArray unless @objects.length\r\n\r\n    for obj, i in @objects\r\n      return no if not allowNontrailingSplat and obj instanceof Splat and i + 1 isnt @objects.length\r\n      return no unless (allowExpansion and obj instanceof Expansion) or (obj.isAssignable(opts) and (not obj.isAtomic or obj.isAtomic()))\r\n    yes\r\n\r\n  shouldCache: ->\r\n    not @isAssignable()\r\n\r\n  compileNode: (o) ->\r\n    return [@makeCode '[]'] unless @objects.length\r\n    o.indent += TAB\r\n    fragmentIsElision = ([ fragment ]) ->\r\n      fragment.type is 'Elision' and fragment.code.trim() is ','\r\n    # Detect if `Elision`s at the beginning of the array are processed (e.g. [, , , a]).\r\n    passedElision = no\r\n\r\n    answer = []\r\n    for obj, objIndex in @objects\r\n      unwrappedObj = obj.unwrapAll()\r\n      # Let `compileCommentFragments` know to intersperse block comments\r\n      # into the fragments created when compiling this array.\r\n      if unwrappedObj.comments and\r\n         unwrappedObj.comments.filter((comment) -> not comment.here).length is 0\r\n        unwrappedObj.includeCommentFragments = YES\r\n\r\n    compiledObjs = (obj.compileToFragments o, LEVEL_LIST for obj in @objects)\r\n    olen = compiledObjs.length\r\n    # If `compiledObjs` includes newlines, we will output this as a multiline\r\n    # array (i.e. with a newline and indentation after the `[`). If an element\r\n    # contains line comments, that should also trigger multiline output since\r\n    # by definition line comments will introduce newlines into our output.\r\n    # The exception is if only the first element has line comments; in that\r\n    # case, output as the compact form if we otherwise would have, so that the\r\n    # first element’s line comments get output before or after the array.\r\n    includesLineCommentsOnNonFirstElement = no\r\n    for fragments, index in compiledObjs\r\n      for fragment in fragments\r\n        if fragment.isHereComment\r\n          fragment.code = fragment.code.trim()\r\n        else if index isnt 0 and includesLineCommentsOnNonFirstElement is no and hasLineComments fragment\r\n          includesLineCommentsOnNonFirstElement = yes\r\n      # Add ', ' if all `Elisions` from the beginning of the array are processed (e.g. [, , , a]) and\r\n      # element isn't `Elision` or last element is `Elision` (e.g. [a,,b,,])\r\n      if index isnt 0 and passedElision and (not fragmentIsElision(fragments) or index is olen - 1)\r\n        answer.push @makeCode ', '\r\n      passedElision = passedElision or not fragmentIsElision fragments\r\n      answer.push fragments...\r\n    if includesLineCommentsOnNonFirstElement or '\\n' in fragmentsToText(answer)\r\n      for fragment, fragmentIndex in answer\r\n        if fragment.isHereComment\r\n          fragment.code = \"#{multident(fragment.code, o.indent, no)}\\n#{o.indent}\"\r\n        else if fragment.code is ', ' and not fragment?.isElision and fragment.type not in ['StringLiteral', 'StringWithInterpolations']\r\n          fragment.code = \",\\n#{o.indent}\"\r\n      answer.unshift @makeCode \"[\\n#{o.indent}\"\r\n      answer.push @makeCode \"\\n#{@tab}]\"\r\n    else\r\n      for fragment in answer when fragment.isHereComment\r\n        fragment.code = \"#{fragment.code} \"\r\n      answer.unshift @makeCode '['\r\n      answer.push @makeCode ']'\r\n    answer\r\n\r\n  assigns: (name) ->\r\n    for obj in @objects when obj.assigns name then return yes\r\n    no\r\n\r\n  eachName: (iterator) ->\r\n    for obj in @objects\r\n      obj = obj.unwrapAll()\r\n      obj.eachName iterator\r\n\r\n  # If this array is the left-hand side of an assignment, all its children\r\n  # are too.\r\n  propagateLhs: (setLhs) ->\r\n    @lhs = yes if setLhs\r\n    return unless @lhs\r\n    for object in @objects\r\n      object.lhs = yes if object instanceof Splat or object instanceof Expansion\r\n      unwrappedObject = object.unwrapAll()\r\n      if unwrappedObject instanceof Arr or unwrappedObject instanceof Obj\r\n        unwrappedObject.propagateLhs yes\r\n      else if unwrappedObject instanceof Assign\r\n        unwrappedObject.nestedLhs = yes\r\n\r\n  astType: ->\r\n    if @lhs\r\n      'ArrayPattern'\r\n    else\r\n      'ArrayExpression'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      elements:\r\n        object.ast(o, LEVEL_LIST) for object in @objects\r\n\r\n#### Class\r\n\r\n# The CoffeeScript class definition.\r\n# Initialize a **Class** with its name, an optional superclass, and a body.\r\n\r\nexports.Class = class Class extends Base\r\n  children: ['variable', 'parent', 'body']\r\n\r\n  constructor: (@variable, @parent, @body) ->\r\n    super()\r\n    unless @body?\r\n      @body = new Block\r\n      @hasGeneratedBody = yes\r\n\r\n  compileNode: (o) ->\r\n    @name          = @determineName()\r\n    executableBody = @walkBody o\r\n\r\n    # Special handling to allow `class expr.A extends A` declarations\r\n    parentName    = @parent.base.value if @parent instanceof Value and not @parent.hasProperties()\r\n    @hasNameClash = @name? and @name is parentName\r\n\r\n    node = @\r\n\r\n    if executableBody or @hasNameClash\r\n      node = new ExecutableClassBody node, executableBody\r\n    else if not @name? and o.level is LEVEL_TOP\r\n      # Anonymous classes are only valid in expressions\r\n      node = new Parens node\r\n\r\n    if @boundMethods.length and @parent\r\n      @variable ?= new IdentifierLiteral o.scope.freeVariable '_class'\r\n      [@variable, @variableRef] = @variable.cache o unless @variableRef?\r\n\r\n    if @variable\r\n      node = new Assign @variable, node, null, { @moduleDeclaration }\r\n\r\n    @compileNode = @compileClassDeclaration\r\n    try\r\n      return node.compileToFragments o\r\n    finally\r\n      delete @compileNode\r\n\r\n  compileClassDeclaration: (o) ->\r\n    @ctor ?= @makeDefaultConstructor() if @externalCtor or @boundMethods.length\r\n    @ctor?.noReturn = true\r\n\r\n    @proxyBoundMethods() if @boundMethods.length\r\n\r\n    o.indent += TAB\r\n\r\n    result = []\r\n    result.push @makeCode \"class \"\r\n    result.push @makeCode @name if @name\r\n    @compileCommentFragments o, @variable, result if @variable?.comments?\r\n    result.push @makeCode ' ' if @name\r\n    result.push @makeCode('extends '), @parent.compileToFragments(o)..., @makeCode ' ' if @parent\r\n\r\n    result.push @makeCode '{'\r\n    unless @body.isEmpty()\r\n      @body.spaced = true\r\n      result.push @makeCode '\\n'\r\n      result.push @body.compileToFragments(o, LEVEL_TOP)...\r\n      result.push @makeCode \"\\n#{@tab}\"\r\n    result.push @makeCode '}'\r\n\r\n    result\r\n\r\n  # Figure out the appropriate name for this class\r\n  determineName: ->\r\n    return null unless @variable\r\n    [..., tail] = @variable.properties\r\n    node = if tail\r\n      tail instanceof Access and tail.name\r\n    else\r\n      @variable.base\r\n    unless node instanceof IdentifierLiteral or node instanceof PropertyName\r\n      return null\r\n    name = node.value\r\n    unless tail\r\n      message = isUnassignable name\r\n      @variable.error message if message\r\n    if name in JS_FORBIDDEN then \"_#{name}\" else name\r\n\r\n  walkBody: (o) ->\r\n    @ctor          = null\r\n    @boundMethods  = []\r\n    executableBody = null\r\n\r\n    initializer     = []\r\n    { expressions } = @body\r\n\r\n    i = 0\r\n    for expression in expressions.slice()\r\n      if expression instanceof Value and expression.isObject true\r\n        { properties } = expression.base\r\n        exprs     = []\r\n        end       = 0\r\n        start     = 0\r\n        pushSlice = -> exprs.push new Value new Obj properties[start...end], true if end > start\r\n\r\n        while assign = properties[end]\r\n          if initializerExpression = @addInitializerExpression assign, o\r\n            pushSlice()\r\n            exprs.push initializerExpression\r\n            initializer.push initializerExpression\r\n            start = end + 1\r\n          end++\r\n        pushSlice()\r\n\r\n        expressions[i..i] = exprs\r\n        i += exprs.length\r\n      else\r\n        if initializerExpression = @addInitializerExpression expression, o\r\n          initializer.push initializerExpression\r\n          expressions[i] = initializerExpression\r\n        i += 1\r\n\r\n    for method in initializer when method instanceof Code\r\n      if method.ctor\r\n        method.error 'Cannot define more than one constructor in a class' if @ctor\r\n        @ctor = method\r\n      else if method.isStatic and method.bound\r\n        method.context = @name\r\n      else if method.bound\r\n        @boundMethods.push method\r\n\r\n    return unless o.compiling\r\n    if initializer.length isnt expressions.length\r\n      @body.expressions = (expression.hoist() for expression in initializer)\r\n      new Block expressions\r\n\r\n  # Add an expression to the class initializer\r\n  #\r\n  # This is the key method for determining whether an expression in a class\r\n  # body should appear in the initializer or the executable body. If the given\r\n  # `node` is valid in a class body the method will return a (new, modified,\r\n  # or identical) node for inclusion in the class initializer, otherwise\r\n  # nothing will be returned and the node will appear in the executable body.\r\n  #\r\n  # At time of writing, only methods (instance and static) are valid in ES\r\n  # class initializers. As new ES class features (such as class fields) reach\r\n  # Stage 4, this method will need to be updated to support them. We\r\n  # additionally allow `PassthroughLiteral`s (backticked expressions) in the\r\n  # initializer as an escape hatch for ES features that are not implemented\r\n  # (e.g. getters and setters defined via the `get` and `set` keywords as\r\n  # opposed to the `Object.defineProperty` method).\r\n  addInitializerExpression: (node, o) ->\r\n    if node.unwrapAll() instanceof PassthroughLiteral\r\n      node\r\n    else if @validInitializerMethod node\r\n      @addInitializerMethod node\r\n    else if not o.compiling and @validClassProperty node\r\n      @addClassProperty node\r\n    else if not o.compiling and @validClassPrototypeProperty node\r\n      @addClassPrototypeProperty node\r\n    else\r\n      null\r\n\r\n  # Checks if the given node is a valid ES class initializer method.\r\n  validInitializerMethod: (node) ->\r\n    return no unless node instanceof Assign and node.value instanceof Code\r\n    return yes if node.context is 'object' and not node.variable.hasProperties()\r\n    return node.variable.looksStatic(@name) and (@name or not node.value.bound)\r\n\r\n  # Returns a configured class initializer method\r\n  addInitializerMethod: (assign) ->\r\n    { variable, value: method, operatorToken } = assign\r\n    method.isMethod = yes\r\n    method.isStatic = variable.looksStatic @name\r\n\r\n    if method.isStatic\r\n      method.name = variable.properties[0]\r\n    else\r\n      methodName  = variable.base\r\n      method.name = new (if methodName.shouldCache() then Index else Access) methodName\r\n      method.name.updateLocationDataIfMissing methodName.locationData\r\n      isConstructor =\r\n        if methodName instanceof StringLiteral\r\n          methodName.originalValue is 'constructor'\r\n        else\r\n          methodName.value is 'constructor'\r\n      method.ctor = (if @parent then 'derived' else 'base') if isConstructor\r\n      method.error 'Cannot define a constructor as a bound (fat arrow) function' if method.bound and method.ctor\r\n\r\n    method.operatorToken = operatorToken\r\n    method\r\n\r\n  validClassProperty: (node) ->\r\n    return no unless node instanceof Assign\r\n    return node.variable.looksStatic @name\r\n\r\n  addClassProperty: (assign) ->\r\n    {variable, value, operatorToken} = assign\r\n    {staticClassName} = variable.looksStatic @name\r\n    new ClassProperty({\r\n      name: variable.properties[0]\r\n      isStatic: yes\r\n      staticClassName\r\n      value\r\n      operatorToken\r\n    }).withLocationDataFrom assign\r\n\r\n  validClassPrototypeProperty: (node) ->\r\n    return no unless node instanceof Assign\r\n    node.context is 'object' and not node.variable.hasProperties()\r\n\r\n  addClassPrototypeProperty: (assign) ->\r\n    {variable, value} = assign\r\n    new ClassPrototypeProperty({\r\n      name: variable.base\r\n      value\r\n    }).withLocationDataFrom assign\r\n\r\n  makeDefaultConstructor: ->\r\n    ctor = @addInitializerMethod new Assign (new Value new PropertyName 'constructor'), new Code\r\n    @body.unshift ctor\r\n\r\n    if @parent\r\n      ctor.body.push new SuperCall new Super, [new Splat new IdentifierLiteral 'arguments']\r\n\r\n    if @externalCtor\r\n      applyCtor = new Value @externalCtor, [ new Access new PropertyName 'apply' ]\r\n      applyArgs = [ new ThisLiteral, new IdentifierLiteral 'arguments' ]\r\n      ctor.body.push new Call applyCtor, applyArgs\r\n      ctor.body.makeReturn()\r\n\r\n    ctor\r\n\r\n  proxyBoundMethods: ->\r\n    @ctor.thisAssignments = for method in @boundMethods\r\n      method.classVariable = @variableRef if @parent\r\n\r\n      name = new Value(new ThisLiteral, [ method.name ])\r\n      new Assign name, new Call(new Value(name, [new Access new PropertyName 'bind']), [new ThisLiteral])\r\n\r\n    null\r\n\r\n  declareName: (o) ->\r\n    return unless (name = @variable?.unwrap()) instanceof IdentifierLiteral\r\n    alreadyDeclared = o.scope.find name.value\r\n    name.isDeclaration = not alreadyDeclared\r\n\r\n  isStatementAst: -> yes\r\n\r\n  astNode: (o) ->\r\n    if jumpNode = @body.jumps()\r\n      jumpNode.error 'Class bodies cannot contain pure statements'\r\n    if argumentsNode = @body.contains isLiteralArguments\r\n      argumentsNode.error \"Class bodies shouldn't reference arguments\"\r\n    @declareName o\r\n    @name = @determineName()\r\n    @body.isClassBody = yes\r\n    @body.locationData = zeroWidthLocationDataFromEndLocation @locationData if @hasGeneratedBody\r\n    @walkBody o\r\n    sniffDirectives @body.expressions\r\n    @ctor?.noReturn = yes\r\n\r\n    super o\r\n\r\n  astType: (o) ->\r\n    if o.level is LEVEL_TOP\r\n      'ClassDeclaration'\r\n    else\r\n      'ClassExpression'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      id: @variable?.ast(o) ? null\r\n      superClass: @parent?.ast(o, LEVEL_PAREN) ? null\r\n      body: @body.ast o, LEVEL_TOP\r\n\r\nexports.ExecutableClassBody = class ExecutableClassBody extends Base\r\n  children: [ 'class', 'body' ]\r\n\r\n  defaultClassVariableName: '_Class'\r\n\r\n  constructor: (@class, @body = new Block) ->\r\n    super()\r\n\r\n  compileNode: (o) ->\r\n    if jumpNode = @body.jumps()\r\n      jumpNode.error 'Class bodies cannot contain pure statements'\r\n    if argumentsNode = @body.contains isLiteralArguments\r\n      argumentsNode.error \"Class bodies shouldn't reference arguments\"\r\n\r\n    params  = []\r\n    args    = [new ThisLiteral]\r\n    wrapper = new Code params, @body\r\n    klass   = new Parens new Call (new Value wrapper, [new Access new PropertyName 'call']), args\r\n\r\n    @body.spaced = true\r\n\r\n    o.classScope = wrapper.makeScope o.scope\r\n\r\n    @name      = @class.name ? o.classScope.freeVariable @defaultClassVariableName\r\n    ident      = new IdentifierLiteral @name\r\n    directives = @walkBody()\r\n    @setContext()\r\n\r\n    if @class.hasNameClash\r\n      parent = new IdentifierLiteral o.classScope.freeVariable 'superClass'\r\n      wrapper.params.push new Param parent\r\n      args.push @class.parent\r\n      @class.parent = parent\r\n\r\n    if @externalCtor\r\n      externalCtor = new IdentifierLiteral o.classScope.freeVariable 'ctor', reserve: no\r\n      @class.externalCtor = externalCtor\r\n      @externalCtor.variable.base = externalCtor\r\n\r\n    if @name isnt @class.name\r\n      @body.expressions.unshift new Assign (new IdentifierLiteral @name), @class\r\n    else\r\n      @body.expressions.unshift @class\r\n    @body.expressions.unshift directives...\r\n    @body.push ident\r\n\r\n    klass.compileToFragments o\r\n\r\n  # Traverse the class's children and:\r\n  # - Hoist valid ES properties into `@properties`\r\n  # - Hoist static assignments into `@properties`\r\n  # - Convert invalid ES properties into class or prototype assignments\r\n  walkBody: ->\r\n    directives  = []\r\n\r\n    index = 0\r\n    while expr = @body.expressions[index]\r\n      break unless expr instanceof Value and expr.isString()\r\n      if expr.hoisted\r\n        index++\r\n      else\r\n        directives.push @body.expressions.splice(index, 1)...\r\n\r\n    @traverseChildren false, (child) =>\r\n      return false if child instanceof Class or child instanceof HoistTarget\r\n\r\n      cont = true\r\n      if child instanceof Block\r\n        for node, i in child.expressions\r\n          if node instanceof Value and node.isObject(true)\r\n            cont = false\r\n            child.expressions[i] = @addProperties node.base.properties\r\n          else if node instanceof Assign and node.variable.looksStatic @name\r\n            node.value.isStatic = yes\r\n        child.expressions = flatten child.expressions\r\n      cont\r\n\r\n    directives\r\n\r\n  setContext: ->\r\n    @body.traverseChildren false, (node) =>\r\n      if node instanceof ThisLiteral\r\n        node.value   = @name\r\n      else if node instanceof Code and node.bound and (node.isStatic or not node.name)\r\n        node.context = @name\r\n\r\n  # Make class/prototype assignments for invalid ES properties\r\n  addProperties: (assigns) ->\r\n    result = for assign in assigns\r\n      variable = assign.variable\r\n      base     = variable?.base\r\n      value    = assign.value\r\n      delete assign.context\r\n\r\n      if base.value is 'constructor'\r\n        if value instanceof Code\r\n          base.error 'constructors must be defined at the top level of a class body'\r\n\r\n        # The class scope is not available yet, so return the assignment to update later\r\n        assign = @externalCtor = new Assign new Value, value\r\n      else if not assign.variable.this\r\n        name =\r\n          if base instanceof ComputedPropertyName\r\n            new Index base.value\r\n          else\r\n            new (if base.shouldCache() then Index else Access) base\r\n        prototype = new Access new PropertyName 'prototype'\r\n        variable  = new Value new ThisLiteral(), [ prototype, name ]\r\n\r\n        assign.variable = variable\r\n      else if assign.value instanceof Code\r\n        assign.value.isStatic = true\r\n\r\n      assign\r\n    compact result\r\n\r\nexports.ClassProperty = class ClassProperty extends Base\r\n  constructor: ({@name, @isStatic, @staticClassName, @value, @operatorToken}) ->\r\n    super()\r\n\r\n  children: ['name', 'value', 'staticClassName']\r\n\r\n  isStatement: YES\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      key: @name.ast o, LEVEL_LIST\r\n      value: @value.ast o, LEVEL_LIST\r\n      static: !!@isStatic\r\n      computed: @name instanceof Index or @name instanceof ComputedPropertyName\r\n      operator: @operatorToken?.value ? '='\r\n      staticClassName: @staticClassName?.ast(o) ? null\r\n\r\nexports.ClassPrototypeProperty = class ClassPrototypeProperty extends Base\r\n  constructor: ({@name, @value}) ->\r\n    super()\r\n\r\n  children: ['name', 'value']\r\n\r\n  isStatement: YES\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      key: @name.ast o, LEVEL_LIST\r\n      value: @value.ast o, LEVEL_LIST\r\n      computed: @name instanceof ComputedPropertyName or @name instanceof StringWithInterpolations\r\n\r\n#### Import and Export\r\n\r\nexports.ModuleDeclaration = class ModuleDeclaration extends Base\r\n  constructor: (@clause, @source, @assertions) ->\r\n    super()\r\n    @checkSource()\r\n\r\n  children: ['clause', 'source', 'assertions']\r\n\r\n  isStatement: YES\r\n  jumps:       THIS\r\n  makeReturn:  THIS\r\n\r\n  checkSource: ->\r\n    if @source? and @source instanceof StringWithInterpolations\r\n      @source.error 'the name of the module to be imported from must be an uninterpolated string'\r\n\r\n  checkScope: (o, moduleDeclarationType) ->\r\n    # TODO: would be appropriate to flag this error during AST generation (as\r\n    # well as when compiling to JS). But `o.indent` isn’t tracked during AST\r\n    # generation, and there doesn’t seem to be a current alternative way to track\r\n    # whether we’re at the “program top-level”.\r\n    if o.indent.length isnt 0\r\n      @error \"#{moduleDeclarationType} statements must be at top-level scope\"\r\n\r\n  astAssertions: (o) ->\r\n    if @assertions?.properties?\r\n      @assertions.properties.map (assertion) =>\r\n        { start, end, loc, left, right } = assertion.ast(o)\r\n        { type: 'ImportAttribute', start, end, loc, key: left, value: right }\r\n    else\r\n      []\r\n\r\nexports.ImportDeclaration = class ImportDeclaration extends ModuleDeclaration\r\n  compileNode: (o) ->\r\n    @checkScope o, 'import'\r\n    o.importedSymbols = []\r\n\r\n    code = []\r\n    code.push @makeCode \"#{@tab}import \"\r\n    code.push @clause.compileNode(o)... if @clause?\r\n\r\n    if @source?.value?\r\n      code.push @makeCode ' from ' unless @clause is null\r\n      code.push @makeCode @source.value\r\n      if @assertions?\r\n        code.push @makeCode ' assert '\r\n        code.push @assertions.compileToFragments(o)...\r\n\r\n    code.push @makeCode ';'\r\n    code\r\n\r\n  astNode: (o) ->\r\n    o.importedSymbols = []\r\n    super o\r\n\r\n  astProperties: (o) ->\r\n    ret =\r\n      specifiers: @clause?.ast(o) ? []\r\n      source: @source.ast o\r\n      assertions: @astAssertions(o)\r\n    ret.importKind = 'value' if @clause\r\n    ret\r\n\r\nexports.ImportClause = class ImportClause extends Base\r\n  constructor: (@defaultBinding, @namedImports) ->\r\n    super()\r\n\r\n  children: ['defaultBinding', 'namedImports']\r\n\r\n  compileNode: (o) ->\r\n    code = []\r\n\r\n    if @defaultBinding?\r\n      code.push @defaultBinding.compileNode(o)...\r\n      code.push @makeCode ', ' if @namedImports?\r\n\r\n    if @namedImports?\r\n      code.push @namedImports.compileNode(o)...\r\n\r\n    code\r\n\r\n  astNode: (o) ->\r\n    # The AST for `ImportClause` is the non-nested list of import specifiers\r\n    # that will be the `specifiers` property of an `ImportDeclaration` AST\r\n    compact flatten [\r\n      @defaultBinding?.ast o\r\n      @namedImports?.ast o\r\n    ]\r\n\r\nexports.ExportDeclaration = class ExportDeclaration extends ModuleDeclaration\r\n  compileNode: (o) ->\r\n    @checkScope o, 'export'\r\n    @checkForAnonymousClassExport()\r\n\r\n    code = []\r\n    code.push @makeCode \"#{@tab}export \"\r\n    code.push @makeCode 'default ' if @ instanceof ExportDefaultDeclaration\r\n\r\n    if @ not instanceof ExportDefaultDeclaration and\r\n       (@clause instanceof Assign or @clause instanceof Class)\r\n      code.push @makeCode 'var '\r\n      @clause.moduleDeclaration = 'export'\r\n\r\n    if @clause.body? and @clause.body instanceof Block\r\n      code = code.concat @clause.compileToFragments o, LEVEL_TOP\r\n    else\r\n      code = code.concat @clause.compileNode o\r\n\r\n    if @source?.value?\r\n      code.push @makeCode \" from #{@source.value}\"\r\n      if @assertions?\r\n        code.push @makeCode ' assert '\r\n        code.push @assertions.compileToFragments(o)...\r\n\r\n    code.push @makeCode ';'\r\n    code\r\n\r\n  # Prevent exporting an anonymous class; all exported members must be named\r\n  checkForAnonymousClassExport: ->\r\n    if @ not instanceof ExportDefaultDeclaration and @clause instanceof Class and not @clause.variable\r\n      @clause.error 'anonymous classes cannot be exported'\r\n\r\n  astNode: (o) ->\r\n    @checkForAnonymousClassExport()\r\n    super o\r\n\r\nexports.ExportNamedDeclaration = class ExportNamedDeclaration extends ExportDeclaration\r\n  astProperties: (o) ->\r\n    ret =\r\n      source: @source?.ast(o) ? null\r\n      assertions: @astAssertions(o)\r\n      exportKind: 'value'\r\n    clauseAst = @clause.ast o\r\n    if @clause instanceof ExportSpecifierList\r\n      ret.specifiers = clauseAst\r\n      ret.declaration = null\r\n    else\r\n      ret.specifiers = []\r\n      ret.declaration = clauseAst\r\n    ret\r\n\r\nexports.ExportDefaultDeclaration = class ExportDefaultDeclaration extends ExportDeclaration\r\n  astProperties: (o) ->\r\n    return\r\n      declaration: @clause.ast o\r\n      assertions: @astAssertions(o)\r\n\r\nexports.ExportAllDeclaration = class ExportAllDeclaration extends ExportDeclaration\r\n  astProperties: (o) ->\r\n    return\r\n      source: @source.ast o\r\n      assertions: @astAssertions(o)\r\n      exportKind: 'value'\r\n\r\nexports.ModuleSpecifierList = class ModuleSpecifierList extends Base\r\n  constructor: (@specifiers) ->\r\n    super()\r\n\r\n  children: ['specifiers']\r\n\r\n  compileNode: (o) ->\r\n    code = []\r\n    o.indent += TAB\r\n    compiledList = (specifier.compileToFragments o, LEVEL_LIST for specifier in @specifiers)\r\n\r\n    if @specifiers.length isnt 0\r\n      code.push @makeCode \"{\\n#{o.indent}\"\r\n      for fragments, index in compiledList\r\n        code.push @makeCode(\",\\n#{o.indent}\") if index\r\n        code.push fragments...\r\n      code.push @makeCode \"\\n}\"\r\n    else\r\n      code.push @makeCode '{}'\r\n    code\r\n\r\n  astNode: (o) ->\r\n    specifier.ast(o) for specifier in @specifiers\r\n\r\nexports.ImportSpecifierList = class ImportSpecifierList extends ModuleSpecifierList\r\n\r\nexports.ExportSpecifierList = class ExportSpecifierList extends ModuleSpecifierList\r\n\r\nexports.ModuleSpecifier = class ModuleSpecifier extends Base\r\n  constructor: (@original, @alias, @moduleDeclarationType) ->\r\n    super()\r\n\r\n    if @original.comments or @alias?.comments\r\n      @comments = []\r\n      @comments.push @original.comments... if @original.comments\r\n      @comments.push @alias.comments...    if @alias?.comments\r\n\r\n    # The name of the variable entering the local scope\r\n    @identifier = if @alias? then @alias.value else @original.value\r\n\r\n  children: ['original', 'alias']\r\n\r\n  compileNode: (o) ->\r\n    @addIdentifierToScope o\r\n    code = []\r\n    code.push @makeCode @original.value\r\n    code.push @makeCode \" as #{@alias.value}\" if @alias?\r\n    code\r\n\r\n  addIdentifierToScope: (o) ->\r\n    o.scope.find @identifier, @moduleDeclarationType\r\n\r\n  astNode: (o) ->\r\n    @addIdentifierToScope o\r\n    super o\r\n\r\nexports.ImportSpecifier = class ImportSpecifier extends ModuleSpecifier\r\n  constructor: (imported, local) ->\r\n    super imported, local, 'import'\r\n\r\n  addIdentifierToScope: (o) ->\r\n    # Per the spec, symbols can’t be imported multiple times\r\n    # (e.g. `import { foo, foo } from 'lib'` is invalid)\r\n    if @identifier in o.importedSymbols or o.scope.check(@identifier)\r\n      @error \"'#{@identifier}' has already been declared\"\r\n    else\r\n      o.importedSymbols.push @identifier\r\n    super o\r\n\r\n  astProperties: (o) ->\r\n    originalAst = @original.ast o\r\n    return\r\n      imported: originalAst\r\n      local: @alias?.ast(o) ? originalAst\r\n      importKind: null\r\n\r\nexports.ImportDefaultSpecifier = class ImportDefaultSpecifier extends ImportSpecifier\r\n  astProperties: (o) ->\r\n    return\r\n      local: @original.ast o\r\n\r\nexports.ImportNamespaceSpecifier = class ImportNamespaceSpecifier extends ImportSpecifier\r\n  astProperties: (o) ->\r\n    return\r\n      local: @alias.ast o\r\n\r\nexports.ExportSpecifier = class ExportSpecifier extends ModuleSpecifier\r\n  constructor: (local, exported) ->\r\n    super local, exported, 'export'\r\n\r\n  astProperties: (o) ->\r\n    originalAst = @original.ast o\r\n    return\r\n      local: originalAst\r\n      exported: @alias?.ast(o) ? originalAst\r\n\r\nexports.DynamicImport = class DynamicImport extends Base\r\n  compileNode: ->\r\n    [@makeCode 'import']\r\n\r\n  astType: -> 'Import'\r\n\r\nexports.DynamicImportCall = class DynamicImportCall extends Call\r\n  compileNode: (o) ->\r\n    @checkArguments()\r\n    super o\r\n\r\n  checkArguments: ->\r\n    unless 1 <= @args.length <= 2\r\n      @error 'import() accepts either one or two arguments'\r\n\r\n  astNode: (o) ->\r\n    @checkArguments()\r\n    super o\r\n\r\n#### Assign\r\n\r\n# The **Assign** is used to assign a local variable to value, or to set the\r\n# property of an object -- including within object literals.\r\nexports.Assign = class Assign extends Base\r\n  constructor: (@variable, @value, @context, options = {}) ->\r\n    super()\r\n    {@param, @subpattern, @operatorToken, @moduleDeclaration, @originalContext = @context} = options\r\n    @propagateLhs()\r\n\r\n  children: ['variable', 'value']\r\n\r\n  isAssignable: YES\r\n\r\n  isStatement: (o) ->\r\n    o?.level is LEVEL_TOP and @context? and (@moduleDeclaration or \"?\" in @context)\r\n\r\n  checkNameAssignability: (o, varBase) ->\r\n    if o.scope.type(varBase.value) is 'import'\r\n      varBase.error \"'#{varBase.value}' is read-only\"\r\n\r\n  assigns: (name) ->\r\n    @[if @context is 'object' then 'value' else 'variable'].assigns name\r\n\r\n  unfoldSoak: (o) ->\r\n    unfoldSoak o, this, 'variable'\r\n\r\n  addScopeVariables: (o, {\r\n    # During AST generation, we need to allow assignment to these constructs\r\n    # that are considered “unassignable” during compile-to-JS, while still\r\n    # flagging things like `[null] = b`.\r\n    allowAssignmentToExpansion = no,\r\n    allowAssignmentToNontrailingSplat = no,\r\n    allowAssignmentToEmptyArray = no,\r\n    allowAssignmentToComplexSplat = no\r\n  } = {}) ->\r\n    return unless not @context or @context is '**='\r\n\r\n    varBase = @variable.unwrapAll()\r\n    if not varBase.isAssignable {\r\n      allowExpansion: allowAssignmentToExpansion\r\n      allowNontrailingSplat: allowAssignmentToNontrailingSplat\r\n      allowEmptyArray: allowAssignmentToEmptyArray\r\n      allowComplexSplat: allowAssignmentToComplexSplat\r\n    }\r\n      @variable.error \"'#{@variable.compile o}' can't be assigned\"\r\n\r\n    varBase.eachName (name) =>\r\n      return if name.hasProperties?()\r\n\r\n      message = isUnassignable name.value\r\n      name.error message if message\r\n\r\n      # `moduleDeclaration` can be `'import'` or `'export'`.\r\n      @checkNameAssignability o, name\r\n      if @moduleDeclaration\r\n        o.scope.add name.value, @moduleDeclaration\r\n        name.isDeclaration = yes\r\n      else if @param\r\n        o.scope.add name.value,\r\n          if @param is 'alwaysDeclare'\r\n            'var'\r\n          else\r\n            'param'\r\n      else\r\n        alreadyDeclared = o.scope.find name.value\r\n        name.isDeclaration ?= not alreadyDeclared\r\n        # If this assignment identifier has one or more herecomments\r\n        # attached, output them as part of the declarations line (unless\r\n        # other herecomments are already staged there) for compatibility\r\n        # with Flow typing. Don’t do this if this assignment is for a\r\n        # class, e.g. `ClassName = class ClassName {`, as Flow requires\r\n        # the comment to be between the class name and the `{`.\r\n        if name.comments and not o.scope.comments[name.value] and\r\n           @value not instanceof Class and\r\n           name.comments.every((comment) -> comment.here and not comment.multiline)\r\n          commentsNode = new IdentifierLiteral name.value\r\n          commentsNode.comments = name.comments\r\n          commentFragments = []\r\n          @compileCommentFragments o, commentsNode, commentFragments\r\n          o.scope.comments[name.value] = commentFragments\r\n\r\n  # Compile an assignment, delegating to `compileDestructuring` or\r\n  # `compileSplice` if appropriate. Keep track of the name of the base object\r\n  # we've been assigned to, for correct internal references. If the variable\r\n  # has not been seen yet within the current scope, declare it.\r\n  compileNode: (o) ->\r\n    isValue = @variable instanceof Value\r\n    if isValue\r\n      # If `@variable` is an array or an object, we’re destructuring;\r\n      # if it’s also `isAssignable()`, the destructuring syntax is supported\r\n      # in ES and we can output it as is; otherwise we `@compileDestructuring`\r\n      # and convert this ES-unsupported destructuring into acceptable output.\r\n      if @variable.isArray() or @variable.isObject()\r\n        unless @variable.isAssignable()\r\n          if @variable.isObject() and @variable.base.hasSplat()\r\n            return @compileObjectDestruct o\r\n          else\r\n            return @compileDestructuring o\r\n\r\n      return @compileSplice       o if @variable.isSplice()\r\n      return @compileConditional  o if @isConditional()\r\n      return @compileSpecialMath  o if @context in ['//=', '%%=']\r\n\r\n    @addScopeVariables o\r\n    if @value instanceof Code\r\n      if @value.isStatic\r\n        @value.name = @variable.properties[0]\r\n      else if @variable.properties?.length >= 2\r\n        [properties..., prototype, name] = @variable.properties\r\n        @value.name = name if prototype.name?.value is 'prototype'\r\n\r\n    val = @value.compileToFragments o, LEVEL_LIST\r\n    compiledName = @variable.compileToFragments o, LEVEL_LIST\r\n\r\n    if @context is 'object'\r\n      if @variable.shouldCache()\r\n        compiledName.unshift @makeCode '['\r\n        compiledName.push @makeCode ']'\r\n      return compiledName.concat @makeCode(': '), val\r\n\r\n    answer = compiledName.concat @makeCode(\" #{ @context or '=' } \"), val\r\n    # Per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Assignment_without_declaration,\r\n    # if we’re destructuring without declaring, the destructuring assignment must be wrapped in parentheses.\r\n    # The assignment is wrapped in parentheses if 'o.level' has lower precedence than LEVEL_LIST (3)\r\n    # (i.e. LEVEL_COND (4), LEVEL_OP (5) or LEVEL_ACCESS (6)), or if we're destructuring object, e.g. {a,b} = obj.\r\n    if o.level > LEVEL_LIST or isValue and @variable.base instanceof Obj and not @nestedLhs and not (@param is yes)\r\n      @wrapInParentheses answer\r\n    else\r\n      answer\r\n\r\n  # Object rest property is not assignable: `{{a}...}`\r\n  compileObjectDestruct: (o) ->\r\n    @variable.base.reorderProperties()\r\n    {properties: props} = @variable.base\r\n    [..., splat] = props\r\n    splatProp = splat.name\r\n    assigns = []\r\n    refVal = new Value new IdentifierLiteral o.scope.freeVariable 'ref'\r\n    props.splice -1, 1, new Splat refVal\r\n    assigns.push new Assign(new Value(new Obj props), @value).compileToFragments o, LEVEL_LIST\r\n    assigns.push new Assign(new Value(splatProp), refVal).compileToFragments o, LEVEL_LIST\r\n    @joinFragmentArrays assigns, ', '\r\n\r\n  # Brief implementation of recursive pattern matching, when assigning array or\r\n  # object literals to a value. Peeks at their properties to assign inner names.\r\n  compileDestructuring: (o) ->\r\n    top       = o.level is LEVEL_TOP\r\n    {value}   = this\r\n    {objects} = @variable.base\r\n    olen      = objects.length\r\n\r\n    # Special-case for `{} = a` and `[] = a` (empty patterns).\r\n    # Compile to simply `a`.\r\n    if olen is 0\r\n      code = value.compileToFragments o\r\n      return if o.level >= LEVEL_OP then @wrapInParentheses code else code\r\n    [obj] = objects\r\n\r\n    @disallowLoneExpansion()\r\n    {splats, expans, splatsAndExpans} = @getAndCheckSplatsAndExpansions()\r\n\r\n    isSplat = splats?.length > 0\r\n    isExpans = expans?.length > 0\r\n\r\n    vvar     = value.compileToFragments o, LEVEL_LIST\r\n    vvarText = fragmentsToText vvar\r\n    assigns  = []\r\n    pushAssign = (variable, val) =>\r\n      assigns.push new Assign(variable, val, null, param: @param, subpattern: yes).compileToFragments o, LEVEL_LIST\r\n\r\n    if isSplat\r\n      splatVar = objects[splats[0]].name.unwrap()\r\n      if splatVar instanceof Arr or splatVar instanceof Obj\r\n        splatVarRef = new IdentifierLiteral o.scope.freeVariable 'ref'\r\n        objects[splats[0]].name = splatVarRef\r\n        splatVarAssign = -> pushAssign new Value(splatVar), splatVarRef\r\n\r\n    # At this point, there are several things to destructure. So the `fn()` in\r\n    # `{a, b} = fn()` must be cached, for example. Make vvar into a simple\r\n    # variable if it isn’t already.\r\n    if value.unwrap() not instanceof IdentifierLiteral or @variable.assigns(vvarText)\r\n      ref = o.scope.freeVariable 'ref'\r\n      assigns.push [@makeCode(ref + ' = '), vvar...]\r\n      vvar = [@makeCode ref]\r\n      vvarText = ref\r\n\r\n    slicer = (type) -> (vvar, start, end = no) ->\r\n      vvar = new IdentifierLiteral vvar unless vvar instanceof Value\r\n      args = [vvar, new NumberLiteral(start)]\r\n      args.push new NumberLiteral end if end\r\n      slice = new Value (new IdentifierLiteral utility type, o), [new Access new PropertyName 'call']\r\n      new Value new Call slice, args\r\n\r\n    # Helper which outputs `[].slice` code.\r\n    compSlice = slicer \"slice\"\r\n\r\n    # Helper which outputs `[].splice` code.\r\n    compSplice = slicer \"splice\"\r\n\r\n    # Check if `objects` array contains any instance of `Assign`, e.g. {a:1}.\r\n    hasObjAssigns = (objs) ->\r\n      (i for obj, i in objs when obj instanceof Assign and obj.context is 'object')\r\n\r\n    # Check if `objects` array contains any unassignable object.\r\n    objIsUnassignable = (objs) ->\r\n      return yes for obj in objs when not obj.isAssignable()\r\n      no\r\n\r\n    # `objects` are complex when there is object assign ({a:1}),\r\n    # unassignable object, or just a single node.\r\n    complexObjects = (objs) ->\r\n      hasObjAssigns(objs).length or objIsUnassignable(objs) or olen is 1\r\n\r\n    # \"Complex\" `objects` are processed in a loop.\r\n    # Examples: [a, b, {c, r...}, d], [a, ..., {b, r...}, c, d]\r\n    loopObjects = (objs, vvar, vvarTxt) =>\r\n      for obj, i in objs\r\n        # `Elision` can be skipped.\r\n        continue if obj instanceof Elision\r\n        # If `obj` is {a: 1}\r\n        if obj instanceof Assign and obj.context is 'object'\r\n          {variable: {base: idx}, value: vvar} = obj\r\n          {variable: vvar} = vvar if vvar instanceof Assign\r\n          idx =\r\n            if vvar.this\r\n              vvar.properties[0].name\r\n            else\r\n              new PropertyName vvar.unwrap().value\r\n          acc = idx.unwrap() instanceof PropertyName\r\n          vval = new Value value, [new (if acc then Access else Index) idx]\r\n        else\r\n          # `obj` is [a...], {a...} or a\r\n          vvar = switch\r\n            when obj instanceof Splat then new Value obj.name\r\n            else obj\r\n          vval = switch\r\n            when obj instanceof Splat then compSlice(vvarTxt, i)\r\n            else new Value new Literal(vvarTxt), [new Index new NumberLiteral i]\r\n        message = isUnassignable vvar.unwrap().value\r\n        vvar.error message if message\r\n        pushAssign vvar, vval\r\n\r\n    # \"Simple\" `objects` can be split and compiled to arrays, [a, b, c] = arr, [a, b, c...] = arr\r\n    assignObjects = (objs, vvar, vvarTxt) =>\r\n      vvar = new Value new Arr(objs, yes)\r\n      vval = if vvarTxt instanceof Value then vvarTxt else new Value new Literal(vvarTxt)\r\n      pushAssign vvar, vval\r\n\r\n    processObjects = (objs, vvar, vvarTxt) ->\r\n      if complexObjects objs\r\n        loopObjects objs, vvar, vvarTxt\r\n      else\r\n        assignObjects objs, vvar, vvarTxt\r\n\r\n    # In case there is `Splat` or `Expansion` in `objects`,\r\n    # we can split array in two simple subarrays.\r\n    # `Splat` [a, b, c..., d, e] can be split into  [a, b, c...] and [d, e].\r\n    # `Expansion` [a, b, ..., c, d] can be split into [a, b] and [c, d].\r\n    # Examples:\r\n    # a) `Splat`\r\n    #   CS: [a, b, c..., d, e] = arr\r\n    #   JS: [a, b, ...c] = arr, [d, e] = splice.call(c, -2)\r\n    # b) `Expansion`\r\n    #   CS: [a, b, ..., d, e] = arr\r\n    #   JS: [a, b] = arr, [d, e] = slice.call(arr, -2)\r\n    if splatsAndExpans.length\r\n      expIdx = splatsAndExpans[0]\r\n      leftObjs = objects.slice 0, expIdx + (if isSplat then 1 else 0)\r\n      rightObjs = objects.slice expIdx + 1\r\n      processObjects leftObjs, vvar, vvarText if leftObjs.length isnt 0\r\n      if rightObjs.length isnt 0\r\n        # Slice or splice `objects`.\r\n        refExp = switch\r\n          when isSplat then compSplice new Value(objects[expIdx].name), rightObjs.length * -1\r\n          when isExpans then compSlice vvarText, rightObjs.length * -1\r\n        if complexObjects rightObjs\r\n          restVar = refExp\r\n          refExp = o.scope.freeVariable 'ref'\r\n          assigns.push [@makeCode(refExp + ' = '), restVar.compileToFragments(o, LEVEL_LIST)...]\r\n        processObjects rightObjs, vvar, refExp\r\n    else\r\n      # There is no `Splat` or `Expansion` in `objects`.\r\n      processObjects objects, vvar, vvarText\r\n    splatVarAssign?()\r\n    assigns.push vvar unless top or @subpattern\r\n    fragments = @joinFragmentArrays assigns, ', '\r\n    if o.level < LEVEL_LIST then fragments else @wrapInParentheses fragments\r\n\r\n  # Disallow `[...] = a` for some reason. (Could be equivalent to `[] = a`?)\r\n  disallowLoneExpansion: ->\r\n    return unless @variable.base instanceof Arr\r\n    {objects} = @variable.base\r\n    return unless objects?.length is 1\r\n    [loneObject] = objects\r\n    if loneObject instanceof Expansion\r\n      loneObject.error 'Destructuring assignment has no target'\r\n\r\n  # Show error if there is more than one `Splat`, or `Expansion`.\r\n  # Examples: [a, b, c..., d, e, f...], [a, b, ..., c, d, ...], [a, b, ..., c, d, e...]\r\n  getAndCheckSplatsAndExpansions: ->\r\n    return {splats: [], expans: [], splatsAndExpans: []} unless @variable.base instanceof Arr\r\n    {objects} = @variable.base\r\n\r\n    # Count all `Splats`: [a, b, c..., d, e]\r\n    splats = (i for obj, i in objects when obj instanceof Splat)\r\n    # Count all `Expansions`: [a, b, ..., c, d]\r\n    expans = (i for obj, i in objects when obj instanceof Expansion)\r\n    # Combine splats and expansions.\r\n    splatsAndExpans = [splats..., expans...]\r\n    if splatsAndExpans.length > 1\r\n      # Sort 'splatsAndExpans' so we can show error at first disallowed token.\r\n      objects[splatsAndExpans.sort()[1]].error \"multiple splats/expansions are disallowed in an assignment\"\r\n    {splats, expans, splatsAndExpans}\r\n\r\n  # When compiling a conditional assignment, take care to ensure that the\r\n  # operands are only evaluated once, even though we have to reference them\r\n  # more than once.\r\n  compileConditional: (o) ->\r\n    [left, right] = @variable.cacheReference o\r\n    # Disallow conditional assignment of undefined variables.\r\n    if not left.properties.length and left.base instanceof Literal and\r\n           left.base not instanceof ThisLiteral and not o.scope.check left.base.value\r\n      @throwUnassignableConditionalError left.base.value\r\n    if \"?\" in @context\r\n      o.isExistentialEquals = true\r\n      new If(new Existence(left), right, type: 'if').addElse(new Assign(right, @value, '=')).compileToFragments o\r\n    else\r\n      fragments = new Op(@context[...-1], left, new Assign(right, @value, '=')).compileToFragments o\r\n      if o.level <= LEVEL_LIST then fragments else @wrapInParentheses fragments\r\n\r\n  # Convert special math assignment operators like `a //= b` to the equivalent\r\n  # extended form `a = a ** b` and then compiles that.\r\n  compileSpecialMath: (o) ->\r\n    [left, right] = @variable.cacheReference o\r\n    new Assign(left, new Op(@context[...-1], right, @value)).compileToFragments o\r\n\r\n  # Compile the assignment from an array splice literal, using JavaScript's\r\n  # `Array#splice` method.\r\n  compileSplice: (o) ->\r\n    {range: {from, to, exclusive}} = @variable.properties.pop()\r\n    unwrappedVar = @variable.unwrapAll()\r\n    if unwrappedVar.comments\r\n      moveComments unwrappedVar, @\r\n      delete @variable.comments\r\n    name = @variable.compile o\r\n    if from\r\n      [fromDecl, fromRef] = @cacheToCodeFragments from.cache o, LEVEL_OP\r\n    else\r\n      fromDecl = fromRef = '0'\r\n    if to\r\n      if from?.isNumber() and to.isNumber()\r\n        to = to.compile(o) - fromRef\r\n        to += 1 unless exclusive\r\n      else\r\n        to = to.compile(o, LEVEL_ACCESS) + ' - ' + fromRef\r\n        to += ' + 1' unless exclusive\r\n    else\r\n      to = \"9e9\"\r\n    [valDef, valRef] = @value.cache o, LEVEL_LIST\r\n    answer = [].concat @makeCode(\"#{utility 'splice', o}.apply(#{name}, [#{fromDecl}, #{to}].concat(\"), valDef, @makeCode(\")), \"), valRef\r\n    if o.level > LEVEL_TOP then @wrapInParentheses answer else answer\r\n\r\n  eachName: (iterator) ->\r\n    @variable.unwrapAll().eachName iterator\r\n\r\n  isDefaultAssignment: -> @param or @nestedLhs\r\n\r\n  propagateLhs: ->\r\n    return unless @variable?.isArray?() or @variable?.isObject?()\r\n    # This is the left-hand side of an assignment; let `Arr` and `Obj`\r\n    # know that, so that those nodes know that they’re assignable as\r\n    # destructured variables.\r\n    @variable.base.propagateLhs yes\r\n\r\n  throwUnassignableConditionalError: (name) ->\r\n    @variable.error \"the variable \\\"#{name}\\\" can't be assigned with #{@context} because it has not been declared before\"\r\n\r\n  isConditional: ->\r\n    @context in ['||=', '&&=', '?=']\r\n\r\n  isStatementAst: NO\r\n\r\n  astNode: (o) ->\r\n    @disallowLoneExpansion()\r\n    @getAndCheckSplatsAndExpansions()\r\n    if @isConditional()\r\n      variable = @variable.unwrap()\r\n      if variable instanceof IdentifierLiteral and not o.scope.check variable.value\r\n        @throwUnassignableConditionalError variable.value\r\n    @addScopeVariables o, allowAssignmentToExpansion: yes, allowAssignmentToNontrailingSplat: yes, allowAssignmentToEmptyArray: yes, allowAssignmentToComplexSplat: yes\r\n    super o\r\n\r\n  astType: ->\r\n    if @isDefaultAssignment()\r\n      'AssignmentPattern'\r\n    else\r\n      'AssignmentExpression'\r\n\r\n  astProperties: (o) ->\r\n    ret =\r\n      right: @value.ast o, LEVEL_LIST\r\n      left: @variable.ast o, LEVEL_LIST\r\n\r\n    unless @isDefaultAssignment()\r\n      ret.operator = @originalContext ? '='\r\n\r\n    ret\r\n\r\n#### FuncGlyph\r\n\r\nexports.FuncGlyph = class FuncGlyph extends Base\r\n  constructor: (@glyph) ->\r\n    super()\r\n\r\n#### Code\r\n\r\n# A function definition. This is the only node that creates a new Scope.\r\n# When for the purposes of walking the contents of a function body, the Code\r\n# has no *children* -- they're within the inner scope.\r\nexports.Code = class Code extends Base\r\n  constructor: (params, body, @funcGlyph, @paramStart) ->\r\n    super()\r\n\r\n    @params      = params or []\r\n    @body        = body or new Block\r\n    @bound       = @funcGlyph?.glyph is '=>'\r\n    @isGenerator = no\r\n    @isAsync     = no\r\n    @isMethod    = no\r\n\r\n    @body.traverseChildren no, (node) =>\r\n      if (node instanceof Op and node.isYield()) or node instanceof YieldReturn\r\n        @isGenerator = yes\r\n      if (node instanceof Op and node.isAwait()) or node instanceof AwaitReturn\r\n        @isAsync = yes\r\n      if node instanceof For and node.isAwait()\r\n        @isAsync = yes\r\n\r\n    @propagateLhs()\r\n\r\n  children: ['params', 'body']\r\n\r\n  isStatement: -> @isMethod\r\n\r\n  jumps: NO\r\n\r\n  makeScope: (parentScope) -> new Scope parentScope, @body, this\r\n\r\n  # Compilation creates a new scope unless explicitly asked to share with the\r\n  # outer scope. Handles splat parameters in the parameter list by setting\r\n  # such parameters to be the final parameter in the function definition, as\r\n  # required per the ES2015 spec. If the CoffeeScript function definition had\r\n  # parameters after the splat, they are declared via expressions in the\r\n  # function body.\r\n  compileNode: (o) ->\r\n    @checkForAsyncOrGeneratorConstructor()\r\n\r\n    if @bound\r\n      @context = o.scope.method.context if o.scope.method?.bound\r\n      @context = 'this' unless @context\r\n\r\n    @updateOptions o\r\n    params           = []\r\n    exprs            = []\r\n    thisAssignments  = @thisAssignments?.slice() ? []\r\n    paramsAfterSplat = []\r\n    haveSplatParam   = no\r\n    haveBodyParam    = no\r\n\r\n    @checkForDuplicateParams()\r\n    @disallowLoneExpansionAndMultipleSplats()\r\n\r\n    # Separate `this` assignments.\r\n    @eachParamName (name, node, param, obj) ->\r\n      if node.this\r\n        name   = node.properties[0].name.value\r\n        name   = \"_#{name}\" if name in JS_FORBIDDEN\r\n        target = new IdentifierLiteral o.scope.freeVariable name, reserve: no\r\n        # `Param` is object destructuring with a default value: ({@prop = 1}) ->\r\n        # In a case when the variable name is already reserved, we have to assign\r\n        # a new variable name to the destructured variable: ({prop:prop1 = 1}) ->\r\n        replacement =\r\n            if param.name instanceof Obj and obj instanceof Assign and\r\n                obj.operatorToken.value is '='\r\n              new Assign (new IdentifierLiteral name), target, 'object' #, operatorToken: new Literal ':'\r\n            else\r\n              target\r\n        param.renameParam node, replacement\r\n        thisAssignments.push new Assign node, target\r\n\r\n    # Parse the parameters, adding them to the list of parameters to put in the\r\n    # function definition; and dealing with splats or expansions, including\r\n    # adding expressions to the function body to declare all parameter\r\n    # variables that would have been after the splat/expansion parameter.\r\n    # If we encounter a parameter that needs to be declared in the function\r\n    # body for any reason, for example it’s destructured with `this`, also\r\n    # declare and assign all subsequent parameters in the function body so that\r\n    # any non-idempotent parameters are evaluated in the correct order.\r\n    for param, i in @params\r\n      # Was `...` used with this parameter? Splat/expansion parameters cannot\r\n      # have default values, so we need not worry about that.\r\n      if param.splat or param instanceof Expansion\r\n        haveSplatParam = yes\r\n        if param.splat\r\n          if param.name instanceof Arr or param.name instanceof Obj\r\n            # Splat arrays are treated oddly by ES; deal with them the legacy\r\n            # way in the function body. TODO: Should this be handled in the\r\n            # function parameter list, and if so, how?\r\n            splatParamName = o.scope.freeVariable 'arg'\r\n            params.push ref = new Value new IdentifierLiteral splatParamName\r\n            exprs.push new Assign new Value(param.name), ref\r\n          else\r\n            params.push ref = param.asReference o\r\n            splatParamName = fragmentsToText ref.compileNodeWithoutComments o\r\n          if param.shouldCache()\r\n            exprs.push new Assign new Value(param.name), ref\r\n        else # `param` is an Expansion\r\n          splatParamName = o.scope.freeVariable 'args'\r\n          params.push new Value new IdentifierLiteral splatParamName\r\n\r\n        o.scope.parameter splatParamName\r\n\r\n      # Parse all other parameters; if a splat paramater has not yet been\r\n      # encountered, add these other parameters to the list to be output in\r\n      # the function definition.\r\n      else\r\n        if param.shouldCache() or haveBodyParam\r\n          param.assignedInBody = yes\r\n          haveBodyParam = yes\r\n          # This parameter cannot be declared or assigned in the parameter\r\n          # list. So put a reference in the parameter list and add a statement\r\n          # to the function body assigning it, e.g.\r\n          # `(arg) => { var a = arg.a; }`, with a default value if it has one.\r\n          if param.value?\r\n            condition = new Op '===', param, new UndefinedLiteral\r\n            ifTrue = new Assign new Value(param.name), param.value\r\n            exprs.push new If condition, ifTrue\r\n          else\r\n            exprs.push new Assign new Value(param.name), param.asReference(o), null, param: 'alwaysDeclare'\r\n\r\n        # If this parameter comes before the splat or expansion, it will go\r\n        # in the function definition parameter list.\r\n        unless haveSplatParam\r\n          # If this parameter has a default value, and it hasn’t already been\r\n          # set by the `shouldCache()` block above, define it as a statement in\r\n          # the function body. This parameter comes after the splat parameter,\r\n          # so we can’t define its default value in the parameter list.\r\n          if param.shouldCache()\r\n            ref = param.asReference o\r\n          else\r\n            if param.value? and not param.assignedInBody\r\n              ref = new Assign new Value(param.name), param.value, null, param: yes\r\n            else\r\n              ref = param\r\n          # Add this parameter’s reference(s) to the function scope.\r\n          if param.name instanceof Arr or param.name instanceof Obj\r\n            # This parameter is destructured.\r\n            param.name.lhs = yes\r\n            unless param.shouldCache()\r\n              param.name.eachName (prop) ->\r\n                o.scope.parameter prop.value\r\n          else\r\n            # This compilation of the parameter is only to get its name to add\r\n            # to the scope name tracking; since the compilation output here\r\n            # isn’t kept for eventual output, don’t include comments in this\r\n            # compilation, so that they get output the “real” time this param\r\n            # is compiled.\r\n            paramToAddToScope = if param.value? then param else ref\r\n            o.scope.parameter fragmentsToText paramToAddToScope.compileToFragmentsWithoutComments o\r\n          params.push ref\r\n        else\r\n          paramsAfterSplat.push param\r\n          # If this parameter had a default value, since it’s no longer in the\r\n          # function parameter list we need to assign its default value\r\n          # (if necessary) as an expression in the body.\r\n          if param.value? and not param.shouldCache()\r\n            condition = new Op '===', param, new UndefinedLiteral\r\n            ifTrue = new Assign new Value(param.name), param.value\r\n            exprs.push new If condition, ifTrue\r\n          # Add this parameter to the scope, since it wouldn’t have been added\r\n          # yet since it was skipped earlier.\r\n          o.scope.add param.name.value, 'var', yes if param.name?.value?\r\n\r\n    # If there were parameters after the splat or expansion parameter, those\r\n    # parameters need to be assigned in the body of the function.\r\n    if paramsAfterSplat.length isnt 0\r\n      # Create a destructured assignment, e.g. `[a, b, c] = [args..., b, c]`\r\n      exprs.unshift new Assign new Value(\r\n          new Arr [new Splat(new IdentifierLiteral(splatParamName)), (param.asReference o for param in paramsAfterSplat)...]\r\n        ), new Value new IdentifierLiteral splatParamName\r\n\r\n    # Add new expressions to the function body\r\n    wasEmpty = @body.isEmpty()\r\n    @disallowSuperInParamDefaults()\r\n    @checkSuperCallsInConstructorBody()\r\n    @body.expressions.unshift thisAssignments... unless @expandCtorSuper thisAssignments\r\n    @body.expressions.unshift exprs...\r\n    if @isMethod and @bound and not @isStatic and @classVariable\r\n      boundMethodCheck = new Value new Literal utility 'boundMethodCheck', o\r\n      @body.expressions.unshift new Call(boundMethodCheck, [new Value(new ThisLiteral), @classVariable])\r\n    @body.makeReturn() unless wasEmpty or @noReturn\r\n\r\n    # JavaScript doesn’t allow bound (`=>`) functions to also be generators.\r\n    # This is usually caught via `Op::compileContinuation`, but double-check:\r\n    if @bound and @isGenerator\r\n      yieldNode = @body.contains (node) -> node instanceof Op and node.operator is 'yield'\r\n      (yieldNode or @).error 'yield cannot occur inside bound (fat arrow) functions'\r\n\r\n    # Assemble the output\r\n    modifiers = []\r\n    modifiers.push 'static' if @isMethod and @isStatic\r\n    modifiers.push 'async'  if @isAsync\r\n    unless @isMethod or @bound\r\n      modifiers.push \"function#{if @isGenerator then '*' else ''}\"\r\n    else if @isGenerator\r\n      modifiers.push '*'\r\n\r\n    signature = [@makeCode '(']\r\n    # Block comments between a function name and `(` get output between\r\n    # `function` and `(`.\r\n    if @paramStart?.comments?\r\n      @compileCommentFragments o, @paramStart, signature\r\n    for param, i in params\r\n      signature.push @makeCode ', ' if i isnt 0\r\n      signature.push @makeCode '...' if haveSplatParam and i is params.length - 1\r\n      # Compile this parameter, but if any generated variables get created\r\n      # (e.g. `ref`), shift those into the parent scope since we can’t put a\r\n      # `var` line inside a function parameter list.\r\n      scopeVariablesCount = o.scope.variables.length\r\n      signature.push param.compileToFragments(o, LEVEL_PAREN)...\r\n      if scopeVariablesCount isnt o.scope.variables.length\r\n        generatedVariables = o.scope.variables.splice scopeVariablesCount\r\n        o.scope.parent.variables.push generatedVariables...\r\n    signature.push @makeCode ')'\r\n    # Block comments between `)` and `->`/`=>` get output between `)` and `{`.\r\n    if @funcGlyph?.comments?\r\n      comment.unshift = no for comment in @funcGlyph.comments\r\n      @compileCommentFragments o, @funcGlyph, signature\r\n\r\n    body = @body.compileWithDeclarations o unless @body.isEmpty()\r\n\r\n    # We need to compile the body before method names to ensure `super`\r\n    # references are handled.\r\n    if @isMethod\r\n      [methodScope, o.scope] = [o.scope, o.scope.parent]\r\n      name = @name.compileToFragments o\r\n      name.shift() if name[0].code is '.'\r\n      o.scope = methodScope\r\n\r\n    answer = @joinFragmentArrays (@makeCode m for m in modifiers), ' '\r\n    answer.push @makeCode ' ' if modifiers.length and name\r\n    answer.push name... if name\r\n    answer.push signature...\r\n    answer.push @makeCode ' =>' if @bound and not @isMethod\r\n    answer.push @makeCode ' {'\r\n    answer.push @makeCode('\\n'), body..., @makeCode(\"\\n#{@tab}\") if body?.length\r\n    answer.push @makeCode '}'\r\n\r\n    return indentInitial answer, @ if @isMethod\r\n    if @front or (o.level >= LEVEL_ACCESS) then @wrapInParentheses answer else answer\r\n\r\n  updateOptions: (o) ->\r\n    o.scope         = del(o, 'classScope') or @makeScope o.scope\r\n    o.scope.shared  = del(o, 'sharedScope')\r\n    o.indent        += TAB\r\n    delete o.bare\r\n    delete o.isExistentialEquals\r\n\r\n  checkForDuplicateParams: ->\r\n    paramNames = []\r\n    @eachParamName (name, node, param) ->\r\n      node.error \"multiple parameters named '#{name}'\" if name in paramNames\r\n      paramNames.push name\r\n\r\n  eachParamName: (iterator) ->\r\n    param.eachName iterator for param in @params\r\n\r\n  # Short-circuit `traverseChildren` method to prevent it from crossing scope\r\n  # boundaries unless `crossScope` is `true`.\r\n  traverseChildren: (crossScope, func) ->\r\n    super(crossScope, func) if crossScope\r\n\r\n  # Short-circuit `replaceInContext` method to prevent it from crossing context boundaries. Bound\r\n  # functions have the same context.\r\n  replaceInContext: (child, replacement) ->\r\n    if @bound\r\n      super child, replacement\r\n    else\r\n      false\r\n\r\n  disallowSuperInParamDefaults: ({forAst} = {}) ->\r\n    return false unless @ctor\r\n\r\n    @eachSuperCall Block.wrap(@params), (superCall) ->\r\n      superCall.error \"'super' is not allowed in constructor parameter defaults\"\r\n    , checkForThisBeforeSuper: not forAst\r\n\r\n  checkSuperCallsInConstructorBody: ->\r\n    return false unless @ctor\r\n\r\n    seenSuper = @eachSuperCall @body, (superCall) =>\r\n      superCall.error \"'super' is only allowed in derived class constructors\" if @ctor is 'base'\r\n\r\n    seenSuper\r\n\r\n  flagThisParamInDerivedClassConstructorWithoutCallingSuper: (param) ->\r\n    param.error \"Can't use @params in derived class constructors without calling super\"\r\n\r\n  checkForAsyncOrGeneratorConstructor: ->\r\n    if @ctor\r\n      @name.error 'Class constructor may not be async'       if @isAsync\r\n      @name.error 'Class constructor may not be a generator' if @isGenerator\r\n\r\n  disallowLoneExpansionAndMultipleSplats: ->\r\n    seenSplatParam = no\r\n    for param in @params\r\n      # Was `...` used with this parameter? (Only one such parameter is allowed\r\n      # per function.)\r\n      if param.splat or param instanceof Expansion\r\n        if seenSplatParam\r\n          param.error 'only one splat or expansion parameter is allowed per function definition'\r\n        else if param instanceof Expansion and @params.length is 1\r\n          param.error 'an expansion parameter cannot be the only parameter in a function definition'\r\n        seenSplatParam = yes\r\n\r\n  expandCtorSuper: (thisAssignments) ->\r\n    return false unless @ctor\r\n\r\n    seenSuper = @eachSuperCall @body, (superCall) =>\r\n      superCall.expressions = thisAssignments\r\n\r\n    haveThisParam = thisAssignments.length and thisAssignments.length isnt @thisAssignments?.length\r\n    if @ctor is 'derived' and not seenSuper and haveThisParam\r\n      param = thisAssignments[0].variable\r\n      @flagThisParamInDerivedClassConstructorWithoutCallingSuper param\r\n\r\n    seenSuper\r\n\r\n  # Find all super calls in the given context node;\r\n  # returns `true` if `iterator` is called.\r\n  eachSuperCall: (context, iterator, {checkForThisBeforeSuper = yes} = {}) ->\r\n    seenSuper = no\r\n\r\n    context.traverseChildren yes, (child) =>\r\n      if child instanceof SuperCall\r\n        # `super` in a constructor (the only `super` without an accessor)\r\n        # cannot be given an argument with a reference to `this`, as that would\r\n        # be referencing `this` before calling `super`.\r\n        unless child.variable.accessor\r\n          childArgs = child.args.filter (arg) ->\r\n            arg not instanceof Class and (arg not instanceof Code or arg.bound)\r\n          Block.wrap(childArgs).traverseChildren yes, (node) =>\r\n            node.error \"Can't call super with @params in derived class constructors\" if node.this\r\n        seenSuper = yes\r\n        iterator child\r\n      else if checkForThisBeforeSuper and child instanceof ThisLiteral and @ctor is 'derived' and not seenSuper\r\n        child.error \"Can't reference 'this' before calling super in derived class constructors\"\r\n\r\n      # `super` has the same target in bound (arrow) functions, so check them too\r\n      child not instanceof SuperCall and (child not instanceof Code or child.bound)\r\n\r\n    seenSuper\r\n\r\n  propagateLhs: ->\r\n    for param in @params\r\n      {name} = param\r\n      if name instanceof Arr or name instanceof Obj\r\n        name.propagateLhs yes\r\n      else if param instanceof Expansion\r\n        param.lhs = yes\r\n\r\n  astAddParamsToScope: (o) ->\r\n    @eachParamName (name) ->\r\n      o.scope.add name, 'param'\r\n\r\n  astNode: (o) ->\r\n    @updateOptions o\r\n    @checkForAsyncOrGeneratorConstructor()\r\n    @checkForDuplicateParams()\r\n    @disallowSuperInParamDefaults forAst: yes\r\n    @disallowLoneExpansionAndMultipleSplats()\r\n    seenSuper = @checkSuperCallsInConstructorBody()\r\n    if @ctor is 'derived' and not seenSuper\r\n      @eachParamName (name, node) =>\r\n        if node.this\r\n          @flagThisParamInDerivedClassConstructorWithoutCallingSuper node\r\n    @astAddParamsToScope o\r\n    @body.makeReturn null, yes unless @body.isEmpty() or @noReturn\r\n\r\n    super o\r\n\r\n  astType: ->\r\n    if @isMethod\r\n      'ClassMethod'\r\n    else if @bound\r\n      'ArrowFunctionExpression'\r\n    else\r\n      'FunctionExpression'\r\n\r\n  paramForAst: (param) ->\r\n    return param if param instanceof Expansion\r\n    {name, value, splat} = param\r\n    if splat\r\n      new Splat name, lhs: yes, postfix: splat.postfix\r\n      .withLocationDataFrom param\r\n    else if value?\r\n      new Assign name, value, null, param: yes\r\n      .withLocationDataFrom locationData: mergeLocationData name.locationData, value.locationData\r\n    else\r\n      name\r\n\r\n  methodAstProperties: (o) ->\r\n    getIsComputed = =>\r\n      return yes if @name instanceof Index\r\n      return yes if @name instanceof ComputedPropertyName\r\n      return yes if @name.name instanceof ComputedPropertyName\r\n      no\r\n\r\n    return\r\n      static: !!@isStatic\r\n      key: @name.ast o\r\n      computed: getIsComputed()\r\n      kind:\r\n        if @ctor\r\n          'constructor'\r\n        else\r\n          'method'\r\n      operator: @operatorToken?.value ? '='\r\n      staticClassName: @isStatic.staticClassName?.ast(o) ? null\r\n      bound: !!@bound\r\n\r\n  astProperties: (o) ->\r\n    return Object.assign\r\n      params: @paramForAst(param).ast(o) for param in @params\r\n      body: @body.ast (Object.assign {}, o, checkForDirectives: yes), LEVEL_TOP\r\n      generator: !!@isGenerator\r\n      async: !!@isAsync\r\n      # We never generate named functions, so specify `id` as `null`, which\r\n      # matches the Babel AST for anonymous function expressions/arrow functions\r\n      id: null\r\n      hasIndentedBody: @body.locationData.first_line > @funcGlyph?.locationData.first_line\r\n    ,\r\n      if @isMethod then @methodAstProperties o else {}\r\n\r\n  astLocationData: ->\r\n    functionLocationData = super()\r\n    return functionLocationData unless @isMethod\r\n\r\n    astLocationData = mergeAstLocationData @name.astLocationData(), functionLocationData\r\n    if @isStatic.staticClassName?\r\n      astLocationData = mergeAstLocationData @isStatic.staticClassName.astLocationData(), astLocationData\r\n    astLocationData\r\n\r\n#### Param\r\n\r\n# A parameter in a function definition. Beyond a typical JavaScript parameter,\r\n# these parameters can also attach themselves to the context of the function,\r\n# as well as be a splat, gathering up a group of parameters into an array.\r\nexports.Param = class Param extends Base\r\n  constructor: (@name, @value, @splat) ->\r\n    super()\r\n\r\n    message = isUnassignable @name.unwrapAll().value\r\n    @name.error message if message\r\n    if @name instanceof Obj and @name.generated\r\n      token = @name.objects[0].operatorToken\r\n      token.error \"unexpected #{token.value}\"\r\n\r\n  children: ['name', 'value']\r\n\r\n  compileToFragments: (o) ->\r\n    @name.compileToFragments o, LEVEL_LIST\r\n\r\n  compileToFragmentsWithoutComments: (o) ->\r\n    @name.compileToFragmentsWithoutComments o, LEVEL_LIST\r\n\r\n  asReference: (o) ->\r\n    return @reference if @reference\r\n    node = @name\r\n    if node.this\r\n      name = node.properties[0].name.value\r\n      name = \"_#{name}\" if name in JS_FORBIDDEN\r\n      node = new IdentifierLiteral o.scope.freeVariable name\r\n    else if node.shouldCache()\r\n      node = new IdentifierLiteral o.scope.freeVariable 'arg'\r\n    node = new Value node\r\n    node.updateLocationDataIfMissing @locationData\r\n    @reference = node\r\n\r\n  shouldCache: ->\r\n    @name.shouldCache()\r\n\r\n  # Iterates the name or names of a `Param`.\r\n  # In a sense, a destructured parameter represents multiple JS parameters. This\r\n  # method allows to iterate them all.\r\n  # The `iterator` function will be called as `iterator(name, node)` where\r\n  # `name` is the name of the parameter and `node` is the AST node corresponding\r\n  # to that name.\r\n  eachName: (iterator, name = @name) ->\r\n    checkAssignabilityOfLiteral = (literal) ->\r\n      message = isUnassignable literal.value\r\n      if message\r\n        literal.error message\r\n      unless literal.isAssignable()\r\n        literal.error \"'#{literal.value}' can't be assigned\"\r\n\r\n    atParam = (obj, originalObj = null) => iterator \"@#{obj.properties[0].name.value}\", obj, @, originalObj\r\n    if name instanceof Call\r\n      name.error \"Function invocation can't be assigned\"\r\n\r\n    # * simple literals `foo`\r\n    if name instanceof Literal\r\n      checkAssignabilityOfLiteral name\r\n      return iterator name.value, name, @\r\n    # * at-params `@foo`\r\n    return atParam name if name instanceof Value\r\n    for obj in name.objects ? []\r\n      # Save original obj.\r\n      nObj = obj\r\n      # * destructured parameter with default value\r\n      if obj instanceof Assign and not obj.context?\r\n        obj = obj.variable\r\n      # * assignments within destructured parameters `{foo:bar}`\r\n      if obj instanceof Assign\r\n        # ... possibly with a default value\r\n        if obj.value instanceof Assign\r\n          obj = obj.value.variable\r\n        else\r\n          obj = obj.value\r\n        @eachName iterator, obj.unwrap()\r\n      # * splats within destructured parameters `[xs...]`\r\n      else if obj instanceof Splat\r\n        node = obj.name.unwrap()\r\n        iterator node.value, node, @\r\n      else if obj instanceof Value\r\n        # * destructured parameters within destructured parameters `[{a}]`\r\n        if obj.isArray() or obj.isObject()\r\n          @eachName iterator, obj.base\r\n        # * at-params within destructured parameters `{@foo}`\r\n        else if obj.this\r\n          atParam obj, nObj\r\n        # * simple destructured parameters {foo}\r\n        else\r\n          checkAssignabilityOfLiteral obj.base\r\n          iterator obj.base.value, obj.base, @\r\n      else if obj instanceof Elision\r\n        obj\r\n      else if obj not instanceof Expansion\r\n        obj.error \"illegal parameter #{obj.compile()}\"\r\n    return\r\n\r\n  # Rename a param by replacing the given AST node for a name with a new node.\r\n  # This needs to ensure that the the source for object destructuring does not change.\r\n  renameParam: (node, newNode) ->\r\n    isNode      = (candidate) -> candidate is node\r\n    replacement = (node, parent) =>\r\n      if parent instanceof Obj\r\n        key = node\r\n        key = node.properties[0].name if node.this\r\n        # No need to assign a new variable for the destructured variable if the variable isn't reserved.\r\n        # Examples:\r\n        # `({@foo}) ->`  should compile to `({foo}) { this.foo = foo}`\r\n        # `foo = 1; ({@foo}) ->` should compile to `foo = 1; ({foo:foo1}) { this.foo = foo1 }`\r\n        if node.this and key.value is newNode.value\r\n          new Value newNode\r\n        else\r\n          new Assign new Value(key), newNode, 'object'\r\n      else\r\n        newNode\r\n\r\n    @replaceInContext isNode, replacement\r\n\r\n#### Splat\r\n\r\n# A splat, either as a parameter to a function, an argument to a call,\r\n# or as part of a destructuring assignment.\r\nexports.Splat = class Splat extends Base\r\n  constructor: (name, {@lhs, @postfix = true} = {}) ->\r\n    super()\r\n    @name = if name.compile then name else new Literal name\r\n\r\n  children: ['name']\r\n\r\n  shouldCache: -> no\r\n\r\n  isAssignable: ({allowComplexSplat = no} = {})->\r\n    return allowComplexSplat if @name instanceof Obj or @name instanceof Parens\r\n    @name.isAssignable() and (not @name.isAtomic or @name.isAtomic())\r\n\r\n  assigns: (name) ->\r\n    @name.assigns name\r\n\r\n  compileNode: (o) ->\r\n    compiledSplat = [@makeCode('...'), @name.compileToFragments(o, LEVEL_OP)...]\r\n    return compiledSplat unless @jsx\r\n    return [@makeCode('{'), compiledSplat..., @makeCode('}')]\r\n\r\n  unwrap: -> @name\r\n\r\n  propagateLhs: (setLhs) ->\r\n    @lhs = yes if setLhs\r\n    return unless @lhs\r\n    @name.propagateLhs? yes\r\n\r\n  astType: ->\r\n    if @jsx\r\n      'JSXSpreadAttribute'\r\n    else if @lhs\r\n      'RestElement'\r\n    else\r\n      'SpreadElement'\r\n\r\n  astProperties: (o) -> {\r\n    argument: @name.ast o, LEVEL_OP\r\n    @postfix\r\n  }\r\n\r\n#### Expansion\r\n\r\n# Used to skip values inside an array destructuring (pattern matching) or\r\n# parameter list.\r\nexports.Expansion = class Expansion extends Base\r\n\r\n  shouldCache: NO\r\n\r\n  compileNode: (o) ->\r\n    @throwLhsError()\r\n\r\n  asReference: (o) ->\r\n    this\r\n\r\n  eachName: (iterator) ->\r\n\r\n  throwLhsError: ->\r\n    @error 'Expansion must be used inside a destructuring assignment or parameter list'\r\n\r\n  astNode: (o) ->\r\n    unless @lhs\r\n      @throwLhsError()\r\n\r\n    super o\r\n\r\n  astType: -> 'RestElement'\r\n\r\n  astProperties: ->\r\n    return\r\n      argument: null\r\n\r\n#### Elision\r\n\r\n# Array elision element (for example, [,a, , , b, , c, ,]).\r\nexports.Elision = class Elision extends Base\r\n\r\n  isAssignable: YES\r\n\r\n  shouldCache: NO\r\n\r\n  compileToFragments: (o, level) ->\r\n    fragment = super o, level\r\n    fragment.isElision = yes\r\n    fragment\r\n\r\n  compileNode: (o) ->\r\n    [@makeCode ', ']\r\n\r\n  asReference: (o) ->\r\n    this\r\n\r\n  eachName: (iterator) ->\r\n\r\n  astNode: ->\r\n    null\r\n\r\n#### While\r\n\r\n# A while loop, the only sort of low-level loop exposed by CoffeeScript. From\r\n# it, all other loops can be manufactured. Useful in cases where you need more\r\n# flexibility or more speed than a comprehension can provide.\r\nexports.While = class While extends Base\r\n  constructor: (@condition, {invert: @inverted, @guard, @isLoop} = {}) ->\r\n    super()\r\n\r\n  children: ['condition', 'guard', 'body']\r\n\r\n  isStatement: YES\r\n\r\n  makeReturn: (results, mark) ->\r\n    return super(results, mark) if results\r\n    @returns = not @jumps()\r\n    if mark\r\n      @body.makeReturn(results, mark) if @returns\r\n      return\r\n    this\r\n\r\n  addBody: (@body) ->\r\n    this\r\n\r\n  jumps: ->\r\n    {expressions} = @body\r\n    return no unless expressions.length\r\n    for node in expressions\r\n      return jumpNode if jumpNode = node.jumps loop: yes\r\n    no\r\n\r\n  # The main difference from a JavaScript *while* is that the CoffeeScript\r\n  # *while* can be used as a part of a larger expression -- while loops may\r\n  # return an array containing the computed result of each iteration.\r\n  compileNode: (o) ->\r\n    o.indent += TAB\r\n    set      = ''\r\n    {body}   = this\r\n    if body.isEmpty()\r\n      body = @makeCode ''\r\n    else\r\n      if @returns\r\n        body.makeReturn rvar = o.scope.freeVariable 'results'\r\n        set  = \"#{@tab}#{rvar} = [];\\n\"\r\n      if @guard\r\n        if body.expressions.length > 1\r\n          body.expressions.unshift new If (new Parens @guard).invert(), new StatementLiteral \"continue\"\r\n        else\r\n          body = Block.wrap [new If @guard, body] if @guard\r\n      body = [].concat @makeCode(\"\\n\"), (body.compileToFragments o, LEVEL_TOP), @makeCode(\"\\n#{@tab}\")\r\n    answer = [].concat @makeCode(set + @tab + \"while (\"), @processedCondition().compileToFragments(o, LEVEL_PAREN),\r\n      @makeCode(\") {\"), body, @makeCode(\"}\")\r\n    if @returns\r\n      answer.push @makeCode \"\\n#{@tab}return #{rvar};\"\r\n    answer\r\n\r\n  processedCondition: ->\r\n    @processedConditionCache ?= if @inverted then @condition.invert() else @condition\r\n\r\n  astType: -> 'WhileStatement'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      test: @condition.ast o, LEVEL_PAREN\r\n      body: @body.ast o, LEVEL_TOP\r\n      guard: @guard?.ast(o) ? null\r\n      inverted: !!@inverted\r\n      postfix: !!@postfix\r\n      loop: !!@isLoop\r\n\r\n#### Op\r\n\r\n# Simple Arithmetic and logical operations. Performs some conversion from\r\n# CoffeeScript operations into their JavaScript equivalents.\r\nexports.Op = class Op extends Base\r\n  constructor: (op, first, second, flip, {@invertOperator, @originalOperator = op} = {}) ->\r\n    super()\r\n\r\n    if op is 'new'\r\n      if ((firstCall = unwrapped = first.unwrap()) instanceof Call or (firstCall = unwrapped.base) instanceof Call) and not firstCall.do and not firstCall.isNew\r\n        return new Value firstCall.newInstance(), if firstCall is unwrapped then [] else unwrapped.properties\r\n      first = new Parens first unless first instanceof Parens or first.unwrap() instanceof IdentifierLiteral or first.hasProperties?()\r\n      call = new Call first, []\r\n      call.locationData = @locationData\r\n      call.isNew = yes\r\n      return call\r\n\r\n    @operator = CONVERSIONS[op] or op\r\n    @first    = first\r\n    @second   = second\r\n    @flip     = !!flip\r\n\r\n    if @operator in ['--', '++']\r\n      message = isUnassignable @first.unwrapAll().value\r\n      @first.error message if message\r\n\r\n    return this\r\n\r\n  # The map of conversions from CoffeeScript to JavaScript symbols.\r\n  CONVERSIONS =\r\n    '==':        '==='\r\n    '!=':        '!=='\r\n    'of':        'in'\r\n    'yieldfrom': 'yield*'\r\n\r\n  # The map of invertible operators.\r\n  INVERSIONS =\r\n    '!==': '==='\r\n    '===': '!=='\r\n\r\n  children: ['first', 'second']\r\n\r\n  isNumber: ->\r\n    @isUnary() and @operator in ['+', '-'] and\r\n      @first instanceof Value and @first.isNumber()\r\n\r\n  isAwait: ->\r\n    @operator is 'await'\r\n\r\n  isYield: ->\r\n    @operator in ['yield', 'yield*']\r\n\r\n  isUnary: ->\r\n    not @second\r\n\r\n  shouldCache: ->\r\n    not @isNumber()\r\n\r\n  # Am I capable of\r\n  # [Python-style comparison chaining](https://docs.python.org/3/reference/expressions.html#not-in)?\r\n  isChainable: ->\r\n    @operator in ['<', '>', '>=', '<=', '===', '!==']\r\n\r\n  isChain: ->\r\n    @isChainable() and @first.isChainable()\r\n\r\n  invert: ->\r\n    if @isInOperator()\r\n      @invertOperator = '!'\r\n      return @\r\n    if @isChain()\r\n      allInvertable = yes\r\n      curr = this\r\n      while curr and curr.operator\r\n        allInvertable and= (curr.operator of INVERSIONS)\r\n        curr = curr.first\r\n      return new Parens(this).invert() unless allInvertable\r\n      curr = this\r\n      while curr and curr.operator\r\n        curr.invert = !curr.invert\r\n        curr.operator = INVERSIONS[curr.operator]\r\n        curr = curr.first\r\n      this\r\n    else if op = INVERSIONS[@operator]\r\n      @operator = op\r\n      if @first.unwrap() instanceof Op\r\n        @first.invert()\r\n      this\r\n    else if @second\r\n      new Parens(this).invert()\r\n    else if @operator is '!' and (fst = @first.unwrap()) instanceof Op and\r\n                                  fst.operator in ['!', 'in', 'instanceof']\r\n      fst\r\n    else\r\n      new Op '!', this\r\n\r\n  unfoldSoak: (o) ->\r\n    @operator in ['++', '--', 'delete'] and unfoldSoak o, this, 'first'\r\n\r\n  generateDo: (exp) ->\r\n    passedParams = []\r\n    func = if exp instanceof Assign and (ref = exp.value.unwrap()) instanceof Code\r\n      ref\r\n    else\r\n      exp\r\n    for param in func.params or []\r\n      if param.value\r\n        passedParams.push param.value\r\n        delete param.value\r\n      else\r\n        passedParams.push param\r\n    call = new Call exp, passedParams\r\n    call.do = yes\r\n    call\r\n\r\n  isInOperator: ->\r\n    @originalOperator is 'in'\r\n\r\n  compileNode: (o) ->\r\n    if @isInOperator()\r\n      inNode = new In @first, @second\r\n      return (if @invertOperator then inNode.invert() else inNode).compileNode o\r\n    if @invertOperator\r\n      @invertOperator = null\r\n      return @invert().compileNode(o)\r\n    return Op::generateDo(@first).compileNode o if @operator is 'do'\r\n    isChain = @isChain()\r\n    # In chains, there's no need to wrap bare obj literals in parens,\r\n    # as the chained expression is wrapped.\r\n    @first.front = @front unless isChain\r\n    @checkDeleteOperand o\r\n    return @compileContinuation o if @isYield() or @isAwait()\r\n    return @compileUnary        o if @isUnary()\r\n    return @compileChain        o if isChain\r\n    switch @operator\r\n      when '?'  then @compileExistence o, @second.isDefaultValue\r\n      when '//' then @compileFloorDivision o\r\n      when '%%' then @compileModulo o\r\n      else\r\n        lhs = @first.compileToFragments o, LEVEL_OP\r\n        rhs = @second.compileToFragments o, LEVEL_OP\r\n        answer = [].concat lhs, @makeCode(\" #{@operator} \"), rhs\r\n        if o.level <= LEVEL_OP then answer else @wrapInParentheses answer\r\n\r\n  # Mimic Python's chained comparisons when multiple comparison operators are\r\n  # used sequentially. For example:\r\n  #\r\n  #     bin/coffee -e 'console.log 50 < 65 > 10'\r\n  #     true\r\n  compileChain: (o) ->\r\n    [@first.second, shared] = @first.second.cache o\r\n    fst = @first.compileToFragments o, LEVEL_OP\r\n    fragments = fst.concat @makeCode(\" #{if @invert then '&&' else '||'} \"),\r\n      (shared.compileToFragments o), @makeCode(\" #{@operator} \"), (@second.compileToFragments o, LEVEL_OP)\r\n    @wrapInParentheses fragments\r\n\r\n  # Keep reference to the left expression, unless this an existential assignment\r\n  compileExistence: (o, checkOnlyUndefined) ->\r\n    if @first.shouldCache()\r\n      ref = new IdentifierLiteral o.scope.freeVariable 'ref'\r\n      fst = new Parens new Assign ref, @first\r\n    else\r\n      fst = @first\r\n      ref = fst\r\n    new If(new Existence(fst, checkOnlyUndefined), ref, type: 'if').addElse(@second).compileToFragments o\r\n\r\n  # Compile a unary **Op**.\r\n  compileUnary: (o) ->\r\n    parts = []\r\n    op = @operator\r\n    parts.push [@makeCode op]\r\n    if op is '!' and @first instanceof Existence\r\n      @first.negated = not @first.negated\r\n      return @first.compileToFragments o\r\n    if o.level >= LEVEL_ACCESS\r\n      return (new Parens this).compileToFragments o\r\n    plusMinus = op in ['+', '-']\r\n    parts.push [@makeCode(' ')] if op in ['typeof', 'delete'] or\r\n                      plusMinus and @first instanceof Op and @first.operator is op\r\n    if plusMinus and @first instanceof Op\r\n      @first = new Parens @first\r\n    parts.push @first.compileToFragments o, LEVEL_OP\r\n    parts.reverse() if @flip\r\n    @joinFragmentArrays parts, ''\r\n\r\n  compileContinuation: (o) ->\r\n    parts = []\r\n    op = @operator\r\n    @checkContinuation o unless @isAwait()\r\n    if 'expression' in Object.keys(@first) and not (@first instanceof Throw)\r\n      parts.push @first.expression.compileToFragments o, LEVEL_OP if @first.expression?\r\n    else\r\n      parts.push [@makeCode \"(\"] if o.level >= LEVEL_PAREN\r\n      parts.push [@makeCode op]\r\n      parts.push [@makeCode \" \"] if @first.base?.value isnt ''\r\n      parts.push @first.compileToFragments o, LEVEL_OP\r\n      parts.push [@makeCode \")\"] if o.level >= LEVEL_PAREN\r\n    @joinFragmentArrays parts, ''\r\n\r\n  checkContinuation: (o) ->\r\n    unless o.scope.parent?\r\n      @error \"#{@operator} can only occur inside functions\"\r\n    if o.scope.method?.bound and o.scope.method.isGenerator\r\n      @error 'yield cannot occur inside bound (fat arrow) functions'\r\n\r\n  compileFloorDivision: (o) ->\r\n    floor = new Value new IdentifierLiteral('Math'), [new Access new PropertyName 'floor']\r\n    second = if @second.shouldCache() then new Parens @second else @second\r\n    div = new Op '/', @first, second\r\n    new Call(floor, [div]).compileToFragments o\r\n\r\n  compileModulo: (o) ->\r\n    mod = new Value new Literal utility 'modulo', o\r\n    new Call(mod, [@first, @second]).compileToFragments o\r\n\r\n  toString: (idt) ->\r\n    super idt, @constructor.name + ' ' + @operator\r\n\r\n  checkDeleteOperand: (o) ->\r\n    if @operator is 'delete' and o.scope.check(@first.unwrapAll().value)\r\n      @error 'delete operand may not be argument or var'\r\n\r\n  astNode: (o) ->\r\n    @checkContinuation o if @isYield()\r\n    @checkDeleteOperand o\r\n    super o\r\n\r\n  astType: ->\r\n    return 'AwaitExpression' if @isAwait()\r\n    return 'YieldExpression' if @isYield()\r\n    return 'ChainedComparison' if @isChain()\r\n    switch @operator\r\n      when '||', '&&', '?' then 'LogicalExpression'\r\n      when '++', '--'      then 'UpdateExpression'\r\n      else\r\n        if @isUnary()      then 'UnaryExpression'\r\n        else                    'BinaryExpression'\r\n\r\n  operatorAst: ->\r\n    \"#{if @invertOperator then \"#{@invertOperator} \" else ''}#{@originalOperator}\"\r\n\r\n  chainAstProperties: (o) ->\r\n    operators = [@operatorAst()]\r\n    operands = [@second]\r\n    currentOp = @first\r\n    loop\r\n      operators.unshift currentOp.operatorAst()\r\n      operands.unshift currentOp.second\r\n      currentOp = currentOp.first\r\n      unless currentOp.isChainable()\r\n        operands.unshift currentOp\r\n        break\r\n    return {\r\n      operators\r\n      operands: (operand.ast(o, LEVEL_OP) for operand in operands)\r\n    }\r\n\r\n  astProperties: (o) ->\r\n    return @chainAstProperties(o) if @isChain()\r\n\r\n    firstAst = @first.ast o, LEVEL_OP\r\n    secondAst = @second?.ast o, LEVEL_OP\r\n    operatorAst = @operatorAst()\r\n    switch\r\n      when @isUnary()\r\n        argument =\r\n          if @isYield() and @first.unwrap().value is ''\r\n            null\r\n          else\r\n            firstAst\r\n        return {argument} if @isAwait()\r\n        return {\r\n          argument\r\n          delegate: @operator is 'yield*'\r\n        } if @isYield()\r\n        return {\r\n          argument\r\n          operator: operatorAst\r\n          prefix: !@flip\r\n        }\r\n      else\r\n        return\r\n          left: firstAst\r\n          right: secondAst\r\n          operator: operatorAst\r\n\r\n#### In\r\nexports.In = class In extends Base\r\n  constructor: (@object, @array) ->\r\n    super()\r\n\r\n  children: ['object', 'array']\r\n\r\n  invert: NEGATE\r\n\r\n  compileNode: (o) ->\r\n    if @array instanceof Value and @array.isArray() and @array.base.objects.length\r\n      for obj in @array.base.objects when obj instanceof Splat\r\n        hasSplat = yes\r\n        break\r\n      # `compileOrTest` only if we have an array literal with no splats\r\n      return @compileOrTest o unless hasSplat\r\n    @compileLoopTest o\r\n\r\n  compileOrTest: (o) ->\r\n    [sub, ref] = @object.cache o, LEVEL_OP\r\n    [cmp, cnj] = if @negated then [' !== ', ' && '] else [' === ', ' || ']\r\n    tests = []\r\n    for item, i in @array.base.objects\r\n      if i then tests.push @makeCode cnj\r\n      tests = tests.concat (if i then ref else sub), @makeCode(cmp), item.compileToFragments(o, LEVEL_ACCESS)\r\n    if o.level < LEVEL_OP then tests else @wrapInParentheses tests\r\n\r\n  compileLoopTest: (o) ->\r\n    [sub, ref] = @object.cache o, LEVEL_LIST\r\n    fragments = [].concat @makeCode(utility('indexOf', o) + \".call(\"), @array.compileToFragments(o, LEVEL_LIST),\r\n      @makeCode(\", \"), ref, @makeCode(\") \" + if @negated then '< 0' else '>= 0')\r\n    return fragments if fragmentsToText(sub) is fragmentsToText(ref)\r\n    fragments = sub.concat @makeCode(', '), fragments\r\n    if o.level < LEVEL_LIST then fragments else @wrapInParentheses fragments\r\n\r\n  toString: (idt) ->\r\n    super idt, @constructor.name + if @negated then '!' else ''\r\n\r\n#### Try\r\n\r\n# A classic *try/catch/finally* block.\r\nexports.Try = class Try extends Base\r\n  constructor: (@attempt, @catch, @ensure, @finallyTag) ->\r\n    super()\r\n\r\n  children: ['attempt', 'catch', 'ensure']\r\n\r\n  isStatement: YES\r\n\r\n  jumps: (o) -> @attempt.jumps(o) or @catch?.jumps(o)\r\n\r\n  makeReturn: (results, mark) ->\r\n    if mark\r\n      @attempt?.makeReturn results, mark\r\n      @catch?.makeReturn results, mark\r\n      return\r\n    @attempt = @attempt.makeReturn results if @attempt\r\n    @catch   = @catch  .makeReturn results if @catch\r\n    this\r\n\r\n  # Compilation is more or less as you would expect -- the *finally* clause\r\n  # is optional, the *catch* is not.\r\n  compileNode: (o) ->\r\n    originalIndent = o.indent\r\n    o.indent  += TAB\r\n    tryPart   = @attempt.compileToFragments o, LEVEL_TOP\r\n\r\n    catchPart = if @catch\r\n      @catch.compileToFragments merge(o, indent: originalIndent), LEVEL_TOP\r\n    else unless @ensure or @catch\r\n      generatedErrorVariableName = o.scope.freeVariable 'error', reserve: no\r\n      [@makeCode(\" catch (#{generatedErrorVariableName}) {}\")]\r\n    else\r\n      []\r\n\r\n    ensurePart = if @ensure then ([].concat @makeCode(\" finally {\\n\"), @ensure.compileToFragments(o, LEVEL_TOP),\r\n      @makeCode(\"\\n#{@tab}}\")) else []\r\n\r\n    [].concat @makeCode(\"#{@tab}try {\\n\"),\r\n      tryPart,\r\n      @makeCode(\"\\n#{@tab}}\"), catchPart, ensurePart\r\n\r\n  astType: -> 'TryStatement'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      block: @attempt.ast o, LEVEL_TOP\r\n      handler: @catch?.ast(o) ? null\r\n      finalizer:\r\n        if @ensure?\r\n          Object.assign @ensure.ast(o, LEVEL_TOP),\r\n            # Include `finally` keyword in location data.\r\n            mergeAstLocationData(\r\n              jisonLocationDataToAstLocationData(@finallyTag.locationData),\r\n              @ensure.astLocationData()\r\n            )\r\n        else\r\n          null\r\n\r\nexports.Catch = class Catch extends Base\r\n  constructor: (@recovery, @errorVariable) ->\r\n    super()\r\n    @errorVariable?.unwrap().propagateLhs? yes\r\n\r\n  children: ['recovery', 'errorVariable']\r\n\r\n  isStatement: YES\r\n\r\n  jumps: (o) -> @recovery.jumps o\r\n\r\n  makeReturn: (results, mark) ->\r\n    ret = @recovery.makeReturn results, mark\r\n    return if mark\r\n    @recovery = ret\r\n    this\r\n\r\n  compileNode: (o) ->\r\n    o.indent  += TAB\r\n    generatedErrorVariableName = o.scope.freeVariable 'error', reserve: no\r\n    placeholder = new IdentifierLiteral generatedErrorVariableName\r\n    @checkUnassignable()\r\n    if @errorVariable\r\n      @recovery.unshift new Assign @errorVariable, placeholder\r\n    [].concat @makeCode(\" catch (\"), placeholder.compileToFragments(o), @makeCode(\") {\\n\"),\r\n      @recovery.compileToFragments(o, LEVEL_TOP), @makeCode(\"\\n#{@tab}}\")\r\n\r\n  checkUnassignable: ->\r\n    if @errorVariable\r\n      message = isUnassignable @errorVariable.unwrapAll().value\r\n      @errorVariable.error message if message\r\n\r\n  astNode: (o) ->\r\n    @checkUnassignable()\r\n    @errorVariable?.eachName (name) ->\r\n      alreadyDeclared = o.scope.find name.value\r\n      name.isDeclaration = not alreadyDeclared\r\n\r\n    super o\r\n\r\n  astType: -> 'CatchClause'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      param: @errorVariable?.ast(o) ? null\r\n      body: @recovery.ast o, LEVEL_TOP\r\n\r\n#### Throw\r\n\r\n# Simple node to throw an exception.\r\nexports.Throw = class Throw extends Base\r\n  constructor: (@expression) ->\r\n    super()\r\n\r\n  children: ['expression']\r\n\r\n  isStatement: YES\r\n  jumps:       NO\r\n\r\n  # A **Throw** is already a return, of sorts...\r\n  makeReturn: THIS\r\n\r\n  compileNode: (o) ->\r\n    fragments = @expression.compileToFragments o, LEVEL_LIST\r\n    unshiftAfterComments fragments, @makeCode 'throw '\r\n    fragments.unshift @makeCode @tab\r\n    fragments.push @makeCode ';'\r\n    fragments\r\n\r\n  astType: -> 'ThrowStatement'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      argument: @expression.ast o, LEVEL_LIST\r\n\r\n#### Existence\r\n\r\n# Checks a variable for existence -- not `null` and not `undefined`. This is\r\n# similar to `.nil?` in Ruby, and avoids having to consult a JavaScript truth\r\n# table. Optionally only check if a variable is not `undefined`.\r\nexports.Existence = class Existence extends Base\r\n  constructor: (@expression, onlyNotUndefined = no) ->\r\n    super()\r\n    @comparisonTarget = if onlyNotUndefined then 'undefined' else 'null'\r\n    salvagedComments = []\r\n    @expression.traverseChildren yes, (child) ->\r\n      if child.comments\r\n        for comment in child.comments\r\n          salvagedComments.push comment unless comment in salvagedComments\r\n        delete child.comments\r\n    attachCommentsToNode salvagedComments, @\r\n    moveComments @expression, @\r\n\r\n  children: ['expression']\r\n\r\n  invert: NEGATE\r\n\r\n  compileNode: (o) ->\r\n    @expression.front = @front\r\n    code = @expression.compile o, LEVEL_OP\r\n    if @expression.unwrap() instanceof IdentifierLiteral and not o.scope.check code\r\n      [cmp, cnj] = if @negated then ['===', '||'] else ['!==', '&&']\r\n      code = \"typeof #{code} #{cmp} \\\"undefined\\\"\" + if @comparisonTarget isnt 'undefined' then \" #{cnj} #{code} #{cmp} #{@comparisonTarget}\" else ''\r\n    else\r\n      # We explicity want to use loose equality (`==`) when comparing against `null`,\r\n      # so that an existence check roughly corresponds to a check for truthiness.\r\n      # Do *not* change this to `===` for `null`, as this will break mountains of\r\n      # existing code. When comparing only against `undefined`, however, we want to\r\n      # use `===` because this use case is for parity with ES2015+ default values,\r\n      # which only get assigned when the variable is `undefined` (but not `null`).\r\n      cmp = if @comparisonTarget is 'null'\r\n        if @negated then '==' else '!='\r\n      else # `undefined`\r\n        if @negated then '===' else '!=='\r\n      code = \"#{code} #{cmp} #{@comparisonTarget}\"\r\n    [@makeCode(if o.level <= LEVEL_COND then code else \"(#{code})\")]\r\n\r\n  astType: -> 'UnaryExpression'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      argument: @expression.ast o\r\n      operator: '?'\r\n      prefix: no\r\n\r\n#### Parens\r\n\r\n# An extra set of parentheses, specified explicitly in the source. At one time\r\n# we tried to clean up the results by detecting and removing redundant\r\n# parentheses, but no longer -- you can put in as many as you please.\r\n#\r\n# Parentheses are a good way to force any statement to become an expression.\r\nexports.Parens = class Parens extends Base\r\n  constructor: (@body) ->\r\n    super()\r\n\r\n  children: ['body']\r\n\r\n  unwrap: -> @body\r\n\r\n  shouldCache: -> @body.shouldCache()\r\n\r\n  compileNode: (o) ->\r\n    expr = @body.unwrap()\r\n    # If these parentheses are wrapping an `IdentifierLiteral` followed by a\r\n    # block comment, output the parentheses (or put another way, don’t optimize\r\n    # away these redundant parentheses). This is because Flow requires\r\n    # parentheses in certain circumstances to distinguish identifiers followed\r\n    # by comment-based type annotations from JavaScript labels.\r\n    shouldWrapComment = expr.comments?.some(\r\n      (comment) -> comment.here and not comment.unshift and not comment.newLine)\r\n    if expr instanceof Value and expr.isAtomic() and not @jsxAttribute and not shouldWrapComment\r\n      expr.front = @front\r\n      return expr.compileToFragments o\r\n    fragments = expr.compileToFragments o, LEVEL_PAREN\r\n    bare = o.level < LEVEL_OP and not shouldWrapComment and (\r\n        expr instanceof Op and not expr.isInOperator() or expr.unwrap() instanceof Call or\r\n        (expr instanceof For and expr.returns)\r\n      ) and (o.level < LEVEL_COND or fragments.length <= 3)\r\n    return @wrapInBraces fragments if @jsxAttribute\r\n    if bare then fragments else @wrapInParentheses fragments\r\n\r\n  astNode: (o) -> @body.unwrap().ast o, LEVEL_PAREN\r\n\r\n#### StringWithInterpolations\r\n\r\nexports.StringWithInterpolations = class StringWithInterpolations extends Base\r\n  constructor: (@body, {@quote, @startQuote, @jsxAttribute} = {}) ->\r\n    super()\r\n\r\n  @fromStringLiteral: (stringLiteral) ->\r\n    updatedString = stringLiteral.withoutQuotesInLocationData()\r\n    updatedStringValue = new Value(updatedString).withLocationDataFrom updatedString\r\n    new StringWithInterpolations Block.wrap([updatedStringValue]), quote: stringLiteral.quote, jsxAttribute: stringLiteral.jsxAttribute\r\n    .withLocationDataFrom stringLiteral\r\n\r\n  children: ['body']\r\n\r\n  # `unwrap` returns `this` to stop ancestor nodes reaching in to grab @body,\r\n  # and using @body.compileNode. `StringWithInterpolations.compileNode` is\r\n  # _the_ custom logic to output interpolated strings as code.\r\n  unwrap: -> this\r\n\r\n  shouldCache: -> @body.shouldCache()\r\n\r\n  extractElements: (o, {includeInterpolationWrappers, isJsx} = {}) ->\r\n    # Assumes that `expr` is `Block`\r\n    expr = @body.unwrap()\r\n\r\n    elements = []\r\n    salvagedComments = []\r\n    expr.traverseChildren no, (node) =>\r\n      if node instanceof StringLiteral\r\n        if node.comments\r\n          salvagedComments.push node.comments...\r\n          delete node.comments\r\n        elements.push node\r\n        return yes\r\n      else if node instanceof Interpolation\r\n        if salvagedComments.length isnt 0\r\n          for comment in salvagedComments\r\n            comment.unshift = yes\r\n            comment.newLine = yes\r\n          attachCommentsToNode salvagedComments, node\r\n        if (unwrapped = node.expression?.unwrapAll()) instanceof PassthroughLiteral and unwrapped.generated and not (isJsx and o.compiling)\r\n          if o.compiling\r\n            commentPlaceholder = new StringLiteral('').withLocationDataFrom node\r\n            commentPlaceholder.comments = unwrapped.comments\r\n            (commentPlaceholder.comments ?= []).push node.comments... if node.comments\r\n            elements.push new Value commentPlaceholder\r\n          else\r\n            empty = new Interpolation().withLocationDataFrom node\r\n            empty.comments = node.comments\r\n            elements.push empty\r\n        else if node.expression or includeInterpolationWrappers\r\n          (node.expression?.comments ?= []).push node.comments... if node.comments\r\n          elements.push if includeInterpolationWrappers then node else node.expression\r\n        return no\r\n      else if node.comments\r\n        # This node is getting discarded, but salvage its comments.\r\n        if elements.length isnt 0 and elements[elements.length - 1] not instanceof StringLiteral\r\n          for comment in node.comments\r\n            comment.unshift = no\r\n            comment.newLine = yes\r\n          attachCommentsToNode node.comments, elements[elements.length - 1]\r\n        else\r\n          salvagedComments.push node.comments...\r\n        delete node.comments\r\n      return yes\r\n\r\n    elements\r\n\r\n  compileNode: (o) ->\r\n    @comments ?= @startQuote?.comments\r\n\r\n    if @jsxAttribute\r\n      wrapped = new Parens new StringWithInterpolations @body\r\n      wrapped.jsxAttribute = yes\r\n      return wrapped.compileNode o\r\n\r\n    elements = @extractElements o, isJsx: @jsx\r\n\r\n    fragments = []\r\n    fragments.push @makeCode '`' unless @jsx\r\n    for element in elements\r\n      if element instanceof StringLiteral\r\n        unquotedElementValue = if @jsx then element.unquotedValueForJSX else element.unquotedValueForTemplateLiteral\r\n        fragments.push @makeCode unquotedElementValue\r\n      else\r\n        fragments.push @makeCode '$' unless @jsx\r\n        code = element.compileToFragments(o, LEVEL_PAREN)\r\n        if not @isNestedTag(element) or\r\n           code.some((fragment) -> fragment.comments?.some((comment) -> comment.here is no))\r\n          code = @wrapInBraces code\r\n          # Flag the `{` and `}` fragments as having been generated by this\r\n          # `StringWithInterpolations` node, so that `compileComments` knows\r\n          # to treat them as bounds. But the braces are unnecessary if all of\r\n          # the enclosed comments are `/* */` comments. Don’t trust\r\n          # `fragment.type`, which can report minified variable names when\r\n          # this compiler is minified.\r\n          code[0].isStringWithInterpolations = yes\r\n          code[code.length - 1].isStringWithInterpolations = yes\r\n        fragments.push code...\r\n    fragments.push @makeCode '`' unless @jsx\r\n    fragments\r\n\r\n  isNestedTag: (element) ->\r\n    call = element.unwrapAll?()\r\n    @jsx and call instanceof JSXElement\r\n\r\n  astType: -> 'TemplateLiteral'\r\n\r\n  astProperties: (o) ->\r\n    elements = @extractElements o, includeInterpolationWrappers: yes\r\n    [..., last] = elements\r\n\r\n    quasis = []\r\n    expressions = []\r\n\r\n    for element, index in elements\r\n      if element instanceof StringLiteral\r\n        quasis.push new TemplateElement(\r\n          element.originalValue\r\n          tail: element is last\r\n        ).withLocationDataFrom(element).ast o\r\n      else # Interpolation\r\n        {expression} = element\r\n        node =\r\n          unless expression?\r\n            emptyInterpolation = new EmptyInterpolation()\r\n            emptyInterpolation.locationData = emptyExpressionLocationData {\r\n              interpolationNode: element\r\n              openingBrace: '#{'\r\n              closingBrace: '}'\r\n            }\r\n            emptyInterpolation\r\n          else\r\n            expression.unwrapAll()\r\n        expressions.push astAsBlockIfNeeded node, o\r\n\r\n    {expressions, quasis, @quote}\r\n\r\nexports.TemplateElement = class TemplateElement extends Base\r\n  constructor: (@value, {@tail} = {}) ->\r\n    super()\r\n\r\n  astProperties: ->\r\n    return\r\n      value:\r\n        raw: @value\r\n      tail: !!@tail\r\n\r\nexports.Interpolation = class Interpolation extends Base\r\n  constructor: (@expression) ->\r\n    super()\r\n\r\n  children: ['expression']\r\n\r\n# Represents the contents of an empty interpolation (e.g. `#{}`).\r\n# Only used during AST generation.\r\nexports.EmptyInterpolation = class EmptyInterpolation extends Base\r\n  constructor: ->\r\n    super()\r\n\r\n#### For\r\n\r\n# CoffeeScript's replacement for the *for* loop is our array and object\r\n# comprehensions, that compile into *for* loops here. They also act as an\r\n# expression, able to return the result of each filtered iteration.\r\n#\r\n# Unlike Python array comprehensions, they can be multi-line, and you can pass\r\n# the current index of the loop as a second parameter. Unlike Ruby blocks,\r\n# you can map and filter in a single pass.\r\nexports.For = class For extends While\r\n  constructor: (body, source) ->\r\n    super()\r\n    @addBody body\r\n    @addSource source\r\n\r\n  children: ['body', 'source', 'guard', 'step']\r\n\r\n  isAwait: -> @await ? no\r\n\r\n  addBody: (body) ->\r\n    @body = Block.wrap [body]\r\n    {expressions} = @body\r\n    if expressions.length\r\n      @body.locationData ?= mergeLocationData expressions[0].locationData, expressions[expressions.length - 1].locationData\r\n    this\r\n\r\n  addSource: (source) ->\r\n    {@source  = no} = source\r\n    attribs   = [\"name\", \"index\", \"guard\", \"step\", \"own\", \"ownTag\", \"await\", \"awaitTag\", \"object\", \"from\"]\r\n    @[attr]   = source[attr] ? @[attr] for attr in attribs\r\n    return this unless @source\r\n    @index.error 'cannot use index with for-from' if @from and @index\r\n    @ownTag.error \"cannot use own with for-#{if @from then 'from' else 'in'}\" if @own and not @object\r\n    [@name, @index] = [@index, @name] if @object\r\n    @index.error 'index cannot be a pattern matching expression' if @index?.isArray?() or @index?.isObject?()\r\n    @awaitTag.error 'await must be used with for-from' if @await and not @from\r\n    @range   = @source instanceof Value and @source.base instanceof Range and not @source.properties.length and not @from\r\n    @pattern = @name instanceof Value\r\n    @name.unwrap().propagateLhs?(yes) if @pattern\r\n    @index.error 'indexes do not apply to range loops' if @range and @index\r\n    @name.error 'cannot pattern match over range loops' if @range and @pattern\r\n    @returns = no\r\n    # Move up any comments in the “`for` line”, i.e. the line of code with `for`,\r\n    # from any child nodes of that line up to the `for` node itself so that these\r\n    # comments get output, and get output above the `for` loop.\r\n    for attribute in ['source', 'guard', 'step', 'name', 'index'] when @[attribute]\r\n      @[attribute].traverseChildren yes, (node) =>\r\n        if node.comments\r\n          # These comments are buried pretty deeply, so if they happen to be\r\n          # trailing comments the line they trail will be unrecognizable when\r\n          # we’re done compiling this `for` loop; so just shift them up to\r\n          # output above the `for` line.\r\n          comment.newLine = comment.unshift = yes for comment in node.comments\r\n          moveComments node, @[attribute]\r\n      moveComments @[attribute], @\r\n    this\r\n\r\n  # Welcome to the hairiest method in all of CoffeeScript. Handles the inner\r\n  # loop, filtering, stepping, and result saving for array, object, and range\r\n  # comprehensions. Some of the generated code can be shared in common, and\r\n  # some cannot.\r\n  compileNode: (o) ->\r\n    body        = Block.wrap [@body]\r\n    [..., last] = body.expressions\r\n    @returns    = no if last?.jumps() instanceof Return\r\n    source      = if @range then @source.base else @source\r\n    scope       = o.scope\r\n    name        = @name  and (@name.compile o, LEVEL_LIST) if not @pattern\r\n    index       = @index and (@index.compile o, LEVEL_LIST)\r\n    scope.find(name)  if name and not @pattern\r\n    scope.find(index) if index and @index not instanceof Value\r\n    rvar        = scope.freeVariable 'results' if @returns\r\n    if @from\r\n      ivar = scope.freeVariable 'x', single: true if @pattern\r\n    else\r\n      ivar = (@object and index) or scope.freeVariable 'i', single: true\r\n    kvar        = ((@range or @from) and name) or index or ivar\r\n    kvarAssign  = if kvar isnt ivar then \"#{kvar} = \" else \"\"\r\n    if @step and not @range\r\n      [step, stepVar] = @cacheToCodeFragments @step.cache o, LEVEL_LIST, shouldCacheOrIsAssignable\r\n      stepNum   = parseNumber stepVar if @step.isNumber()\r\n    name        = ivar if @pattern\r\n    varPart     = ''\r\n    guardPart   = ''\r\n    defPart     = ''\r\n    idt1        = @tab + TAB\r\n    if @range\r\n      forPartFragments = source.compileToFragments merge o,\r\n        {index: ivar, name, @step, shouldCache: shouldCacheOrIsAssignable}\r\n    else\r\n      svar    = @source.compile o, LEVEL_LIST\r\n      if (name or @own) and not @from and @source.unwrap() not instanceof IdentifierLiteral\r\n        defPart    += \"#{@tab}#{ref = scope.freeVariable 'ref'} = #{svar};\\n\"\r\n        svar       = ref\r\n      if name and not @pattern and not @from\r\n        namePart   = \"#{name} = #{svar}[#{kvar}]\"\r\n      if not @object and not @from\r\n        defPart += \"#{@tab}#{step};\\n\" if step isnt stepVar\r\n        down = stepNum < 0\r\n        lvar = scope.freeVariable 'len' unless @step and stepNum? and down\r\n        declare = \"#{kvarAssign}#{ivar} = 0, #{lvar} = #{svar}.length\"\r\n        declareDown = \"#{kvarAssign}#{ivar} = #{svar}.length - 1\"\r\n        compare = \"#{ivar} < #{lvar}\"\r\n        compareDown = \"#{ivar} >= 0\"\r\n        if @step\r\n          if stepNum?\r\n            if down\r\n              compare = compareDown\r\n              declare = declareDown\r\n          else\r\n            compare = \"#{stepVar} > 0 ? #{compare} : #{compareDown}\"\r\n            declare = \"(#{stepVar} > 0 ? (#{declare}) : #{declareDown})\"\r\n          increment = \"#{ivar} += #{stepVar}\"\r\n        else\r\n          increment = \"#{if kvar isnt ivar then \"++#{ivar}\" else \"#{ivar}++\"}\"\r\n        forPartFragments = [@makeCode(\"#{declare}; #{compare}; #{kvarAssign}#{increment}\")]\r\n    if @returns\r\n      resultPart   = \"#{@tab}#{rvar} = [];\\n\"\r\n      returnResult = \"\\n#{@tab}return #{rvar};\"\r\n      body.makeReturn rvar\r\n    if @guard\r\n      if body.expressions.length > 1\r\n        body.expressions.unshift new If (new Parens @guard).invert(), new StatementLiteral \"continue\"\r\n      else\r\n        body = Block.wrap [new If @guard, body] if @guard\r\n    if @pattern\r\n      body.expressions.unshift new Assign @name, if @from then new IdentifierLiteral kvar else new Literal \"#{svar}[#{kvar}]\"\r\n\r\n    varPart = \"\\n#{idt1}#{namePart};\" if namePart\r\n    if @object\r\n      forPartFragments = [@makeCode(\"#{kvar} in #{svar}\")]\r\n      guardPart = \"\\n#{idt1}if (!#{utility 'hasProp', o}.call(#{svar}, #{kvar})) continue;\" if @own\r\n    else if @from\r\n      if @await\r\n        forPartFragments = new Op 'await', new Parens new Literal \"#{kvar} of #{svar}\"\r\n        forPartFragments = forPartFragments.compileToFragments o, LEVEL_TOP\r\n      else\r\n        forPartFragments = [@makeCode(\"#{kvar} of #{svar}\")]\r\n    bodyFragments = body.compileToFragments merge(o, indent: idt1), LEVEL_TOP\r\n    if bodyFragments and bodyFragments.length > 0\r\n      bodyFragments = [].concat @makeCode('\\n'), bodyFragments, @makeCode('\\n')\r\n\r\n    fragments = [@makeCode(defPart)]\r\n    fragments.push @makeCode(resultPart) if resultPart\r\n    forCode = if @await then 'for ' else 'for ('\r\n    forClose = if @await then '' else ')'\r\n    fragments = fragments.concat @makeCode(@tab), @makeCode( forCode),\r\n      forPartFragments, @makeCode(\"#{forClose} {#{guardPart}#{varPart}\"), bodyFragments,\r\n      @makeCode(@tab), @makeCode('}')\r\n    fragments.push @makeCode(returnResult) if returnResult\r\n    fragments\r\n\r\n  astNode: (o) ->\r\n    addToScope = (name) ->\r\n      alreadyDeclared = o.scope.find name.value\r\n      name.isDeclaration = not alreadyDeclared\r\n    @name?.eachName addToScope, checkAssignability: no\r\n    @index?.eachName addToScope, checkAssignability: no\r\n    super o\r\n\r\n  astType: -> 'For'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      source: @source?.ast o\r\n      body: @body.ast o, LEVEL_TOP\r\n      guard: @guard?.ast(o) ? null\r\n      name: @name?.ast(o) ? null\r\n      index: @index?.ast(o) ? null\r\n      step: @step?.ast(o) ? null\r\n      postfix: !!@postfix\r\n      own: !!@own\r\n      await: !!@await\r\n      style: switch\r\n        when @from   then 'from'\r\n        when @object then 'of'\r\n        when @name   then 'in'\r\n        else              'range'\r\n\r\n#### Switch\r\n\r\n# A JavaScript *switch* statement. Converts into a returnable expression on-demand.\r\nexports.Switch = class Switch extends Base\r\n  constructor: (@subject, @cases, @otherwise) ->\r\n    super()\r\n\r\n  children: ['subject', 'cases', 'otherwise']\r\n\r\n  isStatement: YES\r\n\r\n  jumps: (o = {block: yes}) ->\r\n    for {block} in @cases\r\n      return jumpNode if jumpNode = block.jumps o\r\n    @otherwise?.jumps o\r\n\r\n  makeReturn: (results, mark) ->\r\n    block.makeReturn(results, mark) for {block} in @cases\r\n    @otherwise or= new Block [new Literal 'void 0'] if results\r\n    @otherwise?.makeReturn results, mark\r\n    this\r\n\r\n  compileNode: (o) ->\r\n    idt1 = o.indent + TAB\r\n    idt2 = o.indent = idt1 + TAB\r\n    fragments = [].concat @makeCode(@tab + \"switch (\"),\r\n      (if @subject then @subject.compileToFragments(o, LEVEL_PAREN) else @makeCode \"false\"),\r\n      @makeCode(\") {\\n\")\r\n    for {conditions, block}, i in @cases\r\n      for cond in flatten [conditions]\r\n        cond  = cond.invert() unless @subject\r\n        fragments = fragments.concat @makeCode(idt1 + \"case \"), cond.compileToFragments(o, LEVEL_PAREN), @makeCode(\":\\n\")\r\n      fragments = fragments.concat body, @makeCode('\\n') if (body = block.compileToFragments o, LEVEL_TOP).length > 0\r\n      break if i is @cases.length - 1 and not @otherwise\r\n      expr = @lastNode block.expressions\r\n      continue if expr instanceof Return or expr instanceof Throw or (expr instanceof Literal and expr.jumps() and expr.value isnt 'debugger')\r\n      fragments.push cond.makeCode(idt2 + 'break;\\n')\r\n    if @otherwise and @otherwise.expressions.length\r\n      fragments.push @makeCode(idt1 + \"default:\\n\"), (@otherwise.compileToFragments o, LEVEL_TOP)..., @makeCode(\"\\n\")\r\n    fragments.push @makeCode @tab + '}'\r\n    fragments\r\n\r\n  astType: -> 'SwitchStatement'\r\n\r\n  casesAst: (o) ->\r\n    cases = []\r\n\r\n    for kase, caseIndex in @cases\r\n      {conditions: tests, block: consequent} = kase\r\n      tests = flatten [tests]\r\n      lastTestIndex = tests.length - 1\r\n      for test, testIndex in tests\r\n        testConsequent =\r\n          if testIndex is lastTestIndex\r\n            consequent\r\n          else\r\n            null\r\n\r\n        caseLocationData = test.locationData\r\n        caseLocationData = mergeLocationData caseLocationData, testConsequent.expressions[testConsequent.expressions.length - 1].locationData if testConsequent?.expressions.length\r\n        caseLocationData = mergeLocationData caseLocationData, kase.locationData, justLeading: yes if testIndex is 0\r\n        caseLocationData = mergeLocationData caseLocationData, kase.locationData, justEnding:  yes if testIndex is lastTestIndex\r\n\r\n        cases.push new SwitchCase(test, testConsequent, trailing: testIndex is lastTestIndex).withLocationDataFrom locationData: caseLocationData\r\n\r\n    if @otherwise?.expressions.length\r\n      cases.push new SwitchCase(null, @otherwise).withLocationDataFrom @otherwise\r\n\r\n    kase.ast(o) for kase in cases\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      discriminant: @subject?.ast(o, LEVEL_PAREN) ? null\r\n      cases: @casesAst o\r\n\r\nclass SwitchCase extends Base\r\n  constructor: (@test, @block, {@trailing} = {}) ->\r\n    super()\r\n\r\n  children: ['test', 'block']\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      test: @test?.ast(o, LEVEL_PAREN) ? null\r\n      consequent: @block?.ast(o, LEVEL_TOP).body ? []\r\n      trailing: !!@trailing\r\n\r\nexports.SwitchWhen = class SwitchWhen extends Base\r\n  constructor: (@conditions, @block) ->\r\n    super()\r\n\r\n  children: ['conditions', 'block']\r\n\r\n#### If\r\n\r\n# *If/else* statements. Acts as an expression by pushing down requested returns\r\n# to the last line of each clause.\r\n#\r\n# Single-expression **Ifs** are compiled into conditional operators if possible,\r\n# because ternaries are already proper expressions, and don’t need conversion.\r\nexports.If = class If extends Base\r\n  constructor: (@condition, @body, options = {}) ->\r\n    super()\r\n    @elseBody  = null\r\n    @isChain   = false\r\n    {@soak, @postfix, @type} = options\r\n    moveComments @condition, @ if @condition.comments\r\n\r\n  children: ['condition', 'body', 'elseBody']\r\n\r\n  bodyNode:     -> @body?.unwrap()\r\n  elseBodyNode: -> @elseBody?.unwrap()\r\n\r\n  # Rewrite a chain of **Ifs** to add a default case as the final *else*.\r\n  addElse: (elseBody) ->\r\n    if @isChain\r\n      @elseBodyNode().addElse elseBody\r\n      @locationData = mergeLocationData @locationData, @elseBodyNode().locationData\r\n    else\r\n      @isChain  = elseBody instanceof If\r\n      @elseBody = @ensureBlock elseBody\r\n      @elseBody.updateLocationDataIfMissing elseBody.locationData\r\n      @locationData = mergeLocationData @locationData, @elseBody.locationData if @locationData? and @elseBody.locationData?\r\n    this\r\n\r\n  # The **If** only compiles into a statement if either of its bodies needs\r\n  # to be a statement. Otherwise a conditional operator is safe.\r\n  isStatement: (o) ->\r\n    o?.level is LEVEL_TOP or\r\n      @bodyNode().isStatement(o) or @elseBodyNode()?.isStatement(o)\r\n\r\n  jumps: (o) -> @body.jumps(o) or @elseBody?.jumps(o)\r\n\r\n  compileNode: (o) ->\r\n    if @isStatement o then @compileStatement o else @compileExpression o\r\n\r\n  makeReturn: (results, mark) ->\r\n    if mark\r\n      @body?.makeReturn results, mark\r\n      @elseBody?.makeReturn results, mark\r\n      return\r\n    @elseBody  or= new Block [new Literal 'void 0'] if results\r\n    @body     and= new Block [@body.makeReturn results]\r\n    @elseBody and= new Block [@elseBody.makeReturn results]\r\n    this\r\n\r\n  ensureBlock: (node) ->\r\n    if node instanceof Block then node else new Block [node]\r\n\r\n  # Compile the `If` as a regular *if-else* statement. Flattened chains\r\n  # force inner *else* bodies into statement form.\r\n  compileStatement: (o) ->\r\n    child    = del o, 'chainChild'\r\n    exeq     = del o, 'isExistentialEquals'\r\n\r\n    if exeq\r\n      return new If(@processedCondition().invert(), @elseBodyNode(), type: 'if').compileToFragments o\r\n\r\n    indent   = o.indent + TAB\r\n    cond     = @processedCondition().compileToFragments o, LEVEL_PAREN\r\n    body     = @ensureBlock(@body).compileToFragments merge o, {indent}\r\n    ifPart   = [].concat @makeCode(\"if (\"), cond, @makeCode(\") {\\n\"), body, @makeCode(\"\\n#{@tab}}\")\r\n    ifPart.unshift @makeCode @tab unless child\r\n    return ifPart unless @elseBody\r\n    answer = ifPart.concat @makeCode(' else ')\r\n    if @isChain\r\n      o.chainChild = yes\r\n      answer = answer.concat @elseBody.unwrap().compileToFragments o, LEVEL_TOP\r\n    else\r\n      answer = answer.concat @makeCode(\"{\\n\"), @elseBody.compileToFragments(merge(o, {indent}), LEVEL_TOP), @makeCode(\"\\n#{@tab}}\")\r\n    answer\r\n\r\n  # Compile the `If` as a conditional operator.\r\n  compileExpression: (o) ->\r\n    cond = @processedCondition().compileToFragments o, LEVEL_COND\r\n    body = @bodyNode().compileToFragments o, LEVEL_LIST\r\n    alt  = if @elseBodyNode() then @elseBodyNode().compileToFragments(o, LEVEL_LIST) else [@makeCode('void 0')]\r\n    fragments = cond.concat @makeCode(\" ? \"), body, @makeCode(\" : \"), alt\r\n    if o.level >= LEVEL_COND then @wrapInParentheses fragments else fragments\r\n\r\n  unfoldSoak: ->\r\n    @soak and this\r\n\r\n  processedCondition: ->\r\n    @processedConditionCache ?= if @type is 'unless' then @condition.invert() else @condition\r\n\r\n  isStatementAst: (o) ->\r\n    o.level is LEVEL_TOP\r\n\r\n  astType: (o) ->\r\n    if @isStatementAst o\r\n      'IfStatement'\r\n    else\r\n      'ConditionalExpression'\r\n\r\n  astProperties: (o) ->\r\n    isStatement = @isStatementAst o\r\n\r\n    return\r\n      test: @condition.ast o, if isStatement then LEVEL_PAREN else LEVEL_COND\r\n      consequent:\r\n        if isStatement\r\n          @body.ast o, LEVEL_TOP\r\n        else\r\n          @bodyNode().ast o, LEVEL_TOP\r\n      alternate:\r\n        if @isChain\r\n          @elseBody.unwrap().ast o, if isStatement then LEVEL_TOP else LEVEL_COND\r\n        else if not isStatement and @elseBody?.expressions?.length is 1\r\n          @elseBody.expressions[0].ast o, LEVEL_TOP\r\n        else\r\n          @elseBody?.ast(o, LEVEL_TOP) ? null\r\n      postfix: !!@postfix\r\n      inverted: @type is 'unless'\r\n\r\n# A sequence expression e.g. `(a; b)`.\r\n# Currently only used during AST generation.\r\nexports.Sequence = class Sequence extends Base\r\n  children: ['expressions']\r\n\r\n  constructor: (@expressions) ->\r\n    super()\r\n\r\n  astNode: (o) ->\r\n    return @expressions[0].ast(o) if @expressions.length is 1\r\n    super o\r\n\r\n  astType: -> 'SequenceExpression'\r\n\r\n  astProperties: (o) ->\r\n    return\r\n      expressions:\r\n        expression.ast(o) for expression in @expressions\r\n\r\n# Constants\r\n# ---------\r\n\r\nUTILITIES =\r\n  modulo: -> 'function(a, b) { return (+a % (b = +b) + b) % b; }'\r\n\r\n  boundMethodCheck: -> \"\r\n    function(instance, Constructor) {\r\n      if (!(instance instanceof Constructor)) {\r\n        throw new Error('Bound instance method accessed before binding');\r\n      }\r\n    }\r\n  \"\r\n\r\n  # Shortcuts to speed up the lookup time for native functions.\r\n  hasProp: -> '{}.hasOwnProperty'\r\n  indexOf: -> '[].indexOf'\r\n  slice  : -> '[].slice'\r\n  splice : -> '[].splice'\r\n\r\n# Levels indicate a node's position in the AST. Useful for knowing if\r\n# parens are necessary or superfluous.\r\nLEVEL_TOP    = 1  # ...;\r\nLEVEL_PAREN  = 2  # (...)\r\nLEVEL_LIST   = 3  # [...]\r\nLEVEL_COND   = 4  # ... ? x : y\r\nLEVEL_OP     = 5  # !...\r\nLEVEL_ACCESS = 6  # ...[0]\r\n\r\n# Tabs are two spaces for pretty printing.\r\nTAB = '  '\r\n\r\nSIMPLENUM = /^[+-]?\\d+(?:_\\d+)*$/\r\nSIMPLE_STRING_OMIT = /\\s*\\n\\s*/g\r\nLEADING_BLANK_LINE  = /^[^\\n\\S]*\\n/\r\nTRAILING_BLANK_LINE = /\\n[^\\n\\S]*$/\r\nSTRING_OMIT    = ///\r\n    ((?:\\\\\\\\)+)      # Consume (and preserve) an even number of backslashes.\r\n  | \\\\[^\\S\\n]*\\n\\s*  # Remove escaped newlines.\r\n///g\r\nHEREGEX_OMIT = ///\r\n    ((?:\\\\\\\\)+)     # Consume (and preserve) an even number of backslashes.\r\n  | \\\\(\\s)          # Preserve escaped whitespace.\r\n  | \\s+(?:#.*)?     # Remove whitespace and comments.\r\n///g\r\n\r\n# Helper Functions\r\n# ----------------\r\n\r\n# Helper for ensuring that utility functions are assigned at the top level.\r\nutility = (name, o) ->\r\n  {root} = o.scope\r\n  if name of root.utilities\r\n    root.utilities[name]\r\n  else\r\n    ref = root.freeVariable name\r\n    root.assign ref, UTILITIES[name] o\r\n    root.utilities[name] = ref\r\n\r\nmultident = (code, tab, includingFirstLine = yes) ->\r\n  endsWithNewLine = code[code.length - 1] is '\\n'\r\n  code = (if includingFirstLine then tab else '') + code.replace /\\n/g, \"$&#{tab}\"\r\n  code = code.replace /\\s+$/, ''\r\n  code = code + '\\n' if endsWithNewLine\r\n  code\r\n\r\n# Wherever in CoffeeScript 1 we might’ve inserted a `makeCode \"#{@tab}\"` to\r\n# indent a line of code, now we must account for the possibility of comments\r\n# preceding that line of code. If there are such comments, indent each line of\r\n# such comments, and _then_ indent the first following line of code.\r\nindentInitial = (fragments, node) ->\r\n  for fragment, fragmentIndex in fragments\r\n    if fragment.isHereComment\r\n      fragment.code = multident fragment.code, node.tab\r\n    else\r\n      fragments.splice fragmentIndex, 0, node.makeCode \"#{node.tab}\"\r\n      break\r\n  fragments\r\n\r\nhasLineComments = (node) ->\r\n  return no unless node.comments\r\n  for comment in node.comments\r\n    return yes if comment.here is no\r\n  return no\r\n\r\n# Move the `comments` property from one object to another, deleting it from\r\n# the first object.\r\nmoveComments = (from, to) ->\r\n  return unless from?.comments\r\n  attachCommentsToNode from.comments, to\r\n  delete from.comments\r\n\r\n# Sometimes when compiling a node, we want to insert a fragment at the start\r\n# of an array of fragments; but if the start has one or more comment fragments,\r\n# we want to insert this fragment after those but before any non-comments.\r\nunshiftAfterComments = (fragments, fragmentToInsert) ->\r\n  inserted = no\r\n  for fragment, fragmentIndex in fragments when not fragment.isComment\r\n    fragments.splice fragmentIndex, 0, fragmentToInsert\r\n    inserted = yes\r\n    break\r\n  fragments.push fragmentToInsert unless inserted\r\n  fragments\r\n\r\nisLiteralArguments = (node) ->\r\n  node instanceof IdentifierLiteral and node.value is 'arguments'\r\n\r\nisLiteralThis = (node) ->\r\n  node instanceof ThisLiteral or (node instanceof Code and node.bound)\r\n\r\nshouldCacheOrIsAssignable = (node) -> node.shouldCache() or node.isAssignable?()\r\n\r\n# Unfold a node's child if soak, then tuck the node under created `If`\r\nunfoldSoak = (o, parent, name) ->\r\n  return unless ifn = parent[name].unfoldSoak o\r\n  parent[name] = ifn.body\r\n  ifn.body = new Value parent\r\n  ifn\r\n\r\n# Constructs a string or regex by escaping certain characters.\r\nmakeDelimitedLiteral = (body, {delimiter: delimiterOption, escapeNewlines, double, includeDelimiters = yes, escapeDelimiter = yes, convertTrailingNullEscapes} = {}) ->\r\n  body = '(?:)' if body is '' and delimiterOption is '/'\r\n  escapeTemplateLiteralCurlies = delimiterOption is '`'\r\n  regex = ///\r\n      (\\\\\\\\)                               # Escaped backslash.\r\n    | (\\\\0(?=\\d))                          # Null character mistaken as octal escape.\r\n    #{\r\n      if convertTrailingNullEscapes\r\n        /// | (\\\\0) $ ///.source           # Trailing null character that could be mistaken as octal escape.\r\n      else\r\n        ''\r\n    }\r\n    #{\r\n      if escapeDelimiter\r\n        /// | \\\\?(#{delimiterOption}) ///.source # (Possibly escaped) delimiter.\r\n      else\r\n        ''\r\n    }\r\n    #{\r\n      if escapeTemplateLiteralCurlies\r\n        /// | \\\\?(\\$\\{) ///.source         # `${` inside template literals must be escaped.\r\n      else\r\n        ''\r\n    }\r\n    | \\\\?(?:\r\n        #{if escapeNewlines then '(\\n)|' else ''}\r\n          (\\r)\r\n        | (\\u2028)\r\n        | (\\u2029)\r\n      )                                    # (Possibly escaped) newlines.\r\n    | (\\\\.)                                # Other escapes.\r\n  ///g\r\n  body = body.replace regex, (match, backslash, nul, ...args) ->\r\n    trailingNullEscape =\r\n      args.shift() if convertTrailingNullEscapes\r\n    delimiter =\r\n      args.shift() if escapeDelimiter\r\n    templateLiteralCurly =\r\n      args.shift() if escapeTemplateLiteralCurlies\r\n    lf =\r\n      args.shift() if escapeNewlines\r\n    [cr, ls, ps, other] = args\r\n    switch\r\n      # Ignore escaped backslashes.\r\n      when backslash then (if double then backslash + backslash else backslash)\r\n      when nul                  then '\\\\x00'\r\n      when trailingNullEscape   then \"\\\\x00\"\r\n      when delimiter            then \"\\\\#{delimiter}\"\r\n      when templateLiteralCurly then \"\\\\${\"\r\n      when lf                   then '\\\\n'\r\n      when cr                   then '\\\\r'\r\n      when ls                   then '\\\\u2028'\r\n      when ps                   then '\\\\u2029'\r\n      when other                then (if double then \"\\\\#{other}\" else other)\r\n  printedDelimiter = if includeDelimiters then delimiterOption else ''\r\n  \"#{printedDelimiter}#{body}#{printedDelimiter}\"\r\n\r\nsniffDirectives = (expressions, {notFinalExpression} = {}) ->\r\n  index = 0\r\n  lastIndex = expressions.length - 1\r\n  while index <= lastIndex\r\n    break if index is lastIndex and notFinalExpression\r\n    expression = expressions[index]\r\n    if (unwrapped = expression?.unwrap?()) instanceof PassthroughLiteral and unwrapped.generated\r\n      index++\r\n      continue\r\n    break unless expression instanceof Value and expression.isString() and not expression.unwrap().shouldGenerateTemplateLiteral()\r\n    expressions[index] =\r\n      new Directive expression\r\n      .withLocationDataFrom expression\r\n    index++\r\n\r\nastAsBlockIfNeeded = (node, o) ->\r\n  unwrapped = node.unwrap()\r\n  if unwrapped instanceof Block and unwrapped.expressions.length > 1\r\n    unwrapped.makeReturn null, yes\r\n    unwrapped.ast o, LEVEL_TOP\r\n  else\r\n    node.ast o, LEVEL_PAREN\r\n\r\n# Helpers for `mergeLocationData` and `mergeAstLocationData` below.\r\nlesser  = (a, b) -> if a < b then a else b\r\ngreater = (a, b) -> if a > b then a else b\r\n\r\nisAstLocGreater = (a, b) ->\r\n  return yes if a.line > b.line\r\n  return no unless a.line is b.line\r\n  a.column > b.column\r\n\r\nisLocationDataStartGreater = (a, b) ->\r\n  return yes if a.first_line > b.first_line\r\n  return no unless a.first_line is b.first_line\r\n  a.first_column > b.first_column\r\n\r\nisLocationDataEndGreater = (a, b) ->\r\n  return yes if a.last_line > b.last_line\r\n  return no unless a.last_line is b.last_line\r\n  a.last_column > b.last_column\r\n\r\n# Take two nodes’ location data and return a new `locationData` object that\r\n# encompasses the location data of both nodes. So the new `first_line` value\r\n# will be the earlier of the two nodes’ `first_line` values, the new\r\n# `last_column` the later of the two nodes’ `last_column` values, etc.\r\n#\r\n# If you only want to extend the first node’s location data with the start or\r\n# end location data of the second node, pass the `justLeading` or `justEnding`\r\n# options. So e.g. if `first`’s range is [4, 5] and `second`’s range is [1, 10],\r\n# you’d get:\r\n# ```\r\n# mergeLocationData(first, second).range                   # [1, 10]\r\n# mergeLocationData(first, second, justLeading: yes).range # [1, 5]\r\n# mergeLocationData(first, second, justEnding:  yes).range # [4, 10]\r\n# ```\r\nexports.mergeLocationData = mergeLocationData = (locationDataA, locationDataB, {justLeading, justEnding} = {}) ->\r\n  return Object.assign(\r\n    if justEnding\r\n      first_line:   locationDataA.first_line\r\n      first_column: locationDataA.first_column\r\n    else\r\n      if isLocationDataStartGreater locationDataA, locationDataB\r\n        first_line:   locationDataB.first_line\r\n        first_column: locationDataB.first_column\r\n      else\r\n        first_line:   locationDataA.first_line\r\n        first_column: locationDataA.first_column\r\n  ,\r\n    if justLeading\r\n      last_line:             locationDataA.last_line\r\n      last_column:           locationDataA.last_column\r\n      last_line_exclusive:   locationDataA.last_line_exclusive\r\n      last_column_exclusive: locationDataA.last_column_exclusive\r\n    else\r\n      if isLocationDataEndGreater locationDataA, locationDataB\r\n        last_line:             locationDataA.last_line\r\n        last_column:           locationDataA.last_column\r\n        last_line_exclusive:   locationDataA.last_line_exclusive\r\n        last_column_exclusive: locationDataA.last_column_exclusive\r\n      else\r\n        last_line:             locationDataB.last_line\r\n        last_column:           locationDataB.last_column\r\n        last_line_exclusive:   locationDataB.last_line_exclusive\r\n        last_column_exclusive: locationDataB.last_column_exclusive\r\n  ,\r\n    range: [\r\n      if justEnding\r\n        locationDataA.range[0]\r\n      else\r\n        lesser locationDataA.range[0], locationDataB.range[0]\r\n    ,\r\n      if justLeading\r\n        locationDataA.range[1]\r\n      else\r\n        greater locationDataA.range[1], locationDataB.range[1]\r\n    ]\r\n  )\r\n\r\n# Take two AST nodes, or two AST nodes’ location data objects, and return a new\r\n# location data object that encompasses the location data of both nodes. So the\r\n# new `start` value will be the earlier of the two nodes’ `start` values, the\r\n# new `end` value will be the later of the two nodes’ `end` values, etc.\r\n#\r\n# If you only want to extend the first node’s location data with the start or\r\n# end location data of the second node, pass the `justLeading` or `justEnding`\r\n# options. So e.g. if `first`’s range is [4, 5] and `second`’s range is [1, 10],\r\n# you’d get:\r\n# ```\r\n# mergeAstLocationData(first, second).range                   # [1, 10]\r\n# mergeAstLocationData(first, second, justLeading: yes).range # [1, 5]\r\n# mergeAstLocationData(first, second, justEnding:  yes).range # [4, 10]\r\n# ```\r\nexports.mergeAstLocationData = mergeAstLocationData = (nodeA, nodeB, {justLeading, justEnding} = {}) ->\r\n  return\r\n    loc:\r\n      start:\r\n        if justEnding\r\n          nodeA.loc.start\r\n        else\r\n          if isAstLocGreater nodeA.loc.start, nodeB.loc.start\r\n            nodeB.loc.start\r\n          else\r\n            nodeA.loc.start\r\n      end:\r\n        if justLeading\r\n          nodeA.loc.end\r\n        else\r\n          if isAstLocGreater nodeA.loc.end, nodeB.loc.end\r\n            nodeA.loc.end\r\n          else\r\n            nodeB.loc.end\r\n    range: [\r\n      if justEnding\r\n        nodeA.range[0]\r\n      else\r\n        lesser nodeA.range[0], nodeB.range[0]\r\n    ,\r\n      if justLeading\r\n        nodeA.range[1]\r\n      else\r\n        greater nodeA.range[1], nodeB.range[1]\r\n    ]\r\n    start:\r\n      if justEnding\r\n        nodeA.start\r\n      else\r\n        lesser nodeA.start, nodeB.start\r\n    end:\r\n      if justLeading\r\n        nodeA.end\r\n      else\r\n        greater nodeA.end, nodeB.end\r\n\r\n# Convert Jison-style node class location data to Babel-style location data\r\nexports.jisonLocationDataToAstLocationData = jisonLocationDataToAstLocationData = ({first_line, first_column, last_line_exclusive, last_column_exclusive, range}) ->\r\n  return\r\n    loc:\r\n      start:\r\n        line:   first_line + 1\r\n        column: first_column\r\n      end:\r\n        line:   last_line_exclusive + 1\r\n        column: last_column_exclusive\r\n    range: [\r\n      range[0]\r\n      range[1]\r\n    ]\r\n    start: range[0]\r\n    end:   range[1]\r\n\r\n# Generate a zero-width location data that corresponds to the end of another node’s location.\r\nzeroWidthLocationDataFromEndLocation = ({range: [, endRange], last_line_exclusive, last_column_exclusive}) -> {\r\n  first_line: last_line_exclusive\r\n  first_column: last_column_exclusive\r\n  last_line: last_line_exclusive\r\n  last_column: last_column_exclusive\r\n  last_line_exclusive\r\n  last_column_exclusive\r\n  range: [endRange, endRange]\r\n}\r\n\r\nextractSameLineLocationDataFirst = (numChars) -> ({range: [startRange], first_line, first_column}) -> {\r\n  first_line\r\n  first_column\r\n  last_line: first_line\r\n  last_column: first_column + numChars - 1\r\n  last_line_exclusive: first_line\r\n  last_column_exclusive: first_column + numChars\r\n  range: [startRange, startRange + numChars]\r\n}\r\n\r\nextractSameLineLocationDataLast = (numChars) -> ({range: [, endRange], last_line, last_column, last_line_exclusive, last_column_exclusive}) -> {\r\n  first_line: last_line\r\n  first_column: last_column - (numChars - 1)\r\n  last_line: last_line\r\n  last_column: last_column\r\n  last_line_exclusive\r\n  last_column_exclusive\r\n  range: [endRange - numChars, endRange]\r\n}\r\n\r\n# We don’t currently have a token corresponding to the empty space\r\n# between interpolation/JSX expression braces, so piece together the location\r\n# data by trimming the braces from the Interpolation’s location data.\r\n# Technically the last_line/last_column calculation here could be\r\n# incorrect if the ending brace is preceded by a newline, but\r\n# last_line/last_column aren’t used for AST generation anyway.\r\nemptyExpressionLocationData = ({interpolationNode: element, openingBrace, closingBrace}) ->\r\n  first_line:            element.locationData.first_line\r\n  first_column:          element.locationData.first_column + openingBrace.length\r\n  last_line:             element.locationData.last_line\r\n  last_column:           element.locationData.last_column - closingBrace.length\r\n  last_line_exclusive:   element.locationData.last_line\r\n  last_column_exclusive: element.locationData.last_column\r\n  range: [\r\n    element.locationData.range[0] + openingBrace.length\r\n    element.locationData.range[1] - closingBrace.length\r\n  ]\r\n"
  ]
}