{
  "version": 3,
  "file": "make-new-project.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\bin\\make-new-project.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# make-new-project.coffee\r\n\r\n# --- Before running, set these environment variables:\r\n#        PROJECT_ROOT_DIR - directory where you add projects\r\n#        PROJECT_PACKAGE_JSON - JSON string or file path\r\n#           - should have 'author' key\r\n#        PROJECT_INSTALLS - comma sep list of pkgs to install\r\n#        PROJECT_DEV_INSTALLS - comma sep list of dev pkgs to install\r\n#        PROJECT_NAME_PREFIX - e.g. '@jdeighan/' to prepend this to proj name\r\n#\r\n#     Usage: mnp <dirname>\r\n#        -c - clear out any existing directory\r\n#        -type=(website|electron|codemirror|parcel)\r\n#        -libs=<comma sep stubs>\r\n#        -bins=<comma sep stubs>\r\n#        -install=<comma sep pkgs>\r\n#        -installdev=<comma sep pkgs>\r\n\r\nimport {\r\n\tundef, defined, notdefined, execCmd, OL, nonEmpty,\r\n\tassert, croak, words, hasKey, execAndLogCmd,\r\n\t} from '@jdeighan/llutils'\r\nimport {getArgs} from '@jdeighan/llutils/cmd-args'\r\nimport {\r\n\tmkpath, isDir, mkDir, slurp, barf, clearDir,\r\n\tslurpJSON, barfJSON, touch, createFile,\r\n\t} from '@jdeighan/llutils/fs'\r\n\r\nconsole.log \"Starting make-new-project\"\r\n\r\ntype = undef\r\nlValidTypes = ['electron', 'codemirror', 'parcel']\r\nauthor = 'unknown'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- For example, isType('electron') will return true\r\n#     when type is 'codemirror'\r\n\r\nisType = (t) =>\r\n\tswitch t\r\n\t\twhen 'parcel'\r\n\t\t\treturn (type == 'parcel')\r\n\t\twhen 'electron'\r\n\t\t\treturn (type == 'electron') || (type == 'codemirror')\r\n\t\twhen 'codemirror'\r\n\t\t\treturn (type == 'codemirror')\r\n\t\twhen 'website'\r\n\t\t\treturn (type == 'parcel') || (type == 'vite')\r\n\t\telse\r\n\t\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n{_, c: clear, type, lib, bin, libs, bins, install, installdev\r\n\t} = getArgs(undef, {\r\n\t_: [1,1]\r\n\tc: 'boolean'\r\n\ttype: 'string'\r\n\tlib: 'string'     # comma separated stubs\r\n\tbin: 'string'     # comma separated stubs\r\n\tlibs: 'string'    # comma separated stubs\r\n\tbins: 'string'    # comma separated stubs\r\n\tinstall: 'string' # comma separated packages to install\r\n\tinstalldev: 'string' # comma separated packages to dev install\r\n\t})\r\n\r\n[dirname] = _\r\nif notdefined(libs) then libs = lib\r\nif notdefined(bins) then bins = bin\r\n\r\nif defined(type)\r\n\tconsole.log \"type = #{OL(type)}\"\r\n\tassert lValidTypes.includes(type), \"Bad type: #{OL(type)}\"\r\n\r\n# .............................................................\r\n\r\nrootDir = process.env.PROJECT_ROOT_DIR\r\nif ! isDir(rootDir)\r\n\tconsole.log \"\"\"\r\n\t\tPlease set env var PROJECT_ROOT_DIR to a valid directory\r\n\t\t\"\"\"\r\n\tprocess.exit()\r\n\r\n# === Create the new directory and cd to it\r\n\r\nnewDir = mkpath(rootDir, dirname)\r\nif isDir(newDir)\r\n\tif clear\r\n\t\tconsole.log \"Directory #{OL(newDir)} exists, clearing it out\"\r\n\t\tclearDir newDir\r\n\telse\r\n\t\tconsole.log \"Directory #{OL(newDir)} already exists\"\r\n\t\tprocess.exit()\r\nelse\r\n\tconsole.log \"Creating directory #{newDir}\"\r\n\tmkDir newDir\r\n\r\nprocess.chdir newDir\r\n\r\n# === Initialize npm, set up package.json file\r\n\r\nconsole.log \"Initializing npm\"\r\nexecCmd \"npm init -y\"\r\n\r\n# === Fix package.json file\r\n\r\nconsole.log \"Fixing package.json\"\r\nhJson = fixPkgJson()\r\nif hJson.dependencies || hJson.devDependencies\r\n\texecCmd \"npm install\"\r\n\r\n# === Install libraries specified on command line\r\n\r\nllutils_installed = false\r\n\r\nif defined(install)\r\n\tconsole.log \"Installing npm libs\"\r\n\tlNames = install.split(',').map((str) => str.trim())\r\n\tassert (lNames.length > 0), \"No names in 'install'\"\r\n\tfor name in lNames\r\n\t\tif (name == 'llutils')\r\n\t\t\tllutils_installed = true\r\n\t\texecCmd \"npm install #{name}\"\r\n\r\nif defined(installdev)\r\n\tconsole.log \"Installing npm libs for development\"\r\n\tlNames = installdev.split(',').map((str) => str.trim())\r\n\tassert (lNames.length > 0), \"No names in 'installdev'\"\r\n\tfor name in lNames\r\n\t\tif (name == 'llutils')\r\n\t\t\tllutils_installed = true\r\n\t\texecCmd \"npm install -D #{name}\"\r\n\r\nif ! llutils_installed\r\n\texecCmd \"npm install ava\"\r\n\r\n# === Initialize git\r\n\r\nconsole.log \"Initializing git\"\r\nexecCmd \"git init\"\r\nexecCmd \"git branch -m main\"\r\n\r\n# === Create standard directories\r\n\r\nconsole.log \"Making directories\"\r\nmkDir './src'\r\nmkDir './src/lib'\r\nmkDir './src/bin'\r\nmkDir './src/elements'\r\nmkDir './test'\r\n\r\n\r\nif hasKey(hJson, 'author')\r\n\tauthor = hJson.author\r\n\r\ninstalls = process.env.PROJECT_INSTALLS\r\nif nonEmpty(installs)\r\n\tfor pkg in words(installs)\r\n\t\tconsole.log \"Installing #{OL(pkg)}\"\r\n\t\texecCmd \"npm install #{pkg}\"\r\n\r\ndev_installs = process.env.PROJECT_DEV_INSTALLS\r\nif nonEmpty(dev_installs)\r\n\tfor pkg in words(dev_installs)\r\n\t\tconsole.log \"Installing (dev) #{OL(pkg)}\"\r\n\t\texecCmd \"npm install -D #{pkg}\"\r\n\r\n# === Create file README.md\r\n\r\nconsole.log \"Creating README.md\"\r\nbarf \"\"\"\r\n\tREADME.md file\r\n\t==============\r\n\r\n\r\n\t\"\"\", \"./README.md\"\r\n\r\n# === Create file .gitignore\r\n\r\nconsole.log \"Creating .gitignore\"\r\nbarf \"\"\"\r\n\tlogs/\r\n\tnode_modules/\r\n\ttypings/\r\n\t*.tsbuildinfo\r\n\t.npmrc\r\n\t/build\r\n\t/public\r\n\t/dist\r\n\r\n\t# dotenv environment variables file\r\n\t.env\r\n\t.env.test\r\n\r\n\ttest/temp*.*\r\n\t/.svelte-kit\r\n\t\"\"\", \"./.gitignore\"\r\n\r\n# === Create file .npmrc\r\n\r\nconsole.log \"Creating .npmrc\"\r\nbarf \"\"\"\r\nengine-strict=true\r\n# --- loglevel can be silent or warn\r\nloglevel=silent\r\n\t\"\"\", \"./.npmrc\"\r\n\r\nif isType('electron')\r\n\r\n\tconsole.log \"Creating src/main.coffee\"\r\n\tbarf \"\"\"\r\n\timport pathLib from 'node:path'\r\n\timport {app, BrowserWindow} from 'electron'\r\n\r\n\tdir = import.meta.dirname\r\n\tapp.on 'ready', () =>\r\n\t\twin = new BrowserWindow({\r\n\t\t\twidth: 800,\r\n\t\t\theight: 600\r\n\t\t\twebPreferences: {\r\n\t\t\t\tnodeIntegration: true\r\n\t\t\t\tpreload: pathLib.join(import.meta.dirname, 'preload.js')\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t# --- win.loadFile('src/index.html')\r\n\t\twin.loadURL(\"file://#{dir}/index.html\")\r\n\t\t\"\"\", \"./src/main.coffee\"\r\n\r\n\t# ..........................................................\r\n\r\n\tconsole.log \"Creating src/index.html\"\r\n\tbarf \"\"\"\r\n\t\t<!DOCTYPE html>\r\n\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\t\t\t\t<!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->\r\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\">\r\n\t\t\t\t<title>Electron App</title>\r\n\t\t\t</head>\r\n\t\t\t<body>\r\n\t\t\t\t<h1>Electron App, using:</h1>\r\n\t\t\t\t<p span id=\"node-version\">node-version</p>\r\n\t\t\t\t<p span id=\"chrome-version\">chrome-version</p>\r\n\t\t\t\t<p span id=\"electron-version\">electron-version</p>\r\n\t\t\t\tby <p id=\"myname\">My Name Here</p>\r\n\t\t\t\t<script src=\"./renderer.js\"></script>\r\n\t\t\t</body>\r\n\t\t</html>\r\n\t\t\"\"\", \"./src/index.html\"\r\n\r\n\t# ..........................................................\r\n\r\n\tconsole.log \"Creating src/preload.coffee\"\r\n\tbarf \"\"\"\r\n\t\t# --- preload.coffee has access to window,\r\n\t\t#     document and NodeJS globals\r\n\r\n\t\twindow.addEventListener 'DOMContentLoaded', () =>\r\n\t\t\treplaceText = (selector, text) =>\r\n\t\t\t\telem = document.getElementById(selector)\r\n\t\t\t\tif (elem)\r\n\t\t\t\t\telem.innerText = text\r\n\r\n\t\t\tfor dep in ['chrome','node','electron']\r\n\t\t\t\tstr = \"\\#{dep} version \\#{process.versions[dep]}\"\r\n\t\t\t\treplaceText \"\\#{dep}-version\", str\r\n\t\t\"\"\", \"./src/preload.coffee\"\r\n\r\n\t# ..........................................................\r\n\r\n\tconsole.log \"Creating src/renderer.coffee\"\r\n\tbarf \"\"\"\r\n\t\t# --- preload.coffee has access to window and document\r\n\r\n\t\telem = document.getElementById('myname')\r\n\t\tif elem\r\n\t\t\telem.innerText = '#{author}'\r\n\t\telse\r\n\t\t\tconsole.log \"No element with id 'myname'\"\r\n\t\t\"\"\", \"./src/renderer.coffee\"\r\n\r\n\t# ..........................................................\r\n\r\n\tconsole.log \"Installing (dev) \\\"electron\\\"\"\r\n\texecCmd \"npm install -D electron\"\r\n\r\nconsole.log \"DONE\"\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- 1. Read in current package.json\r\n#     2. get keys from env var PROJECT_PACKAGE_JSON\r\n#     3. overwrite keys in package.json with #2 keys\r\n#     4. adjust name if env var PROJECT_NAME_PREFIX is set\r\n\r\nfixPkgJson = () =>\r\n\r\n\thJson = slurpJSON('./package.json')\r\n\tpkgJson = process.env.PROJECT_PACKAGE_JSON\r\n\tif nonEmpty(pkgJson)\r\n\t\t# --- Can be either a JSON string or a file path\r\n\t\tif (pkgJson.indexOf('{') == 0)\r\n\t\t\thSetKeys = JSON.parse(pkgJson)\r\n\t\telse\r\n\t\t\thSetKeys = JSON.parse(slurp(pkgJson))\r\n\t\tObject.assign hJson, hSetKeys\r\n\t\tprefix = process.env.PROJECT_NAME_PREFIX\r\n\t\tif nonEmpty(prefix)\r\n\t\t\thJson.name = \"#{prefix}#{hJson.name}\"\r\n\r\n\t\thJson.description = \"A #{type} app\"\r\n\t\tif isType('electron')\r\n\t\t\thJson.main = \"src/main.js\"\r\n\t\t\thJson.scripts.start = \"npm run build && electron .\"\r\n\t\telse if isType('website')\r\n\t\t\thJson.main = \"src/index.html\"\r\n\r\n\t\tif isType('parcel')\r\n\t\t\thJson.source = \"src/index.html\"\r\n\t\t\thJson.scripts.start = \"parcel\"\r\n\t\t\thJson.scripts.build = \"parcel build\"\r\n\r\n\t\tif defined(libs)\r\n\t\t\tconsole.log \"Creating libs and 'export' key\"\r\n\t\t\tif ! hasKey(hJson, 'exports')\r\n\t\t\t\thJson.exports = {}\r\n\t\t\tlNames = libs.split(',').map((str) => str.trim())\r\n\t\t\tassert (lNames.length > 0), \"No names in 'libs'\"\r\n\t\t\tif ! hasKey(hJson.exports, \".\")\r\n\t\t\t\thJson.exports[\".\"] = \"./src/lib/#{lNames[0]}.js\"\r\n\t\t\tfor name in lNames\r\n\t\t\t\tcreateFile \"./src/lib/#{name}.coffee\", \"\"\"\r\n\t\t\t\t\t# --- #{name}.coffee\r\n\t\t\t\t\t\"\"\"\r\n\t\t\t\tif llutils_installed\r\n\t\t\t\t\tcreateFile \"./test/#{name}.test.coffee\", \"\"\"\r\n\t\t\t\t\t\t# --- #{name}.test.offee\r\n\r\n\t\t\t\t\t\timport * as lib from '#{hJson.name}/#{name}'\r\n\t\t\t\t\t\tObject.assign(global, lib)\r\n\t\t\t\t\t\timport * as lib2 from '@jdeighan/llutils/utest'\r\n\t\t\t\t\t\tObject.assign(global, lib2)\r\n\r\n\t\t\t\t\t\tequal 2+2, 4\r\n\t\t\t\t\t\t\"\"\"\r\n\t\t\t\telse\r\n\t\t\t\t\tcreateFile \"./test/#{name}.test.coffee\", \"\"\"\r\n\t\t\t\t\t\t# --- #{name}.test.offee\r\n\r\n\t\t\t\t\t\timport * as lib from '#{hJson.name}/#{name}'\r\n\t\t\t\t\t\tObject.assign(global, lib)\r\n\t\t\t\t\t\timport test from 'ava'\r\n\r\n\t\t\t\t\t\ttest \"line 7\", (t) =>\r\n\t\t\t\t\t\t\tt.is 2+2, 4\r\n\r\n\t\t\t\t\t\t\"\"\"\r\n\t\t\t\thJson.exports[\"./#{name}\"] = \"./src/lib/#{name}.js\"\r\n\t\t\thJson.exports[\"./package.json\"] = \"./package.json\"\r\n\r\n\t\tif defined(bins)\r\n\t\t\tconsole.log \"Creating bins and 'bin' key\"\r\n\t\t\tif ! hasKey(hJson, 'bin')\r\n\t\t\t\thJson.bin = {}\r\n\t\t\tlNames = bins.split(',').map((str) => str.trim())\r\n\t\t\tassert (lNames.length > 0), \"No names in 'bins'\"\r\n\t\t\tfor name in lNames\r\n\t\t\t\ttouch \"./src/bin/#{name}.coffee\"\r\n\t\t\t\thJson.bin[name] = \"./src/bin/#{name}.js\"\r\n\r\n\tbarfJSON(hJson, './package.json')\r\n\treturn hJson\r\n"
  ]
}