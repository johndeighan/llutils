{
  "version": 3,
  "file": "for-each-file.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\bin\\for-each-file.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# for-each-file.coffee\r\n\r\n# --- Using option -debug prevents any execution\r\n#        therefore option -cmd is not required\r\n#        but if provided, allows output of command\r\n#        that would be executed\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, execCmdAsync, stripCR,\r\n\tisString, sortArrayOfHashes, assert, croak, LOG,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {getArgs} from '@jdeighan/llutils/cmd-args'\r\nimport {\r\n\tisFile, mkpath, allFilesMatching, relpath,\r\n\t} from '@jdeighan/llutils/fs'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Usage:\r\n#    for-each-file <glob>... -cmd=\"coffee -cm <file>\"\r\n\r\nhCmdArgs = getArgs(undef, {\r\n\t_: [1, Number.MAX_VALUE]   # --- file paths or globs\r\n\tcmd: 'string'   # --- internal '<file>' will be replaced with file path\r\n\td: 'boolean'\r\n\t})\r\n\r\n{_: lGlobs, cmd: cmdStr, d: debug} = hCmdArgs\r\n\r\nif defined(cmdStr)\r\n\tassert (cmdStr.indexOf('<file>') != -1),\r\n\t\t\t\"missing '<file>' in cmd string #{OL(cmdStr)}\"\r\n\r\n# --- An array of {filePath, cmd, output, err}\r\nlFileRecs = []\r\nsep = '-'.repeat(40)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nhandleFile = (filePath) =>\r\n\r\n\tassert isFile(filePath), \"Not a file: #{OL(filePath)}\"\r\n\r\n\thRec = {\r\n\t\tfilePath\r\n\t\t}\r\n\tif defined(cmdStr)\r\n\t\thRec.cmd = cmdStr.replaceAll('<file>', filePath)\r\n\t\tif ! debug\r\n\t\t\ttry\r\n\t\t\t\t# --- execCmd() returns a promise\r\n\t\t\t\thRec.promise = execCmdAsync(hRec.cmd)\r\n\r\n\t\t\tcatch err\r\n\t\t\t\tLOG \"ERROR: #{err.message}\"\r\n\t\t\t\thRec.err = err\r\n\tlFileRecs.push hRec\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nhandleGlob = (glob) =>\r\n\r\n\tfor hFile from allFilesMatching(glob)\r\n\t\thandleFile(hFile.filePath)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ngenOutput = () =>\r\n\r\n\t# --- Sort alphabetically by filePath\r\n\tfor hRec in sortArrayOfHashes(lFileRecs, 'filePath')\r\n\t\t{cmd, filePath, promise, err} = hRec\r\n\t\trelPath = relpath(filePath)\r\n\t\tif debug\r\n\t\t\tif defined(cmd)\r\n\t\t\t\tLOG \"CMD: #{OL(cmd)}\"\r\n\t\t\telse\r\n\t\t\t\tLOG \"FILE: #{OL(filePath)}\"\r\n\t\telse\r\n\t\t\tif err\r\n\t\t\t\tLOG err.message\r\n\t\t\telse\r\n\t\t\t\ttry\r\n\t\t\t\t\t{stdout, stderr} = await promise\r\n\t\t\t\t\tif defined(stdout)\r\n\t\t\t\t\t\tassert isString(stdout), \"not a string: #{OL(stdout)}\"\r\n\t\t\t\t\t\tDUMP stdout, \"#{relPath}\"\r\n\t\t\t\t\tif defined(stderr)\r\n\t\t\t\t\t\tassert isString(stderr), \"not a string: #{OL(stderr)}\"\r\n\t\t\t\t\t\tif (stderr.length > 0)\r\n\t\t\t\t\t\t\tDUMP stderr, \"STDERR #{relPath}\"\r\n\t\t\t\tcatch err\r\n\t\t\t\t\tLOG err.message\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Usage:\r\n#    for-each-file <glob>... -cmd=\"coffee -cm <file>\"\r\n\r\nif debug\r\n\tLOG \"DEBUGGING ON in for-each-file\"\r\n\tDUMP hCmdArgs, 'hCmdArgs'\r\n\r\nassert defined(debug) || defined(cmdStr),\r\n\t\t\"-cmd option required unless debugging or listing\"\r\n\r\n# --- Cycle through all globs/file paths\r\n#     NOTE: any item that contains '*' or '?' is a glob\r\n\r\nfor str in lGlobs\r\n\tif str.includes('*') || str.includes('?')\r\n\t\thandleGlob(str)\r\n\telse\r\n\t\thandleFile(mkpath(str))\r\n\r\ngenOutput()\r\n"
  ]
}