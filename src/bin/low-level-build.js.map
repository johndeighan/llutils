{
  "version": 3,
  "file": "low-level-build.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\bin\\low-level-build.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# low-level-build.coffee\r\n#\r\n# --- Designed to run in ANY project that installs @jdeighan/llutils\r\n\r\nimport chokidar from 'chokidar'\r\n\r\nimport {\r\n\tundef, defined, notdefined, assert, hasKey, keys,\r\n\tisEmpty, nonEmpty, add_s, OL, gen2block, tla,\r\n\t} from '@jdeighan/llutils'\r\nimport {execCmd} from '@jdeighan/llutils/exec-utils'\r\nimport {getArgs} from '@jdeighan/llutils/cmd-args'\r\nimport {\r\n\tisProjRoot, barfJSON, barfPkgJSON, isFile, barf,\r\n\tslurpJSON, slurpPkgJSON, fileExt, withExt, mkpath,\r\n\tallFilesMatching, readTextFile, newerDestFileExists,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {peggify} from '@jdeighan/llutils/peggy'\r\nimport {\r\n\tprocFiles, brew, cieloPreProcess, sveltify,\r\n\t} from '@jdeighan/llutils/file-processor'\r\nimport {hLLBConfig} from '@jdeighan/llutils/llb-config'\r\n\r\necho = true\r\ndoLog = (str) =>\r\n\tif echo\r\n\t\tconsole.log str\r\n\treturn\r\n\r\nshebang = \"#!/usr/bin/env node\"\r\n\r\n# ---------------------------------------------------------------------------\r\n# Usage:   node src/bin/low-level-build.js\r\n\r\n# ---------------------------------------------------------------------------\r\n# 1. Make sure we're in a project root directory\r\n\r\ndebugger\r\nassert isProjRoot('.', 'strict'), \"Not in package root dir\"\r\n\r\n{\r\n\t_: lNonOptions\r\n\tq: quiet\r\n\tf: force\r\n\td: debug\r\n\tw: watch\r\n\troot\r\n\t} = getArgs {\r\n\t_: {\r\n\t\tmin: 0\r\n\t\tmax: 1\r\n\t\t}\r\n\tq: {type: 'boolean'}\r\n\tf: {type: 'boolean'}\r\n\td: {type: 'boolean'}\r\n\tw: {type: 'boolean'}\r\n\troot: {type: 'string'}\r\n\t}\r\n\r\nif notdefined(root)\r\n\troot = '.'\r\nif (quiet == true)\r\n\techo = false\r\n\r\n# ---------------------------------------------------------------------------\r\n# Process all files\r\n\r\ndebugger\r\nhNumProcessed = {}    # --- <ext> -> <n>\r\nlExtKeys = keys(hLLBConfig).filter((key) => key.startsWith('.'))\r\nfor ext in lExtKeys\r\n\t{lFuncs, outExt} = hLLBConfig[ext]\r\n\tn = 0\r\n\r\n\t# --- possible options: force, debug, logOnly, echo\r\n\thNumProcessed[ext] = procFiles \"#{root}/**/*#{ext}\", lFuncs, outExt, {\r\n\t\techo\r\n\t\tforce\r\n\t\tdebug\r\n\t\tlogOnly: debug\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nhBin = {}    # --- keys to add in package.json / bin\r\n\r\n# ---------------------------------------------------------------------------\r\n# 4. For every *.js file in the 'src/bin' directory\r\n#       - add a shebang line if not present\r\n#       - save <stub>: <jsPath> in hBin\r\n#       - if has a tla, save <tla>: <jsPath> in hBin\r\n\r\nfor {relPath, stub} from allFilesMatching('./src/bin/**/*.js')\r\n\t{reader} = readTextFile relPath\r\n\tfirstLine = reader().next().value\r\n\tif !firstLine.match(/^\\#\\!/)\r\n\t\tcontents = shebang + \"\\n\" + gen2block(reader)\r\n\t\tbarf contents, relPath\r\n\thBin[stub] = relPath\r\n\tif defined(short_name = tla(stub))\r\n\t\thBin[short_name] = relPath\r\n\r\nif nonEmpty(hBin)\r\n\thJson = slurpPkgJSON()\r\n\tif ! hasKey(hJson, 'bin')\r\n\t\tdoLog \"   - add key 'bin'\"\r\n\t\thJson.bin = {}\r\n\tfor key,value of hBin\r\n\t\tif (hJson.bin[key] != value)\r\n\t\t\tdoLog \"   - add bin/#{key} = #{value}\"\r\n\t\t\thJson.bin[key] = value\r\n\tbarfPkgJSON hJson\r\n\r\n# --- log number of files processed\r\n\r\nfor ext in keys(hNumProcessed)\r\n\tn = hNumProcessed[ext]\r\n\tif defined(n) && (n > 0)\r\n\t\tconsole.log \"#{n} *#{ext} file#{add_s(n)} compiled\"\r\n\r\n# --- watch for file changes\r\n\r\nif watch\r\n\tconsole.log \"watching for file changes...\"\r\n\tglob = \"**/*.{coffee,peggy,cielo,svelte}\"\r\n\thOptions = {\r\n\t\tpersistent: true\r\n\t\tignoreInitial: true\r\n\t\tawaitWriteFinish: {\r\n\t\t\tstabilityThreshold: 1000,\r\n\t\t\tpollInterval: 100\r\n\t\t\t}\r\n\t\t}\r\n\tchokidar.watch(glob, hOptions).on 'all', (eventType, path) =>\r\n\t\tif path.match(/node_modules/)\r\n\t\t\treturn\r\n\t\tpath = mkpath(path)\r\n\t\text = fileExt(path)\r\n\t\t{lFuncs, outExt} = hLLBConfig[ext]\r\n\t\tswitch eventType\r\n\t\t\twhen 'add','change'\r\n\t\t\t\tprocFiles path, lFuncs, outExt\r\n\t\t\twhen 'unlink'\r\n\t\t\t\texecCmd \"rm #{withExt(path, outExt)}\"\r\n"
  ]
}