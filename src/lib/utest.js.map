{
  "version": 3,
  "file": "utest.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# utest.coffee\r\n\r\nimport test from 'ava'\r\n\r\nimport {\r\n\tundef, defined, notdefined, rtrim, isEmpty, nonEmpty, OL,\r\n\tisString, isNumber, isArray, isClass, isFunction, isRegExp,\r\n\tassert, croak, blockToArray,\r\n\t} from '@jdeighan/llutils'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Available tests w/num required params\r\n#        equal 2\r\n#        notequal 2\r\n#        like 2\r\n#        samelines 2\r\n#        truthy 1\r\n#        falsy 1\r\n#        includes 2\r\n#        matches 2\r\n#        fails 1 (a function)\r\n#        throws 1 (a function) - check throws a specific error type\r\n#        succeeds 1 (a function)\r\n# ---------------------------------------------------------------------------\r\n\r\nnextID = 1\r\n\r\nexport class UnitTester\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@depth = 0\r\n\r\n\t# ........................................................................\r\n\t# --- returns, e.g. \"test 1\"\r\n\r\n\tgetLabel: (tag=undef) =>\r\n\r\n\t\tif defined(tag)\r\n\t\t\tassert isString(tag), \"tag = #{OL(tag)}\"\r\n\t\t\tlabel = \"test #{nextID} (#{tag})\"\r\n\t\telse\r\n\t\t\tlabel = \"test #{nextID}\"\r\n\t\tnextID += 1\r\n\t\treturn label\r\n\r\n\t# ........................................................................\r\n\r\n\ttransformValue: (val) -> return val\r\n\ttransformExpected: (expected) -> return expected\r\n\r\n\t# ........................................................................\r\n\r\n\tbegin: (val=undef, expected=undef, tag=undef) ->\r\n\r\n\t\tif (tag == 'symbol')\r\n\t\t\treturn [\"===== #{val} =====\"]\r\n\r\n\t\tif (@depth == 0)\r\n\t\t\t@beforeEachTest()\r\n\t\t@depth += 1\r\n\t\tlabel = @getLabel(tag)\r\n\t\tif defined(val)\r\n\t\t\tval = @transformValue(val)\r\n\t\tif defined(expected)\r\n\t\t\texpected = @transformExpected(expected)\r\n\t\treturn [label, val, expected]\r\n\r\n\t# ........................................................................\r\n\r\n\tend: () ->\r\n\r\n\t\t@depth -= 1\r\n\t\tif (@depth == 0)\r\n\t\t\t@afterEachTest()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tbeforeEachTest: () ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tafterEachTest: () ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tnorm: (str) ->\r\n\r\n\t\treturn rtrim(str).replaceAll(\"\\r\", \"\")\r\n\r\n\t# ..........................................................\r\n\t# ..........................................................\r\n\r\n\tsymbol: (label) ->\r\n\r\n\t\t[label] = @begin(label, undef, 'symbol')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.is(1, 1)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tequal: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'equal')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.deepEqual(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tnotequal: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'notequal')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.notDeepEqual(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tlike: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'like')\r\n\t\tif isString(val) && isString(expected)\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.is(@norm(val), @norm(expected))\r\n\t\telse if isNumber(val) && isNumber(expected)\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.truthy (Math.abs(val - expected) < 0.0001)\r\n\t\telse\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.like(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsamelines: (val, expected) ->\r\n\r\n\t\tassert isString(val), \"not a string: #{OL(val)}\"\r\n\t\tassert isString(expected), \"not a string: #{OL(expected)}\"\r\n\t\t[label, val, expected] = @begin(val, expected, 'samelines')\r\n\r\n\t\tlValLines = blockToArray(val).filter((line) => return nonEmpty(line)).sort()\r\n\t\tlExpLines = blockToArray(expected).filter((line) => return nonEmpty(line)).sort()\r\n\r\n\t\ttest label, (t) =>\r\n\t\t\tt.deepEqual(lValLines, lExpLines)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttruthy: (bool) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'truthy')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(bool)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfalsy: (bool) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'falsy')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.falsy(bool)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- NOTE: both strings and arrays have an includes() method\r\n\r\n\tincludes: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'includes')\r\n\t\tassert isString(val) || isArray(val), \"Not a string or array: #{OL(val)}\"\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(val.includes(expected))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tmatches: (val, regexp) ->\r\n\r\n\t\tassert isString(val), \"Not a string: #{OL(val)}\"\r\n\t\t[label, val] = @begin(val, undef, 'matches')\r\n\r\n\t\t# --- convert strings to regular expressions\r\n\t\tif isString(regexp)\r\n\t\t\tregexp = new RegExp(regexp)\r\n\t\tassert isRegExp(regexp), \"Not a string or regexp: #{OL(regexp)}\"\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(defined(val.match(regexp)))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfails: (func) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'fails')\r\n\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\r\n\t\ttest label, (t) => t.false(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- with errClass == undef, same as fails()\r\n\r\n\tthrows: (func, errClass=undef) ->\r\n\r\n\t\tif notdefined(errClass)\r\n\t\t\treturn @fails(func)\r\n\r\n\t\t[label] = @begin(undef, undef, 'throws')\r\n\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\tassert isClass(errClass) || isFunction(errClass),\r\n\t\t\t\"Not a class or function: #{OL(errClass)}\"\r\n\t\terrObj = undef\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\terrObj = err\r\n\t\t\tok = false\r\n\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(!ok && (errObj instanceof errClass))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsucceeds: (func) ->\r\n\r\n\t\tassert (typeof func == 'function'), \"function expected\"\r\n\t\t[label] = @begin(undef, undef, 'succeeds')\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tconsole.error err\r\n\t\t\tok = false\r\n\r\n\t\ttest label, (t) => t.truthy(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport u = new UnitTester()\r\nexport symbol = (arg1) => return u.symbol(arg1)\r\nexport equal = (arg1, arg2) => return u.equal(arg1, arg2)\r\nexport notequal = (arg1, arg2) => return u.notequal(arg1, arg2)\r\nexport like = (arg1, arg2) => return u.like(arg1, arg2)\r\nexport samelines = (arg1, arg2) => return u.samelines(arg1, arg2)\r\nexport truthy = (arg) => return u.truthy(arg)\r\nexport falsy = (arg) => return u.falsy(arg)\r\nexport includes = (arg1, arg2) => return u.includes(arg1, arg2)\r\nexport matches = (str, regexp) => return u.matches(str, regexp)\r\nexport fails = (func) => return u.fails(func)\r\nexport throws = (func, errClass) => return u.throws(func, errClass)\r\nexport succeeds = (func) => return u.succeeds(func)\r\n"
  ]
}