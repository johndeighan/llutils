{
  "version": 3,
  "file": "utest.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# utest.coffee\r\n\r\nimport test from 'ava'\r\n\r\nimport {\r\n\tundef, defined, notdefined, rtrim, nonEmpty, OL,\r\n\tisString, isNumber, isArray, isClass, isRegExp,\r\n\tisFunction, isAsyncFunction, isInteger,\r\n\tassert, croak, blockToArray, untabify,\r\n\t} from '@jdeighan/llutils'\r\nimport {execCmd} from '@jdeighan/llutils/exec-utils'\r\nimport {isFile, slurp, fileExt} from '@jdeighan/llutils/fs'\r\nimport {getMyOutsideCaller} from '@jdeighan/llutils/v8-stack'\r\nimport {toNICE} from '@jdeighan/llutils/to-nice'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Available tests w/num required params\r\n#        equal 2\r\n#        notequal 2\r\n#        like 2\r\n#        samelines 2\r\n#        truthy 1\r\n#        falsy 1\r\n#        includes 2\r\n#        matches 2\r\n#        fails 1 (function)\r\n#        throws 2 (function, error class)\r\n#           - check throws a specific error type\r\n#        succeeds 1 (a function)\r\n# ---------------------------------------------------------------------------\r\n\r\nnextID = 1\r\n\r\nexport class UnitTester\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@depth = 0\r\n\t\t@debug = false\r\n\t\t@hFound = {}\r\n\r\n\t# ........................................................................\r\n\t# --- returns, e.g. \"test 1\"\r\n\r\n\tgetLabel: (tag=undef) =>\r\n\r\n\t\t# --- We need to figure out the line number of the caller\r\n\t\t{filePath, line, column} = getMyOutsideCaller()\r\n\t\tif @debug\r\n\t\t\tconsole.log \"getLabel()\"\r\n\t\t\tconsole.log \"   filePath = '#{filePath}'\"\r\n\t\t\tconsole.log \"   line = #{line}, col = #{column}\"\r\n\r\n\t\tassert isInteger(line), \"getMyOutsideCaller() line = #{OL(line)}\"\r\n\t\tassert (fileExt(filePath) == '.js') || (fileExt(filePath) == '.coffee'),\r\n\t\t\t\"caller not a JS or Coffee file: #{OL(filePath)}\"\r\n\r\n\t\twhile @hFound[line]\r\n\t\t\tline += 1000\r\n\t\t@hFound[line] = true\r\n\r\n\t\treturn \"line #{line}\"\r\n\r\n\t# ........................................................................\r\n\r\n\ttransformValue: (val) -> return val\r\n\ttransformExpected: (expected) -> return expected\r\n\ttransformFunction: (func) -> return func\r\n\r\n\t# ........................................................................\r\n\r\n\tbegin: () ->\r\n\r\n\t\tif (@depth == 0)\r\n\t\t\t@beforeEachTest()\r\n\t\t@depth += 1\r\n\t\treturn\r\n\r\n\t# ........................................................................\r\n\r\n\tend: () ->\r\n\r\n\t\t@depth -= 1\r\n\t\tif (@depth == 0)\r\n\t\t\t@afterEachTest()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tbeforeEachTest: () ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tafterEachTest: () ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tnorm: (str) ->\r\n\r\n\t\treturn rtrim(str).replaceAll(\"\\r\", \"\")\r\n\r\n\t# ..........................................................\r\n\t#                  TESTS\r\n\t# ..........................................................\r\n\r\n\tequal: (val, expected) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('equal'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\texpected = await @transformExpected(expected)\r\n\t\t\tt.deepEqual(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tnotequal: (val, expected) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('notequal'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\texpected = await @transformExpected(expected)\r\n\t\t\tt.notDeepEqual(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tlike: (val, expected) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('like'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\texpected = await @transformExpected(expected)\r\n\t\t\tif isString(val) && isString(expected)\r\n\t\t\t\tt.is(@norm(val), @norm(expected))\r\n\t\t\telse if isNumber(val) && isNumber(expected)\r\n\t\t\t\tt.truthy (Math.abs(val - expected) < 0.0001)\r\n\t\t\telse\r\n\t\t\t\tt.like(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsamelines: (val, expected) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('samelines'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\texpected = await @transformExpected(expected)\r\n\t\t\tassert isString(val), \"not a string: #{OL(val)}\"\r\n\t\t\tassert isString(expected), \"not a string: #{OL(expected)}\"\r\n\r\n\t\t\tlValLines = blockToArray(val)\r\n\t\t\t\t\t.filter((line) => return nonEmpty(line))\r\n\t\t\t\t\t.sort()\r\n\t\t\tlExpLines = blockToArray(expected)\r\n\t\t\t\t\t.filter((line) => return nonEmpty(line))\r\n\t\t\t\t\t.sort()\r\n\r\n\t\t\tt.deepEqual(lValLines, lExpLines)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsamelist: (val, expected) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('samelist'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\texpected = await @transformExpected(expected)\r\n\t\t\tassert isArray(val), \"not an array: #{OL(val)}\"\r\n\t\t\tassert isArray(expected), \"not an array: #{OL(expected)}\"\r\n\t\t\tt.deepEqual(val.sort(), expected.sort())\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttruthy: (val) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('truthy'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\tt.truthy(val)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfalsy: (val) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('falsy'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\tt.falsy(val)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tshowInConsole: (value, format='nice') ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('showInConsole'), (t) =>\r\n\t\t\tswitch format.toLowerCase()\r\n\t\t\t\twhen 'json'\r\n\t\t\t\t\tconsole.log JSON.stringify(value, null, 3)\r\n\t\t\t\telse\r\n\t\t\t\t\tconsole.log untabify(toNICE(value))\r\n\t\t\tt.truthy(true)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- NOTE: both strings and arrays have an includes() method\r\n\r\n\tincludes: (val, expected) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('includes'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\texpected = await @transformExpected(expected)\r\n\t\t\tassert isString(val) || isArray(val), \"Not a string or array: #{OL(val)}\"\r\n\t\t\tt.truthy(val.includes(expected))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tmatches: (val, pattern) ->\r\n\r\n\t\t@begin()\r\n\r\n#\t\tdebug = val.startsWith('test/file-processor')\r\n#\t\tif debug\r\n#\t\t\tconsole.log \"IN match()\"\r\n\r\n\t\ttest @getLabel('matches'), (t) =>\r\n\t\t\tval = await @transformValue(val)\r\n\t\t\tassert isString(val), \"Not a string: #{OL(val)}\"\r\n\r\n\t\t\t# --- if pattern is a string, that string must exist within val\r\n\t\t\tif isString(pattern)\r\n\t\t\t\tpos = val.indexOf(pattern)\r\n\t\t\t\tt.truthy(pos >= 0)\r\n\t\t\telse\r\n\t\t\t\tassert isRegExp(pattern), \"Not a string or regexp: #{OL(pattern)}\"\r\n\t\t\t\tt.truthy(defined(val.match(pattern)))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfileExists: (filePath, contents=undef) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('fileExists'), (t) =>\r\n\t\t\tt.truthy(isFile(filePath))\r\n\t\t\tif defined(contents)\r\n\t\t\t\tt.is slurp(filePath).trim(), contents.trim()\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tcompiles: (filePath) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('compiles'), (t) =>\r\n\t\t\ttry\r\n\t\t\t\tswitch ext = fileExt(filePath)\r\n\t\t\t\t\twhen '.js'\r\n\t\t\t\t\t\texecCmd \"node -c #{filePath}\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcroak \"Unsupported file type: #{ext}\"\r\n\t\t\t\tok = true\r\n\t\t\tcatch err\r\n\t\t\t\tconsole.log err\r\n\t\t\t\tok = false\r\n\t\t\tt.truthy(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfails: (func) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('fails'), (t) =>\r\n\t\t\tfunc = await @transformFunction(func)\r\n\t\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\t\t[ok, err] = await @executesOK(func)\r\n\t\t\tt.falsy(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- with errClass == undef, same as fails()\r\n\r\n\tthrows: (func, errClass=undef) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('throws'), (t) =>\r\n\t\t\tfunc = await @transformFunction(func)\r\n\t\t\tassert defined(errClass), \"Missing error class\"\r\n\t\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\t\tassert isClass(errClass) || isFunction(errClass),\r\n\t\t\t\t\"Not a class or function: #{OL(errClass)}\"\r\n\t\t\t[ok, err] = await @executesOK(func)\r\n\t\t\tt.truthy(!ok && (err instanceof errClass))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsucceeds: (func) ->\r\n\r\n\t\t@begin()\r\n\t\ttest @getLabel('succeeds'), (t) =>\r\n\t\t\tfunc = await @transformFunction(func)\r\n\t\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\t\t[ok, err] = await @executesOK(func)\r\n\r\n\t\t\tt.truthy(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t#           END TESTS\r\n\t# ..........................................................\r\n\r\n\texecutesOK: (func) ->\r\n\r\n#\t\tif isAsyncFunction(func)\r\n\t\ttry\r\n\t\t\tawait func()\r\n\t\t\treturn [true, undef]\r\n\t\tcatch err\r\n\t\t\treturn [false, err]\r\n#\t\telse\r\n#\t\t\ttry\r\n#\t\t\t\tfunc()\r\n#\t\t\t\treturn [true, undef]\r\n#\t\t\tcatch err\r\n#\t\t\t\treturn [false, err]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nu = new UnitTester()\r\nexport equal = (arg1, arg2) => return u.equal(arg1, arg2)\r\nexport notequal = (arg1, arg2) => return u.notequal(arg1, arg2)\r\nexport like = (arg1, arg2) => return u.like(arg1, arg2)\r\nexport samelines = (arg1, arg2) => return u.samelines(arg1, arg2)\r\nexport truthy = (arg) => return u.truthy(arg)\r\nexport falsy = (arg) => return u.falsy(arg)\r\nexport showInConsole = (arg, format) => return u.showInConsole(arg, format)\r\nexport includes = (arg1, arg2) => return u.includes(arg1, arg2)\r\nexport matches = (str, regexp) => return u.matches(str, regexp)\r\nexport fails = (func) => return u.fails(func)\r\nexport throws = (func, errClass) => return u.throws(func, errClass)\r\nexport succeeds = (func) => return u.succeeds(func)\r\nexport fileExists = (filePath, contents) => return u.fileExists(filePath, contents)\r\nexport compiles = (filePath) => return u.compiles(filePath)\r\n"
  ]
}