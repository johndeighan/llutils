{
  "version": 3,
  "file": "utest.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\utest.coffee"
  ],
  "names": [],
  "mappings": "AAAc;AAAA,IAAA;;AAEd,OAAO,IAAP,MAAA;;AAEA,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,KAD7B;EACoC,OADpC;EAC6C,QAD7C;EACuD,EADvD;EAEC,QAFD;EAEW,QAFX;EAEqB,OAFrB;EAE8B,OAF9B;EAEuC,UAFvC;EAEmD,QAFnD;EAE6D,SAF7D;EAGC,MAHD;EAGS,KAHT;EAGgB,YAHhB;EAG8B,QAH9B;CAAA,MAAA;;AAKA,OAAA;EAAQ,OAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;EAAuB,OAAvB;CAAA,MAAA;;AACA,OAAA;EAAQ,kBAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,MAAR;CAAA,MAAA,4BAZc;;;;;;;;;;;;;;;;AA6Bd,MAAA,GAAS;;AAET,OAAA,IAAa,aAAN,MAAA,WAAA;EAEN,WAAa,CAAA,CAAA,EAAA;;;QASb,CAAA,eAAA,CAAA;IAPC,IAAC,CAAA,KAAD,GAAS;IACT,IAAC,CAAA,KAAD,GAAS;IACT,IAAC,CAAA,MAAD,GAAU,CAAA;EAJE;;EASb,QAAU,CAAC,MAAI,KAAL,CAAA;AAEX,QAAA,MAAA,EAAA,QAAA,EAAA,IAAA;;IACE,CAAA,CAAC,QAAD,EAAW,IAAX,EAAiB,MAAjB,CAAA,GAA2B,kBAAA,CAAA,CAA3B;IACA,IAAG,IAAC,CAAA,KAAJ;MACC,OAAO,CAAC,GAAR,CAAY,YAAZ;MACA,OAAO,CAAC,GAAR,CAAY,CAAA,eAAA,CAAA,CAAkB,QAAlB,CAAA,CAAA,CAAZ;MACA,OAAO,CAAC,GAAR,CAAY,CAAA,UAAA,CAAA,CAAa,IAAb,CAAA,QAAA,CAAA,CAA4B,MAA5B,CAAA,CAAZ,EAHD;;IAKA,MAAA,CAAO,SAAA,CAAU,IAAV,CAAP,EAAwB,CAAA,4BAAA,CAAA,CAA+B,EAAA,CAAG,IAAH,CAA/B,CAAA,CAAxB;IACA,MAAA,CAAO,CAAC,OAAA,CAAQ,QAAR,CAAA,KAAqB,KAAtB,CAAA,IAAgC,CAAC,OAAA,CAAQ,QAAR,CAAA,KAAqB,SAAtB,CAAvC,EACC,CAAA,gCAAA,CAAA,CAAmC,EAAA,CAAG,QAAH,CAAnC,CAAA,CADD;AAGA,WAAM,IAAC,CAAA,MAAM,CAAC,IAAD,CAAb;MACC,IAAA,IAAQ;IADT;IAEA,IAAC,CAAA,MAAM,CAAC,IAAD,CAAP,GAAgB;AAEhB,WAAO,CAAA,KAAA,CAAA,CAAQ,IAAR,CAAA;EAjBE,CATX;;;EA8BC,cAAgB,CAAC,GAAD,CAAA;AAAS,WAAO;EAAhB;;EAChB,iBAAmB,CAAC,QAAD,CAAA;AAAc,WAAO;EAArB,CA/BpB;;;EAmCC,KAAO,CAAC,MAAI,KAAL,EAAY,WAAS,KAArB,EAA4B,MAAI,KAAhC,CAAA;AAER,QAAA,GAAA,EAAA;IAAE,IAAI,GAAA,KAAO,QAAX;AACC,aAAO,CAAC,CAAA,MAAA,CAAA,CAAS,GAAT,CAAA,MAAA,CAAD,EADR;;IAGA,IAAI,IAAC,CAAA,KAAD,KAAU,CAAd;MACC,IAAC,CAAA,cAAD,CAAA,EADD;;IAEA,IAAC,CAAA,KAAD,IAAU;IACV,KAAA,GAAQ,IAAC,CAAA,QAAD,CAAU,GAAV;IACR,IAAG,OAAA,CAAQ,GAAR,CAAH;AACC;QACC,GAAA,GAAM,IAAC,CAAA,cAAD,CAAgB,GAAhB,EADP;OAEA,aAAA;QAAM;QACL,GAAA,GAAM,CAAA,OAAA,CAAA,CAAU,GAAG,CAAC,OAAd,CAAA,EADP;OAHD;;IAKA,IAAG,OAAA,CAAQ,QAAR,CAAH;AACC;QACC,QAAA,GAAW,IAAC,CAAA,iBAAD,CAAmB,QAAnB,EADZ;OAEA,aAAA;QAAM;QACL,QAAA,GAAW,CAAA,OAAA,CAAA,CAAU,GAAG,CAAC,OAAd,CAAA,EADZ;OAHD;;AAKA,WAAO,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb;EAnBD,CAnCR;;;EA0DC,GAAK,CAAA,CAAA;IAEJ,IAAC,CAAA,KAAD,IAAU;IACV,IAAI,IAAC,CAAA,KAAD,KAAU,CAAd;MACC,IAAC,CAAA,aAAD,CAAA,EADD;;EAHI,CA1DN;;;EAmEC,cAAgB,CAAA,CAAA,EAAA,CAnEjB;;;EAyEC,aAAe,CAAA,CAAA,EAAA,CAzEhB;;;EA+EC,IAAM,CAAC,GAAD,CAAA;AAEL,WAAO,KAAA,CAAM,GAAN,CAAU,CAAC,UAAX,CAAsB,IAAtB,EAA4B,EAA5B;EAFF,CA/EP;;;;EAsFC,MAAQ,CAAC,KAAD,CAAA;IAEP,KAAA,CAAM,0BAAN;IACA,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,QAArB;IACV,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,EAAF,CAAK,CAAL,EAAQ,CAAR;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EANO,CAtFT;;;EAiGC,KAAO,CAAC,GAAD,EAAM,QAAN,CAAA;AAER,QAAA;IAAE,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,CAAA,GAAyB,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,QAAZ,EAAsB,OAAtB;IACzB,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,SAAF,CAAY,GAAZ,EAAiB,QAAjB;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EALM,CAjGR;;;EA2GC,QAAU,CAAC,GAAD,EAAM,QAAN,CAAA;AAEX,QAAA;IAAE,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,CAAA,GAAyB,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,QAAZ,EAAsB,UAAtB;IACzB,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,YAAF,CAAe,GAAf,EAAoB,QAApB;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EALS,CA3GX;;;EAqHC,IAAM,CAAC,GAAD,EAAM,QAAN,CAAA;AAEP,QAAA;IAAE,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,CAAA,GAAyB,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,QAAZ,EAAsB,MAAtB;IACzB,IAAG,QAAA,CAAS,GAAT,CAAA,IAAiB,QAAA,CAAS,QAAT,CAApB;MACC,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;eACX,CAAC,CAAC,EAAF,CAAK,IAAC,CAAA,IAAD,CAAM,GAAN,CAAL,EAAiB,IAAC,CAAA,IAAD,CAAM,QAAN,CAAjB;MADW,CAAZ,EADD;KAAA,MAGK,IAAG,QAAA,CAAS,GAAT,CAAA,IAAiB,QAAA,CAAS,QAAT,CAApB;MACJ,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;eACX,CAAC,CAAC,MAAF,CAAU,IAAI,CAAC,GAAL,CAAS,GAAA,GAAM,QAAf,CAAA,GAA2B,MAArC;MADW,CAAZ,EADI;KAAA,MAAA;MAIJ,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;eACX,CAAC,CAAC,IAAF,CAAO,GAAP,EAAY,QAAZ;MADW,CAAZ,EAJI;;IAML,IAAC,CAAA,GAAD,CAAA;EAZK,CArHP;;;EAsIC,SAAW,CAAC,GAAD,EAAM,QAAN,CAAA;AAEZ,QAAA,SAAA,EAAA,SAAA,EAAA;IAAE,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,GAAH,CAAjB,CAAA,CAAtB;IACA,MAAA,CAAO,QAAA,CAAS,QAAT,CAAP,EAA2B,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,QAAH,CAAjB,CAAA,CAA3B;IACA,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,CAAA,GAAyB,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,QAAZ,EAAsB,WAAtB;IAEzB,SAAA,GAAY,YAAA,CAAa,GAAb,CAAiB,CAAC,MAAlB,CAAyB,CAAC,IAAD,CAAA,GAAA;AAAU,aAAO,QAAA,CAAS,IAAT;IAAjB,CAAzB,CAAyD,CAAC,IAA1D,CAAA;IACZ,SAAA,GAAY,YAAA,CAAa,QAAb,CAAsB,CAAC,MAAvB,CAA8B,CAAC,IAAD,CAAA,GAAA;AAAU,aAAO,QAAA,CAAS,IAAT;IAAjB,CAA9B,CAA8D,CAAC,IAA/D,CAAA;IAEZ,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,SAAF,CAAY,SAAZ,EAAuB,SAAvB;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EAXU,CAtIZ;;;EAsJC,QAAU,CAAC,GAAD,EAAM,QAAN,CAAA;AAEX,QAAA;IAAE,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,CAAA,GAAyB,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,QAAZ,EAAsB,cAAtB;IACzB,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,SAAF,CAAY,GAAG,CAAC,IAAJ,CAAA,CAAZ,EAAwB,QAAQ,CAAC,IAAT,CAAA,CAAxB;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EALS,CAtJX;;;EAgKC,MAAQ,CAAC,IAAD,CAAA;AAET,QAAA;IAAE,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,QAArB;IACV,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,MAAF,CAAS,IAAT;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EALO,CAhKT;;;EA0KC,KAAO,CAAC,IAAD,CAAA;AAER,QAAA;IAAE,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,OAArB;IACV,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,KAAF,CAAQ,IAAR;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EALM,CA1KR;;;EAoLC,aAAe,CAAC,KAAD,EAAQ,SAAO,MAAf,CAAA;AAEhB,QAAA;IAAE,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,eAArB;AACV,YAAO,MAAM,CAAC,WAAP,CAAA,CAAP;AAAA,WACM,MADN;QAEE,OAAO,CAAC,GAAR,CAAY,IAAI,CAAC,SAAL,CAAe,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAZ;AADI;AADN;QAIE,OAAO,CAAC,GAAR,CAAY,QAAA,CAAS,MAAA,CAAO,KAAP,CAAT,CAAZ;AAJF;IAKA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,MAAF,CAAS,IAAT;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EAVc,CApLhB;;;;EAoMC,QAAU,CAAC,GAAD,EAAM,QAAN,CAAA;AAEX,QAAA;IAAE,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,CAAA,GAAyB,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,QAAZ,EAAsB,UAAtB;IACzB,MAAA,CAAO,QAAA,CAAS,GAAT,CAAA,IAAiB,OAAA,CAAQ,GAAR,CAAxB,EAAsC,CAAA,uBAAA,CAAA,CAA0B,EAAA,CAAG,GAAH,CAA1B,CAAA,CAAtC;IACA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,MAAF,CAAS,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAT;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EANS,CApMX;;;EA+MC,OAAS,CAAC,GAAD,EAAM,MAAN,CAAA;AAEV,QAAA,KAAA,EAAA,KAAA,EAAA;IAAE,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,GAAH,CAAjB,CAAA,CAAtB;IACA,CAAC,KAAD,EAAQ,GAAR,CAAA,GAAe,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,KAAZ,EAAmB,SAAnB;IAEf,KAAA,GAAQ,GAAG,CAAC,UAAJ,CAAe,qBAAf;IACR,IAAG,KAAH;MACC,OAAO,CAAC,GAAR,CAAY,YAAZ,EADD;KAJF;;IAQE,IAAG,QAAA,CAAS,MAAT,CAAH;MACC,GAAA,GAAM,GAAG,CAAC,OAAJ,CAAY,MAAZ;MACN,IAAI,GAAA,KAAO,CAAC,CAAZ;QACC,OAAO,CAAC,GAAR,CAAY,GAAG,CAAC,MAAJ,CAAW,EAAX,CAAZ;QACA,OAAO,CAAC,GAAR,CAAY,GAAZ;QACA,OAAO,CAAC,GAAR,CAAY,GAAG,CAAC,MAAJ,CAAW,EAAX,CAAZ,EAHD;;MAIA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;eACX,CAAC,CAAC,MAAF,CAAS,GAAA,IAAO,CAAhB;MADW,CAAZ,EAND;KAAA,MAAA;MASC,MAAA,CAAO,QAAA,CAAS,MAAT,CAAP,EAAyB,CAAA,wBAAA,CAAA,CAA2B,EAAA,CAAG,MAAH,CAA3B,CAAA,CAAzB;MACA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;eACX,CAAC,CAAC,MAAF,CAAS,OAAA,CAAQ,GAAG,CAAC,KAAJ,CAAU,MAAV,CAAR,CAAT;MADW,CAAZ,EAVD;;IAYA,IAAC,CAAA,GAAD,CAAA;EAtBQ,CA/MV;;;EA0OC,UAAY,CAAC,QAAD,EAAW,WAAS,KAApB,CAAA;AAEb,QAAA;IAAE,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,YAArB;IACV,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;MACX,CAAC,CAAC,MAAF,CAAS,MAAA,CAAO,QAAP,CAAT;MACA,IAAG,OAAA,CAAQ,QAAR,CAAH;eACC,CAAC,CAAC,EAAF,CAAK,KAAA,CAAM,QAAN,CAAe,CAAC,IAAhB,CAAA,CAAL,EAA6B,QAAQ,CAAC,IAAT,CAAA,CAA7B,EADD;;IAFW,CAAZ;IAIA,IAAC,CAAA,GAAD,CAAA;EAPW,CA1Ob;;;EAsPC,YAAc,CAAC,QAAD,CAAA;AAEf,QAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA;IAAE,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,UAArB;AACV;AACC,cAAO,GAAA,GAAM,OAAA,CAAQ,QAAR,CAAb;AAAA,aACM,KADN;UAEE,OAAA,CAAQ,CAAA,QAAA,CAAA,CAAW,QAAX,CAAA,CAAR;AADI;AADN;UAIE,KAAA,CAAM,CAAA,uBAAA,CAAA,CAA0B,GAA1B,CAAA,CAAN;AAJF;MAKA,EAAA,GAAK,KANN;KAOA,aAAA;MAAM;MACL,OAAO,CAAC,GAAR,CAAY,GAAZ;MACA,EAAA,GAAK,MAFN;;IAGA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,MAAF,CAAS,EAAT;IAAP,CAAZ;IACA,IAAC,CAAA,GAAD,CAAA;EAda,CAtPf;;;EAyQC,KAAO,CAAC,IAAD,CAAA;AAER,QAAA,GAAA,EAAA,KAAA,EAAA;IAAE,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,OAArB;IACV,MAAA,CAAO,UAAA,CAAW,IAAX,CAAP,EAAyB,CAAA,gBAAA,CAAA,CAAmB,EAAA,CAAG,IAAH,CAAnB,CAAA,CAAzB;AACA;MACC,IAAA,CAAA;MACA,EAAA,GAAK,KAFN;KAGA,aAAA;MAAM;MACL,EAAA,GAAK,MADN;;IAGA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,KAAF,CAAQ,EAAR;IAAP,CAAZ;IACA,IAAC,CAAA,GAAD,CAAA;EAXM,CAzQR;;;;EA0RC,MAAQ,CAAC,IAAD,EAAO,WAAS,KAAhB,CAAA;AAET,QAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA;IAAE,IAAG,UAAA,CAAW,QAAX,CAAH;AACC,aAAO,IAAC,CAAA,KAAD,CAAO,IAAP,EADR;;IAGA,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,QAArB;IACV,MAAA,CAAO,UAAA,CAAW,IAAX,CAAP,EAAyB,CAAA,gBAAA,CAAA,CAAmB,EAAA,CAAG,IAAH,CAAnB,CAAA,CAAzB;IACA,MAAA,CAAO,OAAA,CAAQ,QAAR,CAAA,IAAqB,UAAA,CAAW,QAAX,CAA5B,EACC,CAAA,yBAAA,CAAA,CAA4B,EAAA,CAAG,QAAH,CAA5B,CAAA,CADD;IAEA,MAAA,GAAS;AACT;MACC,IAAA,CAAA;MACA,EAAA,GAAK,KAFN;KAGA,aAAA;MAAM;MACL,MAAA,GAAS;MACT,EAAA,GAAK,MAFN;;IAIA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aACX,CAAC,CAAC,MAAF,CAAS,CAAC,EAAD,IAAO,CAAC,MAAA,YAAkB,QAAnB,CAAhB;IADW,CAAZ;IAEA,IAAC,CAAA,GAAD,CAAA;EAnBO,CA1RT;;;EAkTC,QAAU,CAAC,IAAD,CAAA;AAEX,QAAA,GAAA,EAAA,KAAA,EAAA;IAAE,MAAA,CAAQ,OAAO,IAAP,KAAe,UAAvB,EAAoC,mBAApC;IACA,CAAC,KAAD,CAAA,GAAU,IAAC,CAAA,KAAD,CAAO,KAAP,EAAc,KAAd,EAAqB,UAArB;AACV;MACC,IAAA,CAAA;MACA,EAAA,GAAK,KAFN;KAGA,aAAA;MAAM;MACL,OAAO,CAAC,KAAR,CAAc,GAAd;MACA,EAAA,GAAK,MAFN;;IAIA,IAAA,CAAK,KAAL,EAAY,CAAC,CAAD,CAAA,GAAA;aAAO,CAAC,CAAC,MAAF,CAAS,EAAT;IAAP,CAAZ;IACA,IAAC,CAAA,GAAD,CAAA;EAZS;;AApTJ,EA/BO;;;AAoWd,OAAA,IAAO,CAAA,GAAI,IAAI,UAAJ,CAAA;;AACX,OAAA,IAAO,MAAA,GAAS,CAAC,IAAD,CAAA,GAAA;AAAU,SAAO,CAAC,CAAC,MAAF,CAAS,IAAT;AAAjB;;AAChB,OAAA,IAAO,KAAA,GAAQ,CAAC,IAAD,EAAO,IAAP,CAAA,GAAA;AAAgB,SAAO,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAc,IAAd;AAAvB;;AACf,OAAA,IAAO,QAAA,GAAW,CAAC,IAAD,EAAO,IAAP,CAAA,GAAA;AAAgB,SAAO,CAAC,CAAC,QAAF,CAAW,IAAX,EAAiB,IAAjB;AAAvB;;AAClB,OAAA,IAAO,IAAA,GAAO,CAAC,IAAD,EAAO,IAAP,CAAA,GAAA;AAAgB,SAAO,CAAC,CAAC,IAAF,CAAO,IAAP,EAAa,IAAb;AAAvB;;AACd,OAAA,IAAO,SAAA,GAAY,CAAC,IAAD,EAAO,IAAP,CAAA,GAAA;AAAgB,SAAO,CAAC,CAAC,SAAF,CAAY,IAAZ,EAAkB,IAAlB;AAAvB;;AACnB,OAAA,IAAO,MAAA,GAAS,CAAC,GAAD,CAAA,GAAA;AAAS,SAAO,CAAC,CAAC,MAAF,CAAS,GAAT;AAAhB;;AAChB,OAAA,IAAO,KAAA,GAAQ,CAAC,GAAD,CAAA,GAAA;AAAS,SAAO,CAAC,CAAC,KAAF,CAAQ,GAAR;AAAhB;;AACf,OAAA,IAAO,aAAA,GAAgB,CAAC,GAAD,EAAM,MAAN,CAAA,GAAA;AAAiB,SAAO,CAAC,CAAC,aAAF,CAAgB,GAAhB,EAAqB,MAArB;AAAxB;;AACvB,OAAA,IAAO,QAAA,GAAW,CAAC,IAAD,EAAO,IAAP,CAAA,GAAA;AAAgB,SAAO,CAAC,CAAC,QAAF,CAAW,IAAX,EAAiB,IAAjB;AAAvB;;AAClB,OAAA,IAAO,OAAA,GAAU,CAAC,GAAD,EAAM,MAAN,CAAA,GAAA;AAAiB,SAAO,CAAC,CAAC,OAAF,CAAU,GAAV,EAAe,MAAf;AAAxB;;AACjB,OAAA,IAAO,KAAA,GAAQ,CAAC,IAAD,CAAA,GAAA;AAAU,SAAO,CAAC,CAAC,KAAF,CAAQ,IAAR;AAAjB;;AACf,OAAA,IAAO,MAAA,GAAS,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;AAAoB,SAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,QAAf;AAA3B;;AAChB,OAAA,IAAO,QAAA,GAAW,CAAC,IAAD,CAAA,GAAA;AAAU,SAAO,CAAC,CAAC,QAAF,CAAW,IAAX;AAAjB;;AAClB,OAAA,IAAO,UAAA,GAAa,CAAC,QAAD,EAAW,QAAX,CAAA,GAAA;AAAwB,SAAO,CAAC,CAAC,UAAF,CAAa,QAAb,EAAuB,QAAvB;AAA/B;;AACpB,OAAA,IAAO,YAAA,GAAe,CAAC,QAAD,CAAA,GAAA;AAAc,SAAO,CAAC,CAAC,YAAF,CAAe,QAAf;AAArB",
  "sourcesContent": [
    "# utest.coffee\r\n\r\nimport test from 'ava'\r\n\r\nimport {\r\n\tundef, defined, notdefined, rtrim, isEmpty, nonEmpty, OL,\r\n\tisString, isNumber, isArray, isClass, isFunction, isRegExp, isInteger,\r\n\tassert, croak, blockToArray, untabify,\r\n\t} from '@jdeighan/llutils'\r\nimport {execCmd} from '@jdeighan/llutils/exec-utils'\r\nimport {isFile, slurp, fileExt} from '@jdeighan/llutils/fs'\r\nimport {getMyOutsideCaller} from '@jdeighan/llutils/v8-stack'\r\nimport {toNICE} from '@jdeighan/llutils/to-nice'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Available tests w/num required params\r\n#        equal 2\r\n#        notequal 2\r\n#        like 2\r\n#        samelines 2\r\n#        truthy 1\r\n#        falsy 1\r\n#        includes 2\r\n#        matches 2\r\n#        fails 1 (a function)\r\n#        throws 1 (a function) - check throws a specific error type\r\n#        succeeds 1 (a function)\r\n# ---------------------------------------------------------------------------\r\n\r\nnextID = 1\r\n\r\nexport class UnitTester\r\n\r\n\tconstructor: () ->\r\n\r\n\t\t@depth = 0\r\n\t\t@debug = false\r\n\t\t@hFound = {}\r\n\r\n\t# ........................................................................\r\n\t# --- returns, e.g. \"test 1\"\r\n\r\n\tgetLabel: (tag=undef) =>\r\n\r\n\t\t# --- We need to figure out the line number of the caller\r\n\t\t{filePath, line, column} = getMyOutsideCaller()\r\n\t\tif @debug\r\n\t\t\tconsole.log \"getLabel()\"\r\n\t\t\tconsole.log \"   filePath = '#{filePath}'\"\r\n\t\t\tconsole.log \"   line = #{line}, col = #{column}\"\r\n\r\n\t\tassert isInteger(line), \"getMyOutsideCaller() line = #{OL(line)}\"\r\n\t\tassert (fileExt(filePath) == '.js') || (fileExt(filePath) == '.coffee'),\r\n\t\t\t\"caller not a JS or Coffee file: #{OL(filePath)}\"\r\n\r\n\t\twhile @hFound[line]\r\n\t\t\tline += 1000\r\n\t\t@hFound[line] = true\r\n\r\n\t\treturn \"line #{line}\"\r\n\r\n\t# ........................................................................\r\n\r\n\ttransformValue: (val) -> return val\r\n\ttransformExpected: (expected) -> return expected\r\n\r\n\t# ........................................................................\r\n\r\n\tbegin: (val=undef, expected=undef, tag=undef) ->\r\n\r\n\t\tif (tag == 'symbol')\r\n\t\t\treturn [\"===== #{val} =====\"]\r\n\r\n\t\tif (@depth == 0)\r\n\t\t\t@beforeEachTest()\r\n\t\t@depth += 1\r\n\t\tlabel = @getLabel(tag)\r\n\t\tif defined(val)\r\n\t\t\ttry\r\n\t\t\t\tval = @transformValue(val)\r\n\t\t\tcatch err\r\n\t\t\t\tval = \"ERROR: #{err.message}\"\r\n\t\tif defined(expected)\r\n\t\t\ttry\r\n\t\t\t\texpected = @transformExpected(expected)\r\n\t\t\tcatch err\r\n\t\t\t\texpected = \"ERROR: #{err.message}\"\r\n\t\treturn [label, val, expected]\r\n\r\n\t# ........................................................................\r\n\r\n\tend: () ->\r\n\r\n\t\t@depth -= 1\r\n\t\tif (@depth == 0)\r\n\t\t\t@afterEachTest()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tbeforeEachTest: () ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tafterEachTest: () ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tnorm: (str) ->\r\n\r\n\t\treturn rtrim(str).replaceAll(\"\\r\", \"\")\r\n\r\n\t# ..........................................................\r\n\t# ..........................................................\r\n\r\n\tsymbol: (label) ->\r\n\r\n\t\tcroak \"Deprecated test 'symbol'\"\r\n\t\t[label] = @begin(label, undef, 'symbol')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.is(1, 1)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tequal: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'equal')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.deepEqual(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tnotequal: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'notequal')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.notDeepEqual(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tlike: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'like')\r\n\t\tif isString(val) && isString(expected)\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.is(@norm(val), @norm(expected))\r\n\t\telse if isNumber(val) && isNumber(expected)\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.truthy (Math.abs(val - expected) < 0.0001)\r\n\t\telse\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.like(val, expected)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsamelines: (val, expected) ->\r\n\r\n\t\tassert isString(val), \"not a string: #{OL(val)}\"\r\n\t\tassert isString(expected), \"not a string: #{OL(expected)}\"\r\n\t\t[label, val, expected] = @begin(val, expected, 'samelines')\r\n\r\n\t\tlValLines = blockToArray(val).filter((line) => return nonEmpty(line)).sort()\r\n\t\tlExpLines = blockToArray(expected).filter((line) => return nonEmpty(line)).sort()\r\n\r\n\t\ttest label, (t) =>\r\n\t\t\tt.deepEqual(lValLines, lExpLines)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsamelist: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'samewordlist')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.deepEqual(val.sort(), expected.sort())\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttruthy: (bool) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'truthy')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(bool)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfalsy: (bool) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'falsy')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.falsy(bool)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tshowInConsole: (value, format='nice') ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'showInConsole')\r\n\t\tswitch format.toLowerCase()\r\n\t\t\twhen 'json'\r\n\t\t\t\tconsole.log JSON.stringify(value, null, 3)\r\n\t\t\telse\r\n\t\t\t\tconsole.log untabify(toNICE(value))\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(true)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- NOTE: both strings and arrays have an includes() method\r\n\r\n\tincludes: (val, expected) ->\r\n\r\n\t\t[label, val, expected] = @begin(val, expected, 'includes')\r\n\t\tassert isString(val) || isArray(val), \"Not a string or array: #{OL(val)}\"\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(val.includes(expected))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tmatches: (val, regexp) ->\r\n\r\n\t\tassert isString(val), \"Not a string: #{OL(val)}\"\r\n\t\t[label, val] = @begin(val, undef, 'matches')\r\n\r\n\t\tdebug = val.startsWith('test/file-processor')\r\n\t\tif debug\r\n\t\t\tconsole.log \"IN match()\"\r\n\r\n\t\t# --- if regexp is a string, that string must exist within val\r\n\t\tif isString(regexp)\r\n\t\t\tpos = val.indexOf(regexp)\r\n\t\t\tif (pos == -1)\r\n\t\t\t\tconsole.log '-'.repeat(40)\r\n\t\t\t\tconsole.log val\r\n\t\t\t\tconsole.log '-'.repeat(40)\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.truthy(pos >= 0)\r\n\t\telse\r\n\t\t\tassert isRegExp(regexp), \"Not a string or regexp: #{OL(regexp)}\"\r\n\t\t\ttest label, (t) =>\r\n\t\t\t\tt.truthy(defined(val.match(regexp)))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfileExists: (filePath, contents=undef) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'fileExists')\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(isFile(filePath))\r\n\t\t\tif defined(contents)\r\n\t\t\t\tt.is slurp(filePath).trim(), contents.trim()\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfileCompiles: (filePath) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'compiles')\r\n\t\ttry\r\n\t\t\tswitch ext = fileExt(filePath)\r\n\t\t\t\twhen '.js'\r\n\t\t\t\t\texecCmd \"node -c #{filePath}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tcroak \"Unsupported file type: #{ext}\"\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tconsole.log err\r\n\t\t\tok = false\r\n\t\ttest label, (t) => t.truthy(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfails: (func) ->\r\n\r\n\t\t[label] = @begin(undef, undef, 'fails')\r\n\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tok = false\r\n\r\n\t\ttest label, (t) => t.false(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- with errClass == undef, same as fails()\r\n\r\n\tthrows: (func, errClass=undef) ->\r\n\r\n\t\tif notdefined(errClass)\r\n\t\t\treturn @fails(func)\r\n\r\n\t\t[label] = @begin(undef, undef, 'throws')\r\n\t\tassert isFunction(func), \"Not a function: #{OL(func)}\"\r\n\t\tassert isClass(errClass) || isFunction(errClass),\r\n\t\t\t\"Not a class or function: #{OL(errClass)}\"\r\n\t\terrObj = undef\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\terrObj = err\r\n\t\t\tok = false\r\n\r\n\t\ttest label, (t) =>\r\n\t\t\tt.truthy(!ok && (errObj instanceof errClass))\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsucceeds: (func) ->\r\n\r\n\t\tassert (typeof func == 'function'), \"function expected\"\r\n\t\t[label] = @begin(undef, undef, 'succeeds')\r\n\t\ttry\r\n\t\t\tfunc()\r\n\t\t\tok = true\r\n\t\tcatch err\r\n\t\t\tconsole.error err\r\n\t\t\tok = false\r\n\r\n\t\ttest label, (t) => t.truthy(ok)\r\n\t\t@end()\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport u = new UnitTester()\r\nexport symbol = (arg1) => return u.symbol(arg1)\r\nexport equal = (arg1, arg2) => return u.equal(arg1, arg2)\r\nexport notequal = (arg1, arg2) => return u.notequal(arg1, arg2)\r\nexport like = (arg1, arg2) => return u.like(arg1, arg2)\r\nexport samelines = (arg1, arg2) => return u.samelines(arg1, arg2)\r\nexport truthy = (arg) => return u.truthy(arg)\r\nexport falsy = (arg) => return u.falsy(arg)\r\nexport showInConsole = (arg, format) => return u.showInConsole(arg, format)\r\nexport includes = (arg1, arg2) => return u.includes(arg1, arg2)\r\nexport matches = (str, regexp) => return u.matches(str, regexp)\r\nexport fails = (func) => return u.fails(func)\r\nexport throws = (func, errClass) => return u.throws(func, errClass)\r\nexport succeeds = (func) => return u.succeeds(func)\r\nexport fileExists = (filePath, contents) => return u.fileExists(filePath, contents)\r\nexport fileCompiles = (filePath) => return u.fileCompiles(filePath)\r\n"
  ]
}