// @generated by Peggy 4.0.2.
//
// https://peggyjs.org/



	var check, hOptions, parse__arg__1, parse__arg__2, parse__cmdArgs__1, parse__stringVal__1, parse__stringVal__2, parse__stringVal__3, showHelp;

	import {
	  undef,
	  defined,
	  notdefined,
	  pass,
	  isEmpty,
	  hasKey,
	  keys,
	  OL,
	  words,
	  add_s,
	  assert,
	  croak,
	  getOptions,
	  cmdScriptName,
	  cmdArgStr,
	  isString,
	  isFunction,
	  isBoolean,
	  isArray,
	  isHash,
	  isRegExp
	} from '@jdeighan/llutils';

	import {
	  DUMP
	} from '@jdeighan/llutils/dump';

	import {
	  getTracer
	} from '@jdeighan/llutils/tracer';

	hOptions = {};

	export var getArgs = (hDesc = undef, hOptions = {}) => {
	  var argStr, args, err, hResult, tracer;
	  ({args, tracer} = getOptions(hOptions, {
	    args: undef,
	    tracer: 'none'
	  }));
	  argStr = cmdArgStr(args);
	  hOptions.tracer = getTracer(tracer);
	  try {
	    hResult = peg$parse(argStr, hOptions);
	  } catch (error) {
	    err = error;
	    console.log(`ERROR parsing ${OL(argStr)}: ${err.message}`);
	    process.exit();
	  }
	  if (hResult.h === true) {
	    showHelp(hDesc);
	    process.exit();
	  }
	  if (defined(hDesc)) {
	    check(hResult, hDesc);
	  }
	  return hResult;
	};

	check = (hResult, hDesc) => {
	  var desc, err, h, i, key, lNonOptions, len, max, min, msg, n, ref, type, value;
	  assert(isHash(hResult), `check(): hResult not a hash: ${OL(hResult)}`);
	  assert(isHash(hDesc), `check(): hDesc not a hash: ${OL(hDesc)}`);
	  ref = keys(hResult).filter((x) => {
	    return x !== '_';
	  });
	  for (i = 0, len = ref.length; i < len; i++) {
	    key = ref[i];
	    ({type, desc, msg} = hDesc[key]);
	    if (isString(type)) {
	      value = hResult[key];
	      switch (type) {
	        case 'string':
	          pass();
	          break;
	        case 'boolean':
	          assert(isBoolean(value), `Bad boolean: ${OL(value)}, key = ${OL(key)}`);
	          break;
	        case 'number':
	          try {
	            hResult[key] = parseFloat(value);
	          } catch (error) {
	            err = error;
	            croak(`Bad number: ${OL(value)}, key = ${OL(key)}`);
	          }
	          break;
	        case 'integer':
	          try {
	            hResult[key] = parseInt(value, 10);
	          } catch (error) {
	            err = error;
	            croak(`Bad integer: ${OL(value)}, key = ${OL(key)}`);
	          }
	          break;
	        default:
	          croak(`Invalid type: ${OL(desc)}, key = ${OL(key)}`);
	      }
	    } else if (isRegExp(type)) {
	      value = hResult[key];
	      assert(isString(value), `value not a string: ${OL(value)}`);
	      assert(value.match(type), `value ${OL(value)} does not match regexp`);
	    } else if (isFunction(type)) {
	      type(); // --- call the function
	    } else if (defined(type)) {
	      croak(`Bad type: ${OL(type)}`);
	    }
	  }
	  if (defined(h = hDesc._)) {
	    min = h.min || h.exactly || 0;
	    max = h.max || h.exactly || 2e308;
	    lNonOptions = hResult._;
	    if (defined(lNonOptions)) {
	      assert(isArray(lNonOptions), `Not an array: ${OL(lNonOptions)}`);
	      n = lNonOptions.length;
	    } else {
	      n = 0;
	    }
	    assert(n >= min, `There must be at least ${min} non-option${add_s(min)}`);
	    assert(n <= max, `There can be at most ${max} non-option${add_s(max)}`);
	  }
	};

	showHelp = (hDesc) => {
	  var _, desc, exactly, i, j, key, l, lFlags, lNonFlags, label, len, len1, len2, max, min, msg, ref, ref1, strIter, type, usageStr;
	  assert(isHash(hDesc), `showHelp(): not a hash: ${OL(hDesc)}`);
	  usageStr = cmdScriptName();
	  lFlags = [];
	  lNonFlags = [];
	  ref = keys(hDesc).filter((k) => {
	    return k !== '_';
	  });
	  for (i = 0, len = ref.length; i < len; i++) {
	    key = ref[i];
	    if ((key.length === 1) && (hDesc[key].type === 'boolean')) {
	      lFlags.push(key);
	    } else {
	      lNonFlags.push(key);
	    }
	  }
	  if (lFlags.length > 0) {
	    usageStr += ` -${lFlags.join('')}`;
	  }
	  for (j = 0, len1 = lNonFlags.length; j < len1; j++) {
	    key = lNonFlags[j];
	    ({type, desc} = hDesc[key]);
	    label = desc || 'type';
	    usageStr += ` -${key}=<${desc || type}>`;
	  }
	  if (defined(_ = hDesc._)) {
	    ({exactly, min, max, desc} = _);
	    if (defined(desc)) {
	      usageStr += ` ${desc}`;
	    } else {
	      if (defined(exactly)) {
	        strIter = `{${exactly}}`;
	      } else {
	        strIter = "{";
	        if (defined(min)) {
	          strIter += min;
	        }
	        strIter += ',';
	        if (defined(max) && (max < 1000)) {
	          strIter += max;
	        }
	        strIter += '}';
	      }
	      usageStr += ` <string>${strIter}`;
	    }
	  }
	  console.log(`USAGE: ${usageStr}`);
	  ref1 = keys(hDesc).filter((k) => {
	    return k !== '_';
	  });
	  for (l = 0, len2 = ref1.length; l < len2; l++) {
	    key = ref1[l];
	    ({msg} = hDesc[key]);
	    if (msg) {
	      console.log(`   -${key} - ${msg}`);
	    }
	  }
	};

	// --------------------------------------------------------------
	parse__cmdArgs__1 = (lArgs) => {
	  var arg, i, lNonOptions, len;
	  hOptions = {};
	  lNonOptions = [];
	  for (i = 0, len = lArgs.length; i < len; i++) {
	    arg = lArgs[i];
	    if (isHash(arg)) {
	      Object.assign(hOptions, arg);
	    } else if (isArray(arg)) {
	      lNonOptions.push(...arg);
	    } else {
	      croak(`Bad return from arg: ${OL(arg)}`);
	    }
	  }
	  hOptions._ = lNonOptions;
	  return hOptions;
	};

	// --------------------------------------------------------------
	parse__arg__1 = (lChars, value) => {
	  var ch, i, key, len;
	  if (isEmpty(value)) {
	    hOptions = {};
	    for (i = 0, len = lChars.length; i < len; i++) {
	      ch = lChars[i];
	      hOptions[ch] = true;
	    }
	    return hOptions;
	  } else {
	    key = lChars.join('');
	    return {
	      [key]: value
	    };
	  }
	};

	// --------------------------------------------------------------
	parse__arg__2 = (val) => {
	  return [val];
	};

	// --------------------------------------------------------------
	parse__stringVal__1 = (str) => {
	  return str;
	};

	// --------------------------------------------------------------
	parse__stringVal__2 = (str) => {
	  return str;
	};

	// --------------------------------------------------------------
	parse__stringVal__3 = (str) => {
	  return str;
	};


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$DefaultTracer() {
  this.indentLevel = 0;
}

peg$DefaultTracer.prototype.destroy = function() {};
peg$DefaultTracer.prototype.trace = function(event) {
  var that = this;

  function log(event) {
    function repeat(str, n) {
       var resultStr = "", i;

       for (i = 0; i < n; i++) {
         resultStr += str;
       }

       return resultStr;
    }

    function pad(string, length) {
      return string + repeat(" ", length - string.length);
    }

    if (typeof console === "object") {
      console.log(
        event.location.start.line + ":" + event.location.start.column + "-"
          + event.location.end.line + ":" + event.location.end.column + " "
          + pad(event.type, 12) + " "
          + repeat("  ", that.indentLevel)
          + (event.type.startsWith('rule') ? '<' + event.rule + '>' : '')
          + (event.result ? ' ' + JSON.stringify(event.result) : '')
      );
    }
  }

  switch (event.type) {
    case "rule.enter":
      log(event);
      this.indentLevel++;
      break;

    case "rule.match":
      this.indentLevel--;
      log(event);
      break;

    case "rule.fail":
      this.indentLevel--;
      log(event);
      break;

  }
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { cmdArgs: peg$parse_cmdArgs, arg: peg$parse_arg, stringVal: peg$parse_stringVal, _: peg$parse__ };
  var peg$startRuleFunction = peg$parse_cmdArgs;

  var peg$c0 = "lArgs";
  var peg$c1 = "-";
  var peg$c2 = "lChars";
  var peg$c3 = "=";
  var peg$c4 = "value";
  var peg$c5 = "val";
  var peg$c6 = "\"";
  var peg$c7 = "str";
  var peg$c8 = "'";
  var peg$r0 = /^[A-Za-z]/;
  var peg$r1 = /^[^"]/;
  var peg$r2 = /^[^']/;
  var peg$r3 = /^[^ \t]/;
  var peg$r4 = /^[ \t]/;
  var peg$e0 = peg$literalExpectation("-", false);
  var peg$e1 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
  var peg$e2 = peg$literalExpectation("=", false);
  var peg$e3 = peg$literalExpectation("\"", false);
  var peg$e4 = peg$classExpectation(["\""], true, false);
  var peg$e5 = peg$literalExpectation("'", false);
  var peg$e6 = peg$classExpectation(["'"], true, false);
  var peg$e7 = peg$classExpectation([" ", "\t"], true, false);
  var peg$e8 = peg$classExpectation([" ", "\t"], false, false);

  var peg$f0 = function(lArgs) { return parse__cmdArgs__1(lArgs); };
  var peg$f1 = function(lChars, value) { return parse__arg__1(lChars, value); };
  var peg$f2 = function(val) { return parse__arg__2(val); };
  var peg$f3 = function(str) { return parse__stringVal__1(str); };
  var peg$f4 = function(str) { return parse__stringVal__2(str); };
  var peg$f5 = function(str) { return parse__stringVal__3(str); };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$tracer = ("tracer" in options) && (options.tracer !== undefined)
    ? options.tracer
    : new peg$DefaultTracer();

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parse_cmdArgs() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "cmdArgs",
      location: peg$computeLocation(startPos, startPos, true),
    });

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_arg();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s3 = peg$parse_arg();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "cmdArgs",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true),
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "cmdArgs",
        location: peg$computeLocation(startPos, startPos, true),
      });
    }

    return s0;
  }

  function peg$parse_arg() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "arg",
      location: peg$computeLocation(startPos, startPos, true),
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c1;
      peg$currPos++;
      peg$tracer.trace({
        type: "string.match",
        rule: "arg",
        result: "-",
        location: peg$computeLocation(startPos, peg$currPos, true),
      });
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
      peg$tracer.trace({
        type: "string.fail",
        rule: "arg",
        details: "-",
        location: peg$computeLocation(peg$currPos, peg$currPos, true),
      });
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r0.test(s3)) {
        peg$currPos++;
        peg$tracer.trace({
          type: "class.match",
          rule: "arg",
          result: input.charAt(peg$currPos-1),
          details: peg$r0.toString(),
          location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
        });
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
        peg$tracer.trace({
          type: "class.fail",
          rule: "arg",
          details: peg$r0.toString(),
          location: peg$computeLocation(peg$currPos, peg$currPos, true),
        });
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r0.test(s3)) {
            peg$currPos++;
            peg$tracer.trace({
              type: "class.match",
              rule: "arg",
              result: input.charAt(peg$currPos-1),
              details: peg$r0.toString(),
              location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
            });
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
            peg$tracer.trace({
              type: "class.fail",
              rule: "arg",
              details: peg$r0.toString(),
              location: peg$computeLocation(peg$currPos, peg$currPos, true),
            });
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c3;
          peg$currPos++;
          peg$tracer.trace({
            type: "string.match",
            rule: "arg",
            result: "=",
            location: peg$computeLocation(startPos, peg$currPos, true),
          });
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
          peg$tracer.trace({
            type: "string.fail",
            rule: "arg",
            details: "=",
            location: peg$computeLocation(peg$currPos, peg$currPos, true),
          });
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_stringVal();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f1(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_stringVal();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2(s1);
      }
      s0 = s1;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "arg",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true),
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "arg",
        location: peg$computeLocation(startPos, startPos, true),
      });
    }

    return s0;
  }

  function peg$parse_stringVal() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "stringVal",
      location: peg$computeLocation(startPos, startPos, true),
    });

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c6;
      peg$currPos++;
      peg$tracer.trace({
        type: "string.match",
        rule: "stringVal",
        result: "\"",
        location: peg$computeLocation(startPos, peg$currPos, true),
      });
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
      peg$tracer.trace({
        type: "string.fail",
        rule: "stringVal",
        details: "\"",
        location: peg$computeLocation(peg$currPos, peg$currPos, true),
      });
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r1.test(s4)) {
        peg$currPos++;
        peg$tracer.trace({
          type: "class.match",
          rule: "stringVal",
          result: input.charAt(peg$currPos-1),
          details: peg$r1.toString(),
          location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
        });
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
        peg$tracer.trace({
          type: "class.fail",
          rule: "stringVal",
          details: peg$r1.toString(),
          location: peg$computeLocation(peg$currPos, peg$currPos, true),
        });
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r1.test(s4)) {
          peg$currPos++;
          peg$tracer.trace({
            type: "class.match",
            rule: "stringVal",
            result: input.charAt(peg$currPos-1),
            details: peg$r1.toString(),
            location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
          });
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
          peg$tracer.trace({
            type: "class.fail",
            rule: "stringVal",
            details: peg$r1.toString(),
            location: peg$computeLocation(peg$currPos, peg$currPos, true),
          });
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c6;
        peg$currPos++;
        peg$tracer.trace({
          type: "string.match",
          rule: "stringVal",
          result: "\"",
          location: peg$computeLocation(startPos, peg$currPos, true),
        });
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
        peg$tracer.trace({
          type: "string.fail",
          rule: "stringVal",
          details: "\"",
          location: peg$computeLocation(peg$currPos, peg$currPos, true),
        });
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f3(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c8;
        peg$currPos++;
        peg$tracer.trace({
          type: "string.match",
          rule: "stringVal",
          result: "'",
          location: peg$computeLocation(startPos, peg$currPos, true),
        });
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
        peg$tracer.trace({
          type: "string.fail",
          rule: "stringVal",
          details: "'",
          location: peg$computeLocation(peg$currPos, peg$currPos, true),
        });
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r2.test(s4)) {
          peg$currPos++;
          peg$tracer.trace({
            type: "class.match",
            rule: "stringVal",
            result: input.charAt(peg$currPos-1),
            details: peg$r2.toString(),
            location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
          });
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
          peg$tracer.trace({
            type: "class.fail",
            rule: "stringVal",
            details: peg$r2.toString(),
            location: peg$computeLocation(peg$currPos, peg$currPos, true),
          });
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r2.test(s4)) {
            peg$currPos++;
            peg$tracer.trace({
              type: "class.match",
              rule: "stringVal",
              result: input.charAt(peg$currPos-1),
              details: peg$r2.toString(),
              location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
            });
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
            peg$tracer.trace({
              type: "class.fail",
              rule: "stringVal",
              details: peg$r2.toString(),
              location: peg$computeLocation(peg$currPos, peg$currPos, true),
            });
          }
        }
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c8;
          peg$currPos++;
          peg$tracer.trace({
            type: "string.match",
            rule: "stringVal",
            result: "'",
            location: peg$computeLocation(startPos, peg$currPos, true),
          });
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
          peg$tracer.trace({
            type: "string.fail",
            rule: "stringVal",
            details: "'",
            location: peg$computeLocation(peg$currPos, peg$currPos, true),
          });
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f4(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c1;
          peg$currPos++;
          peg$tracer.trace({
            type: "string.match",
            rule: "stringVal",
            result: "-",
            location: peg$computeLocation(startPos, peg$currPos, true),
          });
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
          peg$tracer.trace({
            type: "string.fail",
            rule: "stringVal",
            details: "-",
            location: peg$computeLocation(peg$currPos, peg$currPos, true),
          });
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = undefined;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = input.charAt(peg$currPos);
          if (peg$r3.test(s4)) {
            peg$currPos++;
            peg$tracer.trace({
              type: "class.match",
              rule: "stringVal",
              result: input.charAt(peg$currPos-1),
              details: peg$r3.toString(),
              location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
            });
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
            peg$tracer.trace({
              type: "class.fail",
              rule: "stringVal",
              details: peg$r3.toString(),
              location: peg$computeLocation(peg$currPos, peg$currPos, true),
            });
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = input.charAt(peg$currPos);
              if (peg$r3.test(s4)) {
                peg$currPos++;
                peg$tracer.trace({
                  type: "class.match",
                  rule: "stringVal",
                  result: input.charAt(peg$currPos-1),
                  details: peg$r3.toString(),
                  location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
                });
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
                peg$tracer.trace({
                  type: "class.fail",
                  rule: "stringVal",
                  details: peg$r3.toString(),
                  location: peg$computeLocation(peg$currPos, peg$currPos, true),
                });
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f5(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "stringVal",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true),
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "stringVal",
        location: peg$computeLocation(startPos, startPos, true),
      });
    }

    return s0;
  }

  function peg$parse__() {
    var startPos = peg$currPos;
    var s0, s1;

    peg$tracer.trace({
      type: "rule.enter",
      rule: "_",
      location: peg$computeLocation(startPos, startPos, true),
    });

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
      peg$tracer.trace({
        type: "class.match",
        rule: "_",
        result: input.charAt(peg$currPos-1),
        details: peg$r4.toString(),
        location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
      });
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
      peg$tracer.trace({
        type: "class.fail",
        rule: "_",
        details: peg$r4.toString(),
        location: peg$computeLocation(peg$currPos, peg$currPos, true),
      });
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r4.test(s1)) {
          peg$currPos++;
          peg$tracer.trace({
            type: "class.match",
            rule: "_",
            result: input.charAt(peg$currPos-1),
            details: peg$r4.toString(),
            location: peg$computeLocation(peg$currPos-1, peg$currPos, true),
          });
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
          peg$tracer.trace({
            type: "class.fail",
            rule: "_",
            details: peg$r4.toString(),
            location: peg$computeLocation(peg$currPos, peg$currPos, true),
          });
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "_",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos, true),
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "_",
        location: peg$computeLocation(startPos, startPos, true),
      });
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  peg$tracer.destroy();
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "cmdArgs",
  "arg",
  "stringVal",
  "_"
];

export {
  peg$DefaultTracer as DefaultTracer,
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
