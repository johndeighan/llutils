========================================
RULE: value
========================================
  OP[ 4]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$parse_boolean();                │
  └──────────────────────────────────────────┘
  OP[ 7]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 3]: 27 RULE
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$parse_number();                 │
    └──────────────────────────────────────────┘
    OP[ 6]: 14 IF_ERROR
      OP[ 0]:  6 POP
      OP[ 3]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$parse_string();                 │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s0 === peg$FAILED) {                 │
    │   s0 = peg$parse_string();               │
    │                                          │
    │ }                                        │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s0 === peg$FAILED) {                 │
  │   s0 = peg$parse_number();               │
  │                                          │
  │   if (s0 === peg$FAILED) {               │
  │     s0 = peg$parse_string();             │
  │                                          │
  │   }                                      │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  value CODE  ───────────────────────────┐
│ function peg$parse_value() {                                      │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0;                                                         │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "value",                                                │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$parse_boolean();                                       │
│                                                                   │
│   if (s0 === peg$FAILED) {                                        │
│     s0 = peg$parse_number();                                      │
│     if (s0 === peg$FAILED) {                                      │
│       s0 = peg$parse_string();                                    │
│     }                                                             │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "value",                                              │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "value",                                              │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: SEP
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f0(s1);                         │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f1(s1);                         │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f1(s1);                       │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌───────────────────────────  SEP CODE  ────────────────────────────┐
│ function peg$parse_SEP() {                                        │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "SEP",                                                  │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f0(s1);                                                │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f1(s1);                                              │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "SEP",                                                │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "SEP",                                                │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: INDENT
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f2(s1);                         │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f3(s1);                         │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f3(s1);                       │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  INDENT CODE  ──────────────────────────┐
│ function peg$parse_INDENT() {                                     │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "INDENT",                                               │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f2(s1);                                                │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f3(s1);                                              │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "INDENT",                                             │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "INDENT",                                             │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: EXTEND
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f4(s1);                         │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f5(s1);                         │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f5(s1);                       │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  EXTEND CODE  ──────────────────────────┐
│ function peg$parse_EXTEND() {                                     │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "EXTEND",                                               │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f4(s1);                                                │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f5(s1);                                              │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "EXTEND",                                             │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "EXTEND",                                             │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: UNDENT
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f6(s1);                         │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f7(s1);                         │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f7(s1);                       │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  UNDENT CODE  ──────────────────────────┐
│ function peg$parse_UNDENT() {                                     │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "UNDENT",                                               │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f6(s1);                                                │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f7(s1);                                              │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "UNDENT",                                             │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "UNDENT",                                             │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: INDENTATION
========================================
  OP[ 2]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[15]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[20]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$c1;                             │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s2 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e0); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 13) {                        │
  │   s2 = peg$c1;                                                     │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "INDENTATION",                                           │
  │     result: "\r",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s2 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "INDENTATION",                                           │
  │     details: "\r",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[29]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 1]:  2 PUSH_NULL
    ┌───────────────  New Code  ───────────────┐
    │ s2 = null;                               │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 === peg$FAILED) {                 │
  │   s2 = null;                             │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[37]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s3 = peg$c2;                             │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s3 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e1); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 10) {                        │
  │   s3 = peg$c2;                                                     │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "INDENTATION",                                           │
  │     result: "\n",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s3 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e1); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "INDENTATION",                                           │
  │     details: "\n",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[46]: 15 IF_NOT_ERROR
    OP[ 2]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s4 = [];                                 │
    └──────────────────────────────────────────┘
    OP[ 7]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s5 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[10]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s6 = [];                                 │
    └──────────────────────────────────────────┘
    OP[13]: 20 MATCH_CHAR_CLASS
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s7 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e2); } │
      └──────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ s7 = input.charAt(peg$currPos);                                      │
    │ if (peg$r0.test(s7)) {                                               │
    │   peg$currPos++;                                                     │
    │   peg$tracer.trace({                                                 │
    │     type: "class.match",                                             │
    │     rule: "INDENTATION",                                             │
    │     result: input.charAt(peg$currPos-1),                             │
    │     details: peg$r0.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │   });                                                                │
    │ } else {                                                             │
    │   s7 = peg$FAILED;                                                   │
    │   if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
    │   peg$tracer.trace({                                                 │
    │     type: "class.fail",                                              │
    │     rule: "INDENTATION",                                             │
    │     details: peg$r0.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │   });                                                                │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[22]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s6.push(s7);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s7 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e2); } │
        └──────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s7 = input.charAt(peg$currPos);                                      │
      │ if (peg$r0.test(s7)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "INDENTATION",                                             │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r0.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s7 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "INDENTATION",                                             │
      │     details: peg$r0.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
    ┌──────────────────────────────  New Code  ──────────────────────────────┐
    │ while (s7 !== peg$FAILED) {                                            │
    │   s6.push(s7);                                                         │
    │   s7 = input.charAt(peg$currPos);                                      │
    │   if (peg$r0.test(s7)) {                                               │
    │     peg$currPos++;                                                     │
    │     peg$tracer.trace({                                                 │
    │       type: "class.match",                                             │
    │       rule: "INDENTATION",                                             │
    │       result: input.charAt(peg$currPos-1),                             │
    │       details: peg$r0.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │     });                                                                │
    │   } else {                                                             │
    │     s7 = peg$FAILED;                                                   │
    │     if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
    │     peg$tracer.trace({                                                 │
    │       type: "class.fail",                                              │
    │       rule: "INDENTATION",                                             │
    │       details: peg$r0.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │     });                                                                │
    │   }                                                                    │
    │                                                                        │
    │ }                                                                      │
    └────────────────────────────────────────────────────────────────────────┘
    OP[36]:  6 POP
    OP[40]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s7 = peg$c2;                             │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s7 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e1); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 10) {                        │
    │   s7 = peg$c2;                                                     │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "INDENTATION",                                           │
    │     result: "\n",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s7 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e1); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "INDENTATION",                                           │
    │     details: "\n",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[49]: 15 IF_NOT_ERROR
      OP[ 0]: 11 WRAP
      ┌───────────────  New Code  ───────────────┐
      │ s6 = [s6, s7];                           │
      └──────────────────────────────────────────┘
      OP[ 2]:  9 NIP
      ┌───────────────  New Code  ───────────────┐
      │ s5 = s6;                                 │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s5;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s5 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s7 !== peg$FAILED) {                 │
    │   s6 = [s6, s7];                         │
    │   s5 = s6;                               │
    │ } else {                                 │
    │   peg$currPos = s5;                      │
    │   s5 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[61]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s4.push(s5);                             │
      └──────────────────────────────────────────┘
      OP[ 5]:  5 PUSH_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ s5 = peg$currPos;                        │
      └──────────────────────────────────────────┘
      OP[ 8]:  4 PUSH_EMPTY_ARRAY
      ┌───────────────  New Code  ───────────────┐
      │ s6 = [];                                 │
      └──────────────────────────────────────────┘
      OP[11]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s7 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e2); } │
        └──────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s7 = input.charAt(peg$currPos);                                      │
      │ if (peg$r0.test(s7)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "INDENTATION",                                             │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r0.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s7 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "INDENTATION",                                             │
      │     details: peg$r0.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
      OP[20]: 16 WHILE_NOT_ERROR
        OP[ 0]: 10 APPEND
        ┌───────────────  New Code  ───────────────┐
        │ s6.push(s7);                             │
        └──────────────────────────────────────────┘
        OP[ 3]: 20 MATCH_CHAR_CLASS
          OP[ 0]: 23 FAIL
          ┌───────────────────  New Code  ───────────────────┐
          │ s7 = peg$FAILED;                                 │
          │ if (peg$silentFails === 0) { peg$fail(peg$e2); } │
          └──────────────────────────────────────────────────┘
        ┌─────────────────────────────  New Code  ─────────────────────────────┐
        │ s7 = input.charAt(peg$currPos);                                      │
        │ if (peg$r0.test(s7)) {                                               │
        │   peg$currPos++;                                                     │
        │   peg$tracer.trace({                                                 │
        │     type: "class.match",                                             │
        │     rule: "INDENTATION",                                             │
        │     result: input.charAt(peg$currPos-1),                             │
        │     details: peg$r0.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
        │   });                                                                │
        │ } else {                                                             │
        │   s7 = peg$FAILED;                                                   │
        │   if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
        │   peg$tracer.trace({                                                 │
        │     type: "class.fail",                                              │
        │     rule: "INDENTATION",                                             │
        │     details: peg$r0.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
        │   });                                                                │
        │ }                                                                    │
        └──────────────────────────────────────────────────────────────────────┘
      ┌──────────────────────────────  New Code  ──────────────────────────────┐
      │ while (s7 !== peg$FAILED) {                                            │
      │   s6.push(s7);                                                         │
      │   s7 = input.charAt(peg$currPos);                                      │
      │   if (peg$r0.test(s7)) {                                               │
      │     peg$currPos++;                                                     │
      │     peg$tracer.trace({                                                 │
      │       type: "class.match",                                             │
      │       rule: "INDENTATION",                                             │
      │       result: input.charAt(peg$currPos-1),                             │
      │       details: peg$r0.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │     });                                                                │
      │   } else {                                                             │
      │     s7 = peg$FAILED;                                                   │
      │     if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
      │     peg$tracer.trace({                                                 │
      │       type: "class.fail",                                              │
      │       rule: "INDENTATION",                                             │
      │       details: peg$r0.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │     });                                                                │
      │   }                                                                    │
      │                                                                        │
      │ }                                                                      │
      └────────────────────────────────────────────────────────────────────────┘
      OP[34]:  6 POP
      OP[38]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s7 = peg$c2;                             │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s7 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e1); } │
        └──────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 10) {                        │
      │   s7 = peg$c2;                                                     │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "INDENTATION",                                           │
      │     result: "\n",                                                  │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s7 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e1); }                 │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "INDENTATION",                                           │
      │     details: "\n",                                                 │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
      OP[47]: 15 IF_NOT_ERROR
        OP[ 0]: 11 WRAP
        ┌───────────────  New Code  ───────────────┐
        │ s6 = [s6, s7];                           │
        └──────────────────────────────────────────┘
        OP[ 2]:  9 NIP
        ┌───────────────  New Code  ───────────────┐
        │ s5 = s6;                                 │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s5;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s5 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s7 !== peg$FAILED) {                 │
      │   s6 = [s6, s7];                         │
      │   s5 = s6;                               │
      │ } else {                                 │
      │   peg$currPos = s5;                      │
      │   s5 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
    ┌───────────────────────────────  New Code  ───────────────────────────────┐
    │ while (s5 !== peg$FAILED) {                                              │
    │   s4.push(s5);                                                           │
    │   s5 = peg$currPos;                                                      │
    │   s6 = [];                                                               │
    │   s7 = input.charAt(peg$currPos);                                        │
    │   if (peg$r0.test(s7)) {                                                 │
    │     peg$currPos++;                                                       │
    │     peg$tracer.trace({                                                   │
    │       type: "class.match",                                               │
    │       rule: "INDENTATION",                                               │
    │       result: input.charAt(peg$currPos-1),                               │
    │       details: peg$r0.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
    │     });                                                                  │
    │   } else {                                                               │
    │     s7 = peg$FAILED;                                                     │
    │     if (peg$silentFails === 0) { peg$fail(peg$e2); }                     │
    │     peg$tracer.trace({                                                   │
    │       type: "class.fail",                                                │
    │       rule: "INDENTATION",                                               │
    │       details: peg$r0.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
    │     });                                                                  │
    │   }                                                                      │
    │   while (s7 !== peg$FAILED) {                                            │
    │     s6.push(s7);                                                         │
    │     s7 = input.charAt(peg$currPos);                                      │
    │     if (peg$r0.test(s7)) {                                               │
    │       peg$currPos++;                                                     │
    │       peg$tracer.trace({                                                 │
    │         type: "class.match",                                             │
    │         rule: "INDENTATION",                                             │
    │         result: input.charAt(peg$currPos-1),                             │
    │         details: peg$r0.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │       });                                                                │
    │     } else {                                                             │
    │       s7 = peg$FAILED;                                                   │
    │       if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
    │       peg$tracer.trace({                                                 │
    │         type: "class.fail",                                              │
    │         rule: "INDENTATION",                                             │
    │         details: peg$r0.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │       });                                                                │
    │     }                                                                    │
    │   }                                                                      │
    │   if (input.charCodeAt(peg$currPos) === 10) {                            │
    │     s7 = peg$c2;                                                         │
    │     peg$currPos++;                                                       │
    │     peg$tracer.trace({                                                   │
    │       type: "string.match",                                              │
    │       rule: "INDENTATION",                                               │
    │       result: "\n",                                                      │
    │       location: peg$computeLocation(startPos, peg$currPos, true),        │
    │     });                                                                  │
    │   } else {                                                               │
    │     s7 = peg$FAILED;                                                     │
    │     if (peg$silentFails === 0) { peg$fail(peg$e1); }                     │
    │     peg$tracer.trace({                                                   │
    │       type: "string.fail",                                               │
    │       rule: "INDENTATION",                                               │
    │       details: "\n",                                                     │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
    │     });                                                                  │
    │   }                                                                      │
    │   if (s7 !== peg$FAILED) {                                               │
    │     s6 = [s6, s7];                                                       │
    │     s5 = s6;                                                             │
    │   } else {                                                               │
    │     peg$currPos = s5;                                                    │
    │     s5 = peg$FAILED;                                                     │
    │   }                                                                      │
    │                                                                          │
    │ }                                                                        │
    └──────────────────────────────────────────────────────────────────────────┘
    OP[122]:  6 POP
    OP[128]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s5 = [];                                 │
    └──────────────────────────────────────────┘
    OP[131]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s6 = peg$c3;                             │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s6 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e3); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 9) {                         │
    │   s6 = peg$c3;                                                     │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "INDENTATION",                                           │
    │     result: "\t",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s6 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e3); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "INDENTATION",                                           │
    │     details: "\t",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[140]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s5.push(s6);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s6 = peg$c3;                             │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s6 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e3); } │
        └──────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 9) {                         │
      │   s6 = peg$c3;                                                     │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "INDENTATION",                                           │
      │     result: "\t",                                                  │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s6 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e3); }                 │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "INDENTATION",                                           │
      │     details: "\t",                                                 │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ while (s6 !== peg$FAILED) {                                          │
    │   s5.push(s6);                                                       │
    │   if (input.charCodeAt(peg$currPos) === 9) {                         │
    │     s6 = peg$c3;                                                     │
    │     peg$currPos++;                                                   │
    │     peg$tracer.trace({                                               │
    │       type: "string.match",                                          │
    │       rule: "INDENTATION",                                           │
    │       result: "\t",                                                  │
    │       location: peg$computeLocation(startPos, peg$currPos, true),    │
    │     });                                                              │
    │   } else {                                                           │
    │     s6 = peg$FAILED;                                                 │
    │     if (peg$silentFails === 0) { peg$fail(peg$e3); }                 │
    │     peg$tracer.trace({                                               │
    │       type: "string.fail",                                           │
    │       rule: "INDENTATION",                                           │
    │       details: "\t",                                                 │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │     });                                                              │
    │   }                                                                  │
    │                                                                      │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[154]:  6 POP
    OP[157]: 36 PLUCK
    ┌───────────────  New Code  ───────────────┐
    │ s1 = s5;                                 │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s1;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$FAILED;                         │
    │                                          │
    └──────────────────────────────────────────┘
  ┌────────────────────────────────  New Code  ────────────────────────────────┐
  │ if (s3 !== peg$FAILED) {                                                   │
  │   s4 = [];                                                                 │
  │   s5 = peg$currPos;                                                        │
  │   s6 = [];                                                                 │
  │   s7 = input.charAt(peg$currPos);                                          │
  │   if (peg$r0.test(s7)) {                                                   │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "class.match",                                                 │
  │       rule: "INDENTATION",                                                 │
  │       result: input.charAt(peg$currPos-1),                                 │
  │       details: peg$r0.toString(),                                          │
  │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),     │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s7 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e2); }                       │
  │     peg$tracer.trace({                                                     │
  │       type: "class.fail",                                                  │
  │       rule: "INDENTATION",                                                 │
  │       details: peg$r0.toString(),                                          │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   while (s7 !== peg$FAILED) {                                              │
  │     s6.push(s7);                                                           │
  │     s7 = input.charAt(peg$currPos);                                        │
  │     if (peg$r0.test(s7)) {                                                 │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "class.match",                                               │
  │         rule: "INDENTATION",                                               │
  │         result: input.charAt(peg$currPos-1),                               │
  │         details: peg$r0.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │       });                                                                  │
  │     } else {                                                               │
  │       s7 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e2); }                     │
  │       peg$tracer.trace({                                                   │
  │         type: "class.fail",                                                │
  │         rule: "INDENTATION",                                               │
  │         details: peg$r0.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │   }                                                                        │
  │   if (input.charCodeAt(peg$currPos) === 10) {                              │
  │     s7 = peg$c2;                                                           │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "string.match",                                                │
  │       rule: "INDENTATION",                                                 │
  │       result: "\n",                                                        │
  │       location: peg$computeLocation(startPos, peg$currPos, true),          │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s7 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e1); }                       │
  │     peg$tracer.trace({                                                     │
  │       type: "string.fail",                                                 │
  │       rule: "INDENTATION",                                                 │
  │       details: "\n",                                                       │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   if (s7 !== peg$FAILED) {                                                 │
  │     s6 = [s6, s7];                                                         │
  │     s5 = s6;                                                               │
  │   } else {                                                                 │
  │     peg$currPos = s5;                                                      │
  │     s5 = peg$FAILED;                                                       │
  │   }                                                                        │
  │                                                                            │
  │   while (s5 !== peg$FAILED) {                                              │
  │     s4.push(s5);                                                           │
  │     s5 = peg$currPos;                                                      │
  │     s6 = [];                                                               │
  │     s7 = input.charAt(peg$currPos);                                        │
  │     if (peg$r0.test(s7)) {                                                 │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "class.match",                                               │
  │         rule: "INDENTATION",                                               │
  │         result: input.charAt(peg$currPos-1),                               │
  │         details: peg$r0.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │       });                                                                  │
  │     } else {                                                               │
  │       s7 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e2); }                     │
  │       peg$tracer.trace({                                                   │
  │         type: "class.fail",                                                │
  │         rule: "INDENTATION",                                               │
  │         details: peg$r0.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │     while (s7 !== peg$FAILED) {                                            │
  │       s6.push(s7);                                                         │
  │       s7 = input.charAt(peg$currPos);                                      │
  │       if (peg$r0.test(s7)) {                                               │
  │         peg$currPos++;                                                     │
  │         peg$tracer.trace({                                                 │
  │           type: "class.match",                                             │
  │           rule: "INDENTATION",                                             │
  │           result: input.charAt(peg$currPos-1),                             │
  │           details: peg$r0.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │         });                                                                │
  │       } else {                                                             │
  │         s7 = peg$FAILED;                                                   │
  │         if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
  │         peg$tracer.trace({                                                 │
  │           type: "class.fail",                                              │
  │           rule: "INDENTATION",                                             │
  │           details: peg$r0.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │         });                                                                │
  │       }                                                                    │
  │     }                                                                      │
  │     if (input.charCodeAt(peg$currPos) === 10) {                            │
  │       s7 = peg$c2;                                                         │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "string.match",                                              │
  │         rule: "INDENTATION",                                               │
  │         result: "\n",                                                      │
  │         location: peg$computeLocation(startPos, peg$currPos, true),        │
  │       });                                                                  │
  │     } else {                                                               │
  │       s7 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e1); }                     │
  │       peg$tracer.trace({                                                   │
  │         type: "string.fail",                                               │
  │         rule: "INDENTATION",                                               │
  │         details: "\n",                                                     │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │     if (s7 !== peg$FAILED) {                                               │
  │       s6 = [s6, s7];                                                       │
  │       s5 = s6;                                                             │
  │     } else {                                                               │
  │       peg$currPos = s5;                                                    │
  │       s5 = peg$FAILED;                                                     │
  │     }                                                                      │
  │   }                                                                        │
  │                                                                            │
  │   s5 = [];                                                                 │
  │   if (input.charCodeAt(peg$currPos) === 9) {                               │
  │     s6 = peg$c3;                                                           │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "string.match",                                                │
  │       rule: "INDENTATION",                                                 │
  │       result: "\t",                                                        │
  │       location: peg$computeLocation(startPos, peg$currPos, true),          │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s6 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e3); }                       │
  │     peg$tracer.trace({                                                     │
  │       type: "string.fail",                                                 │
  │       rule: "INDENTATION",                                                 │
  │       details: "\t",                                                       │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   while (s6 !== peg$FAILED) {                                              │
  │     s5.push(s6);                                                           │
  │     if (input.charCodeAt(peg$currPos) === 9) {                             │
  │       s6 = peg$c3;                                                         │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "string.match",                                              │
  │         rule: "INDENTATION",                                               │
  │         result: "\t",                                                      │
  │         location: peg$computeLocation(startPos, peg$currPos, true),        │
  │       });                                                                  │
  │     } else {                                                               │
  │       s6 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e3); }                     │
  │       peg$tracer.trace({                                                   │
  │         type: "string.fail",                                               │
  │         rule: "INDENTATION",                                               │
  │         details: "\t",                                                     │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │   }                                                                        │
  │                                                                            │
  │   s1 = s5;                                                                 │
  │                                                                            │
  │ } else {                                                                   │
  │   peg$currPos = s1;                                                        │
  │   s1 = peg$FAILED;                                                         │
  │                                                                            │
  │ }                                                                          │
  └────────────────────────────────────────────────────────────────────────────┘
  OP[216]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 1]:  2 PUSH_NULL
    ┌───────────────  New Code  ───────────────┐
    │ s1 = null;                               │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 === peg$FAILED) {                 │
  │   s1 = null;                             │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[225]: 24 LOAD_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = s0;                       │
  └──────────────────────────────────────────┘
  OP[227]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$f8(s1);                         │
  └──────────────────────────────────────────┘
  OP[232]:  9 NIP
  ┌───────────────  New Code  ───────────────┐
  │ s0 = s1;                                 │
  └──────────────────────────────────────────┘

┌─────────────────────────────  INDENTATION CODE  ─────────────────────────────┐
│ function peg$parse_INDENTATION() {                                           │
│                                                                              │
│   var startPos = peg$currPos;                                                │
│   var s0, s1, s2, s3, s4, s5, s6, s7;                                        │
│                                                                              │
│   peg$tracer.trace({                                                         │
│     type: "rule.enter",                                                      │
│     rule: "INDENTATION",                                                     │
│     location: peg$computeLocation(startPos, startPos, true),                 │
│   });                                                                        │
│                                                                              │
│   s0 = peg$currPos;                                                          │
│   s1 = peg$currPos;                                                          │
│   if (input.charCodeAt(peg$currPos) === 13) {                                │
│     s2 = peg$c1;                                                             │
│     peg$currPos++;                                                           │
│     peg$tracer.trace({                                                       │
│       type: "string.match",                                                  │
│       rule: "INDENTATION",                                                   │
│       result: "\r",                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     s2 = peg$FAILED;                                                         │
│     if (peg$silentFails === 0) { peg$fail(peg$e0); }                         │
│     peg$tracer.trace({                                                       │
│       type: "string.fail",                                                   │
│       rule: "INDENTATION",                                                   │
│       details: "\r",                                                         │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),         │
│     });                                                                      │
│   }                                                                          │
│   if (s2 === peg$FAILED) {                                                   │
│     s2 = null;                                                               │
│   }                                                                          │
│   if (input.charCodeAt(peg$currPos) === 10) {                                │
│     s3 = peg$c2;                                                             │
│     peg$currPos++;                                                           │
│     peg$tracer.trace({                                                       │
│       type: "string.match",                                                  │
│       rule: "INDENTATION",                                                   │
│       result: "\n",                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     s3 = peg$FAILED;                                                         │
│     if (peg$silentFails === 0) { peg$fail(peg$e1); }                         │
│     peg$tracer.trace({                                                       │
│       type: "string.fail",                                                   │
│       rule: "INDENTATION",                                                   │
│       details: "\n",                                                         │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),         │
│     });                                                                      │
│   }                                                                          │
│   if (s3 !== peg$FAILED) {                                                   │
│     s4 = [];                                                                 │
│     s5 = peg$currPos;                                                        │
│     s6 = [];                                                                 │
│     s7 = input.charAt(peg$currPos);                                          │
│     if (peg$r0.test(s7)) {                                                   │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "class.match",                                                 │
│         rule: "INDENTATION",                                                 │
│         result: input.charAt(peg$currPos-1),                                 │
│         details: peg$r0.toString(),                                          │
│         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),     │
│       });                                                                    │
│     } else {                                                                 │
│       s7 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e2); }                       │
│       peg$tracer.trace({                                                     │
│         type: "class.fail",                                                  │
│         rule: "INDENTATION",                                                 │
│         details: peg$r0.toString(),                                          │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     while (s7 !== peg$FAILED) {                                              │
│       s6.push(s7);                                                           │
│       s7 = input.charAt(peg$currPos);                                        │
│       if (peg$r0.test(s7)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "INDENTATION",                                               │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r0.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s7 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e2); }                     │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "INDENTATION",                                               │
│           details: peg$r0.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│     }                                                                        │
│     if (input.charCodeAt(peg$currPos) === 10) {                              │
│       s7 = peg$c2;                                                           │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "string.match",                                                │
│         rule: "INDENTATION",                                                 │
│         result: "\n",                                                        │
│         location: peg$computeLocation(startPos, peg$currPos, true),          │
│       });                                                                    │
│     } else {                                                                 │
│       s7 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e1); }                       │
│       peg$tracer.trace({                                                     │
│         type: "string.fail",                                                 │
│         rule: "INDENTATION",                                                 │
│         details: "\n",                                                       │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     if (s7 !== peg$FAILED) {                                                 │
│       s6 = [s6, s7];                                                         │
│       s5 = s6;                                                               │
│     } else {                                                                 │
│       peg$currPos = s5;                                                      │
│       s5 = peg$FAILED;                                                       │
│     }                                                                        │
│     while (s5 !== peg$FAILED) {                                              │
│       s4.push(s5);                                                           │
│       s5 = peg$currPos;                                                      │
│       s6 = [];                                                               │
│       s7 = input.charAt(peg$currPos);                                        │
│       if (peg$r0.test(s7)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "INDENTATION",                                               │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r0.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s7 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e2); }                     │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "INDENTATION",                                               │
│           details: peg$r0.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│       while (s7 !== peg$FAILED) {                                            │
│         s6.push(s7);                                                         │
│         s7 = input.charAt(peg$currPos);                                      │
│         if (peg$r0.test(s7)) {                                               │
│           peg$currPos++;                                                     │
│           peg$tracer.trace({                                                 │
│             type: "class.match",                                             │
│             rule: "INDENTATION",                                             │
│             result: input.charAt(peg$currPos-1),                             │
│             details: peg$r0.toString(),                                      │
│             location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
│           });                                                                │
│         } else {                                                             │
│           s7 = peg$FAILED;                                                   │
│           if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
│           peg$tracer.trace({                                                 │
│             type: "class.fail",                                              │
│             rule: "INDENTATION",                                             │
│             details: peg$r0.toString(),                                      │
│             location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│           });                                                                │
│         }                                                                    │
│       }                                                                      │
│       if (input.charCodeAt(peg$currPos) === 10) {                            │
│         s7 = peg$c2;                                                         │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "string.match",                                              │
│           rule: "INDENTATION",                                               │
│           result: "\n",                                                      │
│           location: peg$computeLocation(startPos, peg$currPos, true),        │
│         });                                                                  │
│       } else {                                                               │
│         s7 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e1); }                     │
│         peg$tracer.trace({                                                   │
│           type: "string.fail",                                               │
│           rule: "INDENTATION",                                               │
│           details: "\n",                                                     │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│       if (s7 !== peg$FAILED) {                                               │
│         s6 = [s6, s7];                                                       │
│         s5 = s6;                                                             │
│       } else {                                                               │
│         peg$currPos = s5;                                                    │
│         s5 = peg$FAILED;                                                     │
│       }                                                                      │
│     }                                                                        │
│     s5 = [];                                                                 │
│     if (input.charCodeAt(peg$currPos) === 9) {                               │
│       s6 = peg$c3;                                                           │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "string.match",                                                │
│         rule: "INDENTATION",                                                 │
│         result: "\t",                                                        │
│         location: peg$computeLocation(startPos, peg$currPos, true),          │
│       });                                                                    │
│     } else {                                                                 │
│       s6 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e3); }                       │
│       peg$tracer.trace({                                                     │
│         type: "string.fail",                                                 │
│         rule: "INDENTATION",                                                 │
│         details: "\t",                                                       │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     while (s6 !== peg$FAILED) {                                              │
│       s5.push(s6);                                                           │
│       if (input.charCodeAt(peg$currPos) === 9) {                             │
│         s6 = peg$c3;                                                         │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "string.match",                                              │
│           rule: "INDENTATION",                                               │
│           result: "\t",                                                      │
│           location: peg$computeLocation(startPos, peg$currPos, true),        │
│         });                                                                  │
│       } else {                                                               │
│         s6 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e3); }                     │
│         peg$tracer.trace({                                                   │
│           type: "string.fail",                                               │
│           rule: "INDENTATION",                                               │
│           details: "\t",                                                     │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│     }                                                                        │
│     s1 = s5;                                                                 │
│   } else {                                                                   │
│     peg$currPos = s1;                                                        │
│     s1 = peg$FAILED;                                                         │
│   }                                                                          │
│   if (s1 === peg$FAILED) {                                                   │
│     s1 = null;                                                               │
│   }                                                                          │
│                                                                              │
│   peg$savedPos = s0;                                                         │
│   s1 = peg$f8(s1);                                                           │
│   s0 = s1;                                                                   │
│                                                                              │
│                                                                              │
│   if (s0 !== peg$FAILED) {                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.match",                                                    │
│       rule: "INDENTATION",                                                   │
│       result: s0,                                                            │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.fail",                                                     │
│       rule: "INDENTATION",                                                   │
│       location: peg$computeLocation(startPos, startPos, true),               │
│     });                                                                      │
│   }                                                                          │
│                                                                              │
│   return s0;                                                                 │
│ }                                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
========================================
RULE: token
========================================
  OP[ 4]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$parse_boolean();                │
  └──────────────────────────────────────────┘
  OP[ 7]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 3]: 27 RULE
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$parse_number();                 │
    └──────────────────────────────────────────┘
    OP[ 6]: 14 IF_ERROR
      OP[ 0]:  6 POP
      OP[ 3]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$parse_string();                 │
      └──────────────────────────────────────────┘
      OP[ 6]: 14 IF_ERROR
        OP[ 0]:  6 POP
        OP[ 3]: 27 RULE
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$parse_identifier();             │
        └──────────────────────────────────────────┘
        OP[ 6]: 14 IF_ERROR
          OP[ 0]:  6 POP
          OP[ 3]: 27 RULE
          ┌───────────────  New Code  ───────────────┐
          │ s0 = peg$parse_NL();                     │
          └──────────────────────────────────────────┘
        ┌───────────────  New Code  ───────────────┐
        │ if (s0 === peg$FAILED) {                 │
        │   s0 = peg$parse_NL();                   │
        │                                          │
        │ }                                        │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s0 === peg$FAILED) {                 │
      │   s0 = peg$parse_identifier();           │
      │                                          │
      │   if (s0 === peg$FAILED) {               │
      │     s0 = peg$parse_NL();                 │
      │                                          │
      │   }                                      │
      │ }                                        │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s0 === peg$FAILED) {                 │
    │   s0 = peg$parse_string();               │
    │                                          │
    │   if (s0 === peg$FAILED) {               │
    │     s0 = peg$parse_identifier();         │
    │                                          │
    │     if (s0 === peg$FAILED) {             │
    │       s0 = peg$parse_NL();               │
    │                                          │
    │     }                                    │
    │   }                                      │
    │ }                                        │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s0 === peg$FAILED) {                 │
  │   s0 = peg$parse_number();               │
  │                                          │
  │   if (s0 === peg$FAILED) {               │
  │     s0 = peg$parse_string();             │
  │                                          │
  │     if (s0 === peg$FAILED) {             │
  │       s0 = peg$parse_identifier();       │
  │                                          │
  │       if (s0 === peg$FAILED) {           │
  │         s0 = peg$parse_NL();             │
  │                                          │
  │       }                                  │
  │     }                                    │
  │   }                                      │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  token CODE  ───────────────────────────┐
│ function peg$parse_token() {                                      │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0;                                                         │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "token",                                                │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$parse_boolean();                                       │
│                                                                   │
│   if (s0 === peg$FAILED) {                                        │
│     s0 = peg$parse_number();                                      │
│     if (s0 === peg$FAILED) {                                      │
│       s0 = peg$parse_string();                                    │
│       if (s0 === peg$FAILED) {                                    │
│         s0 = peg$parse_identifier();                              │
│         if (s0 === peg$FAILED) {                                  │
│           s0 = peg$parse_NL();                                    │
│         }                                                         │
│       }                                                           │
│     }                                                             │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "token",                                              │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "token",                                              │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: boolean
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[ 7]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c5;                             │
    │ peg$currPos += 4;                        │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s1 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e4); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.substr(peg$currPos, 4) === peg$c5) {                     │
  │   s1 = peg$c5;                                                     │
  │   peg$currPos += 4;                                                │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "boolean",                                               │
  │     result: "true",                                                │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e4); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "boolean",                                               │
  │     details: "true",                                               │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[16]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$f9();                           │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s1 = peg$f9();                         │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[25]:  9 NIP
  ┌───────────────  New Code  ───────────────┐
  │ s0 = s1;                                 │
  └──────────────────────────────────────────┘
  OP[27]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 3]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[ 6]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s1 = peg$c6;                             │
      │ peg$currPos += 5;                        │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s1 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e5); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.substr(peg$currPos, 5) === peg$c6) {                     │
    │   s1 = peg$c6;                                                     │
    │   peg$currPos += 5;                                                │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "boolean",                                               │
    │     result: "false",                                               │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s1 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e5); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "boolean",                                               │
    │     details: "false",                                              │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[15]: 15 IF_NOT_ERROR
      OP[ 0]: 24 LOAD_SAVED_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$savedPos = s0;                       │
      └──────────────────────────────────────────┘
      OP[ 2]: 26 CALL
      ┌───────────────  New Code  ───────────────┐
      │ s1 = peg$f10();                          │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s1 !== peg$FAILED) {                 │
    │   peg$savedPos = s0;                     │
    │   s1 = peg$f10();                        │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[24]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s0 = s1;                                 │
    └──────────────────────────────────────────┘
  ┌─────────────────────────────  New Code  ─────────────────────────────┐
  │ if (s0 === peg$FAILED) {                                             │
  │   s0 = peg$currPos;                                                  │
  │   if (input.substr(peg$currPos, 5) === peg$c6) {                     │
  │     s1 = peg$c6;                                                     │
  │     peg$currPos += 5;                                                │
  │     peg$tracer.trace({                                               │
  │       type: "string.match",                                          │
  │       rule: "boolean",                                               │
  │       result: "false",                                               │
  │       location: peg$computeLocation(startPos, peg$currPos, true),    │
  │     });                                                              │
  │   } else {                                                           │
  │     s1 = peg$FAILED;                                                 │
  │     if (peg$silentFails === 0) { peg$fail(peg$e5); }                 │
  │     peg$tracer.trace({                                               │
  │       type: "string.fail",                                           │
  │       rule: "boolean",                                               │
  │       details: "false",                                              │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │     });                                                              │
  │   }                                                                  │
  │                                                                      │
  │   if (s1 !== peg$FAILED) {                                           │
  │     peg$savedPos = s0;                                               │
  │     s1 = peg$f10();                                                  │
  │   }                                                                  │
  │   s0 = s1;                                                           │
  │                                                                      │
  │ }                                                                    │
  └──────────────────────────────────────────────────────────────────────┘

┌────────────────────────────  boolean CODE  ────────────────────────────┐
│ function peg$parse_boolean() {                                         │
│                                                                        │
│   var startPos = peg$currPos;                                          │
│   var s0, s1;                                                          │
│                                                                        │
│   peg$tracer.trace({                                                   │
│     type: "rule.enter",                                                │
│     rule: "boolean",                                                   │
│     location: peg$computeLocation(startPos, startPos, true),           │
│   });                                                                  │
│                                                                        │
│   s0 = peg$currPos;                                                    │
│   if (input.substr(peg$currPos, 4) === peg$c5) {                       │
│     s1 = peg$c5;                                                       │
│     peg$currPos += 4;                                                  │
│     peg$tracer.trace({                                                 │
│       type: "string.match",                                            │
│       rule: "boolean",                                                 │
│       result: "true",                                                  │
│       location: peg$computeLocation(startPos, peg$currPos, true),      │
│     });                                                                │
│   } else {                                                             │
│     s1 = peg$FAILED;                                                   │
│     if (peg$silentFails === 0) { peg$fail(peg$e4); }                   │
│     peg$tracer.trace({                                                 │
│       type: "string.fail",                                             │
│       rule: "boolean",                                                 │
│       details: "true",                                                 │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│     });                                                                │
│   }                                                                    │
│   if (s1 !== peg$FAILED) {                                             │
│     peg$savedPos = s0;                                                 │
│     s1 = peg$f9();                                                     │
│   }                                                                    │
│   s0 = s1;                                                             │
│                                                                        │
│   if (s0 === peg$FAILED) {                                             │
│     s0 = peg$currPos;                                                  │
│     if (input.substr(peg$currPos, 5) === peg$c6) {                     │
│       s1 = peg$c6;                                                     │
│       peg$currPos += 5;                                                │
│       peg$tracer.trace({                                               │
│         type: "string.match",                                          │
│         rule: "boolean",                                               │
│         result: "false",                                               │
│         location: peg$computeLocation(startPos, peg$currPos, true),    │
│       });                                                              │
│     } else {                                                           │
│       s1 = peg$FAILED;                                                 │
│       if (peg$silentFails === 0) { peg$fail(peg$e5); }                 │
│       peg$tracer.trace({                                               │
│         type: "string.fail",                                           │
│         rule: "boolean",                                               │
│         details: "false",                                              │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│       });                                                              │
│     }                                                                  │
│     if (s1 !== peg$FAILED) {                                           │
│       peg$savedPos = s0;                                               │
│       s1 = peg$f10();                                                  │
│     }                                                                  │
│     s0 = s1;                                                           │
│   }                                                                    │
│                                                                        │
│                                                                        │
│   if (s0 !== peg$FAILED) {                                             │
│     peg$tracer.trace({                                                 │
│       type: "rule.match",                                              │
│       rule: "boolean",                                                 │
│       result: s0,                                                      │
│       location: peg$computeLocation(startPos, peg$currPos, true),      │
│     });                                                                │
│   } else {                                                             │
│     peg$tracer.trace({                                                 │
│       type: "rule.fail",                                               │
│       rule: "boolean",                                                 │
│       location: peg$computeLocation(startPos, startPos, true),         │
│     });                                                                │
│   }                                                                    │
│                                                                        │
│   return s0;                                                           │
│ }                                                                      │
└────────────────────────────────────────────────────────────────────────┘
========================================
RULE: number
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[16]:  4 PUSH_EMPTY_ARRAY
  ┌───────────────  New Code  ───────────────┐
  │ s2 = [];                                 │
  └──────────────────────────────────────────┘
  OP[19]: 20 MATCH_CHAR_CLASS
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s3 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e6); } │
    └──────────────────────────────────────────────────┘
  ┌─────────────────────────────  New Code  ─────────────────────────────┐
  │ s3 = input.charAt(peg$currPos);                                      │
  │ if (peg$r1.test(s3)) {                                               │
  │   peg$currPos++;                                                     │
  │   peg$tracer.trace({                                                 │
  │     type: "class.match",                                             │
  │     rule: "number",                                                  │
  │     result: input.charAt(peg$currPos-1),                             │
  │     details: peg$r1.toString(),                                      │
  │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │   });                                                                │
  │ } else {                                                             │
  │   s3 = peg$FAILED;                                                   │
  │   if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
  │   peg$tracer.trace({                                                 │
  │     type: "class.fail",                                              │
  │     rule: "number",                                                  │
  │     details: peg$r1.toString(),                                      │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │   });                                                                │
  │ }                                                                    │
  └──────────────────────────────────────────────────────────────────────┘
  OP[28]: 15 IF_NOT_ERROR
    OP[ 0]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s2.push(s3);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s3 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e6); } │
        └──────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s3 = input.charAt(peg$currPos);                                      │
      │ if (peg$r1.test(s3)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "number",                                                  │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r1.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s3 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "number",                                                  │
      │     details: peg$r1.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
    ┌──────────────────────────────  New Code  ──────────────────────────────┐
    │ while (s3 !== peg$FAILED) {                                            │
    │   s2.push(s3);                                                         │
    │   s3 = input.charAt(peg$currPos);                                      │
    │   if (peg$r1.test(s3)) {                                               │
    │     peg$currPos++;                                                     │
    │     peg$tracer.trace({                                                 │
    │       type: "class.match",                                             │
    │       rule: "number",                                                  │
    │       result: input.charAt(peg$currPos-1),                             │
    │       details: peg$r1.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │     });                                                                │
    │   } else {                                                             │
    │     s3 = peg$FAILED;                                                   │
    │     if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
    │     peg$tracer.trace({                                                 │
    │       type: "class.fail",                                              │
    │       rule: "number",                                                  │
    │       details: peg$r1.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │     });                                                                │
    │   }                                                                    │
    │                                                                        │
    │ }                                                                      │
    └────────────────────────────────────────────────────────────────────────┘
    OP[14]:  6 POP
    OP[ 0]:  6 POP
    OP[ 1]:  6 POP
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────────────────────  New Code  ───────────────────────────────┐
  │ if (s3 !== peg$FAILED) {                                                 │
  │   while (s3 !== peg$FAILED) {                                            │
  │     s2.push(s3);                                                         │
  │     s3 = input.charAt(peg$currPos);                                      │
  │     if (peg$r1.test(s3)) {                                               │
  │       peg$currPos++;                                                     │
  │       peg$tracer.trace({                                                 │
  │         type: "class.match",                                             │
  │         rule: "number",                                                  │
  │         result: input.charAt(peg$currPos-1),                             │
  │         details: peg$r1.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │       });                                                                │
  │     } else {                                                             │
  │       s3 = peg$FAILED;                                                   │
  │       if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
  │       peg$tracer.trace({                                                 │
  │         type: "class.fail",                                              │
  │         rule: "number",                                                  │
  │         details: peg$r1.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │       });                                                                │
  │     }                                                                    │
  │                                                                          │
  │   }                                                                      │
  │ } else {                                                                 │
  │   s2 = peg$FAILED;                                                       │
  │ }                                                                        │
  └──────────────────────────────────────────────────────────────────────────┘
  OP[50]: 15 IF_NOT_ERROR
    OP[ 0]:  6 POP
    OP[ 1]: 12 TEXT
    ┌───────────────  New Code  ───────────────┐
    │ s1 = input.substring(s1, peg$currPos);   │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s1 = s2;                                 │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │   s1 = input.substring(s1, peg$currPos); │
  │                                          │
  │ } else {                                 │
  │   s1 = s2;                               │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[60]: 15 IF_NOT_ERROR
    OP[ 8]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$currPos;                        │
    │                                          │
    └──────────────────────────────────────────┘
    OP[15]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s3 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[18]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s4 = peg$c8;                             │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s4 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e7); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 46) {                        │
    │   s4 = peg$c8;                                                     │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "number",                                                │
    │     result: ".",                                                   │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s4 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e7); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "number",                                                │
    │     details: ".",                                                  │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[27]: 15 IF_NOT_ERROR
      OP[ 2]:  4 PUSH_EMPTY_ARRAY
      ┌───────────────  New Code  ───────────────┐
      │ s5 = [];                                 │
      └──────────────────────────────────────────┘
      OP[ 5]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s6 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e6); } │
        └──────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s6 = input.charAt(peg$currPos);                                      │
      │ if (peg$r1.test(s6)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "number",                                                  │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r1.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s6 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "number",                                                  │
      │     details: peg$r1.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
      OP[14]: 16 WHILE_NOT_ERROR
        OP[ 0]: 10 APPEND
        ┌───────────────  New Code  ───────────────┐
        │ s5.push(s6);                             │
        └──────────────────────────────────────────┘
        OP[ 3]: 20 MATCH_CHAR_CLASS
          OP[ 0]: 23 FAIL
          ┌───────────────────  New Code  ───────────────────┐
          │ s6 = peg$FAILED;                                 │
          │ if (peg$silentFails === 0) { peg$fail(peg$e6); } │
          └──────────────────────────────────────────────────┘
        ┌─────────────────────────────  New Code  ─────────────────────────────┐
        │ s6 = input.charAt(peg$currPos);                                      │
        │ if (peg$r1.test(s6)) {                                               │
        │   peg$currPos++;                                                     │
        │   peg$tracer.trace({                                                 │
        │     type: "class.match",                                             │
        │     rule: "number",                                                  │
        │     result: input.charAt(peg$currPos-1),                             │
        │     details: peg$r1.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
        │   });                                                                │
        │ } else {                                                             │
        │   s6 = peg$FAILED;                                                   │
        │   if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
        │   peg$tracer.trace({                                                 │
        │     type: "class.fail",                                              │
        │     rule: "number",                                                  │
        │     details: peg$r1.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
        │   });                                                                │
        │ }                                                                    │
        └──────────────────────────────────────────────────────────────────────┘
      ┌──────────────────────────────  New Code  ──────────────────────────────┐
      │ while (s6 !== peg$FAILED) {                                            │
      │   s5.push(s6);                                                         │
      │   s6 = input.charAt(peg$currPos);                                      │
      │   if (peg$r1.test(s6)) {                                               │
      │     peg$currPos++;                                                     │
      │     peg$tracer.trace({                                                 │
      │       type: "class.match",                                             │
      │       rule: "number",                                                  │
      │       result: input.charAt(peg$currPos-1),                             │
      │       details: peg$r1.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │     });                                                                │
      │   } else {                                                             │
      │     s6 = peg$FAILED;                                                   │
      │     if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
      │     peg$tracer.trace({                                                 │
      │       type: "class.fail",                                              │
      │       rule: "number",                                                  │
      │       details: peg$r1.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │     });                                                                │
      │   }                                                                    │
      │                                                                        │
      │ }                                                                      │
      └────────────────────────────────────────────────────────────────────────┘
      OP[28]:  6 POP
      OP[30]: 11 WRAP
      ┌───────────────  New Code  ───────────────┐
      │ s4 = [s4, s5];                           │
      └──────────────────────────────────────────┘
      OP[32]:  9 NIP
      ┌───────────────  New Code  ───────────────┐
      │ s3 = s4;                                 │
      └──────────────────────────────────────────┘
      OP[ 0]:  6 POP
      OP[ 1]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s3;                        │
      └──────────────────────────────────────────┘
      OP[ 2]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s3 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────────────────────  New Code  ───────────────────────────────┐
    │ if (s4 !== peg$FAILED) {                                                 │
    │   s5 = [];                                                               │
    │   s6 = input.charAt(peg$currPos);                                        │
    │   if (peg$r1.test(s6)) {                                                 │
    │     peg$currPos++;                                                       │
    │     peg$tracer.trace({                                                   │
    │       type: "class.match",                                               │
    │       rule: "number",                                                    │
    │       result: input.charAt(peg$currPos-1),                               │
    │       details: peg$r1.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
    │     });                                                                  │
    │   } else {                                                               │
    │     s6 = peg$FAILED;                                                     │
    │     if (peg$silentFails === 0) { peg$fail(peg$e6); }                     │
    │     peg$tracer.trace({                                                   │
    │       type: "class.fail",                                                │
    │       rule: "number",                                                    │
    │       details: peg$r1.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
    │     });                                                                  │
    │   }                                                                      │
    │                                                                          │
    │   while (s6 !== peg$FAILED) {                                            │
    │     s5.push(s6);                                                         │
    │     s6 = input.charAt(peg$currPos);                                      │
    │     if (peg$r1.test(s6)) {                                               │
    │       peg$currPos++;                                                     │
    │       peg$tracer.trace({                                                 │
    │         type: "class.match",                                             │
    │         rule: "number",                                                  │
    │         result: input.charAt(peg$currPos-1),                             │
    │         details: peg$r1.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │       });                                                                │
    │     } else {                                                             │
    │       s6 = peg$FAILED;                                                   │
    │       if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
    │       peg$tracer.trace({                                                 │
    │         type: "class.fail",                                              │
    │         rule: "number",                                                  │
    │         details: peg$r1.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │       });                                                                │
    │     }                                                                    │
    │   }                                                                      │
    │                                                                          │
    │   s4 = [s4, s5];                                                         │
    │   s3 = s4;                                                               │
    │ } else {                                                                 │
    │   peg$currPos = s3;                                                      │
    │   s3 = peg$FAILED;                                                       │
    │ }                                                                        │
    └──────────────────────────────────────────────────────────────────────────┘
    OP[68]: 14 IF_ERROR
      OP[ 0]:  6 POP
      OP[ 1]:  2 PUSH_NULL
      ┌───────────────  New Code  ───────────────┐
      │ s3 = null;                               │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s3 === peg$FAILED) {                 │
    │   s3 = null;                             │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[74]:  6 POP
    OP[75]: 12 TEXT
    OP[80]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[82]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f11(s1, s2);                    │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌────────────────────────────────  New Code  ────────────────────────────────┐
  │ if (s1 !== peg$FAILED) {                                                   │
  │   s2 = peg$currPos;                                                        │
  │   s3 = peg$currPos;                                                        │
  │   if (input.charCodeAt(peg$currPos) === 46) {                              │
  │     s4 = peg$c8;                                                           │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "string.match",                                                │
  │       rule: "number",                                                      │
  │       result: ".",                                                         │
  │       location: peg$computeLocation(startPos, peg$currPos, true),          │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s4 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e7); }                       │
  │     peg$tracer.trace({                                                     │
  │       type: "string.fail",                                                 │
  │       rule: "number",                                                      │
  │       details: ".",                                                        │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   if (s4 !== peg$FAILED) {                                                 │
  │     s5 = [];                                                               │
  │     s6 = input.charAt(peg$currPos);                                        │
  │     if (peg$r1.test(s6)) {                                                 │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "class.match",                                               │
  │         rule: "number",                                                    │
  │         result: input.charAt(peg$currPos-1),                               │
  │         details: peg$r1.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │       });                                                                  │
  │     } else {                                                               │
  │       s6 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e6); }                     │
  │       peg$tracer.trace({                                                   │
  │         type: "class.fail",                                                │
  │         rule: "number",                                                    │
  │         details: peg$r1.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │     while (s6 !== peg$FAILED) {                                            │
  │       s5.push(s6);                                                         │
  │       s6 = input.charAt(peg$currPos);                                      │
  │       if (peg$r1.test(s6)) {                                               │
  │         peg$currPos++;                                                     │
  │         peg$tracer.trace({                                                 │
  │           type: "class.match",                                             │
  │           rule: "number",                                                  │
  │           result: input.charAt(peg$currPos-1),                             │
  │           details: peg$r1.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │         });                                                                │
  │       } else {                                                             │
  │         s6 = peg$FAILED;                                                   │
  │         if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
  │         peg$tracer.trace({                                                 │
  │           type: "class.fail",                                              │
  │           rule: "number",                                                  │
  │           details: peg$r1.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │         });                                                                │
  │       }                                                                    │
  │     }                                                                      │
  │     s4 = [s4, s5];                                                         │
  │     s3 = s4;                                                               │
  │   } else {                                                                 │
  │     peg$currPos = s3;                                                      │
  │     s3 = peg$FAILED;                                                       │
  │   }                                                                        │
  │   if (s3 === peg$FAILED) {                                                 │
  │     s3 = null;                                                             │
  │   }                                                                        │
  │   s2 = input.substring(s2, peg$currPos);                                   │
  │                                                                            │
  │   peg$savedPos = s0;                                                       │
  │   s0 = peg$f11(s1, s2);                                                    │
  │ } else {                                                                   │
  │   peg$currPos = s0;                                                        │
  │   s0 = peg$FAILED;                                                         │
  │ }                                                                          │
  └────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────  number CODE  ────────────────────────────────┐
│ function peg$parse_number() {                                                │
│                                                                              │
│   var startPos = peg$currPos;                                                │
│   var s0, s1, s2, s3, s4, s5, s6;                                            │
│                                                                              │
│   peg$tracer.trace({                                                         │
│     type: "rule.enter",                                                      │
│     rule: "number",                                                          │
│     location: peg$computeLocation(startPos, startPos, true),                 │
│   });                                                                        │
│                                                                              │
│   s0 = peg$currPos;                                                          │
│   s1 = peg$currPos;                                                          │
│   s2 = [];                                                                   │
│   s3 = input.charAt(peg$currPos);                                            │
│   if (peg$r1.test(s3)) {                                                     │
│     peg$currPos++;                                                           │
│     peg$tracer.trace({                                                       │
│       type: "class.match",                                                   │
│       rule: "number",                                                        │
│       result: input.charAt(peg$currPos-1),                                   │
│       details: peg$r1.toString(),                                            │
│       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),       │
│     });                                                                      │
│   } else {                                                                   │
│     s3 = peg$FAILED;                                                         │
│     if (peg$silentFails === 0) { peg$fail(peg$e6); }                         │
│     peg$tracer.trace({                                                       │
│       type: "class.fail",                                                    │
│       rule: "number",                                                        │
│       details: peg$r1.toString(),                                            │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),         │
│     });                                                                      │
│   }                                                                          │
│   if (s3 !== peg$FAILED) {                                                   │
│     while (s3 !== peg$FAILED) {                                              │
│       s2.push(s3);                                                           │
│       s3 = input.charAt(peg$currPos);                                        │
│       if (peg$r1.test(s3)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "number",                                                    │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r1.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s3 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e6); }                     │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "number",                                                    │
│           details: peg$r1.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│     }                                                                        │
│   } else {                                                                   │
│     s2 = peg$FAILED;                                                         │
│   }                                                                          │
│   if (s2 !== peg$FAILED) {                                                   │
│     s1 = input.substring(s1, peg$currPos);                                   │
│   } else {                                                                   │
│     s1 = s2;                                                                 │
│   }                                                                          │
│   if (s1 !== peg$FAILED) {                                                   │
│     s2 = peg$currPos;                                                        │
│     s3 = peg$currPos;                                                        │
│     if (input.charCodeAt(peg$currPos) === 46) {                              │
│       s4 = peg$c8;                                                           │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "string.match",                                                │
│         rule: "number",                                                      │
│         result: ".",                                                         │
│         location: peg$computeLocation(startPos, peg$currPos, true),          │
│       });                                                                    │
│     } else {                                                                 │
│       s4 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e7); }                       │
│       peg$tracer.trace({                                                     │
│         type: "string.fail",                                                 │
│         rule: "number",                                                      │
│         details: ".",                                                        │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     if (s4 !== peg$FAILED) {                                                 │
│       s5 = [];                                                               │
│       s6 = input.charAt(peg$currPos);                                        │
│       if (peg$r1.test(s6)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "number",                                                    │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r1.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s6 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e6); }                     │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "number",                                                    │
│           details: peg$r1.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│       while (s6 !== peg$FAILED) {                                            │
│         s5.push(s6);                                                         │
│         s6 = input.charAt(peg$currPos);                                      │
│         if (peg$r1.test(s6)) {                                               │
│           peg$currPos++;                                                     │
│           peg$tracer.trace({                                                 │
│             type: "class.match",                                             │
│             rule: "number",                                                  │
│             result: input.charAt(peg$currPos-1),                             │
│             details: peg$r1.toString(),                                      │
│             location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
│           });                                                                │
│         } else {                                                             │
│           s6 = peg$FAILED;                                                   │
│           if (peg$silentFails === 0) { peg$fail(peg$e6); }                   │
│           peg$tracer.trace({                                                 │
│             type: "class.fail",                                              │
│             rule: "number",                                                  │
│             details: peg$r1.toString(),                                      │
│             location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│           });                                                                │
│         }                                                                    │
│       }                                                                      │
│       s4 = [s4, s5];                                                         │
│       s3 = s4;                                                               │
│     } else {                                                                 │
│       peg$currPos = s3;                                                      │
│       s3 = peg$FAILED;                                                       │
│     }                                                                        │
│     if (s3 === peg$FAILED) {                                                 │
│       s3 = null;                                                             │
│     }                                                                        │
│     s2 = input.substring(s2, peg$currPos);                                   │
│     peg$savedPos = s0;                                                       │
│     s0 = peg$f11(s1, s2);                                                    │
│   } else {                                                                   │
│     peg$currPos = s0;                                                        │
│     s0 = peg$FAILED;                                                         │
│   }                                                                          │
│                                                                              │
│                                                                              │
│   if (s0 !== peg$FAILED) {                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.match",                                                    │
│       rule: "number",                                                        │
│       result: s0,                                                            │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.fail",                                                     │
│       rule: "number",                                                        │
│       location: peg$computeLocation(startPos, startPos, true),               │
│     });                                                                      │
│   }                                                                          │
│                                                                              │
│   return s0;                                                                 │
│ }                                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
========================================
RULE: string
========================================
  OP[ 6]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[ 9]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c10;                            │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s1 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e8); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 34) {                        │
  │   s1 = peg$c10;                                                    │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "string",                                                │
  │     result: "\"",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e8); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "string",                                                │
  │     details: "\"",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[18]: 15 IF_NOT_ERROR
    OP[ 8]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$currPos;                        │
    │                                          │
    └──────────────────────────────────────────┘
    OP[11]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s3 = [];                                 │
    └──────────────────────────────────────────┘
    OP[14]: 20 MATCH_CHAR_CLASS
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s4 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e9); } │
      └──────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ s4 = input.charAt(peg$currPos);                                      │
    │ if (peg$r2.test(s4)) {                                               │
    │   peg$currPos++;                                                     │
    │   peg$tracer.trace({                                                 │
    │     type: "class.match",                                             │
    │     rule: "string",                                                  │
    │     result: input.charAt(peg$currPos-1),                             │
    │     details: peg$r2.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │   });                                                                │
    │ } else {                                                             │
    │   s4 = peg$FAILED;                                                   │
    │   if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
    │   peg$tracer.trace({                                                 │
    │     type: "class.fail",                                              │
    │     rule: "string",                                                  │
    │     details: peg$r2.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │   });                                                                │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[23]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s3.push(s4);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s4 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e9); } │
        └──────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s4 = input.charAt(peg$currPos);                                      │
      │ if (peg$r2.test(s4)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "string",                                                  │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r2.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s4 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "string",                                                  │
      │     details: peg$r2.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
    ┌──────────────────────────────  New Code  ──────────────────────────────┐
    │ while (s4 !== peg$FAILED) {                                            │
    │   s3.push(s4);                                                         │
    │   s4 = input.charAt(peg$currPos);                                      │
    │   if (peg$r2.test(s4)) {                                               │
    │     peg$currPos++;                                                     │
    │     peg$tracer.trace({                                                 │
    │       type: "class.match",                                             │
    │       rule: "string",                                                  │
    │       result: input.charAt(peg$currPos-1),                             │
    │       details: peg$r2.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │     });                                                                │
    │   } else {                                                             │
    │     s4 = peg$FAILED;                                                   │
    │     if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
    │     peg$tracer.trace({                                                 │
    │       type: "class.fail",                                              │
    │       rule: "string",                                                  │
    │       details: peg$r2.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │     });                                                                │
    │   }                                                                    │
    │                                                                        │
    │ }                                                                      │
    └────────────────────────────────────────────────────────────────────────┘
    OP[37]:  6 POP
    OP[39]:  6 POP
    OP[40]: 12 TEXT
    ┌───────────────  New Code  ───────────────┐
    │ s2 = input.substring(s2, peg$currPos);   │
    │                                          │
    └──────────────────────────────────────────┘
    OP[47]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s3 = peg$c10;                            │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s3 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e8); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 34) {                        │
    │   s3 = peg$c10;                                                    │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "string",                                                │
    │     result: "\"",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s3 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e8); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "string",                                                │
    │     details: "\"",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[56]: 15 IF_NOT_ERROR
      OP[ 0]: 24 LOAD_SAVED_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$savedPos = s0;                       │
      └──────────────────────────────────────────┘
      OP[ 2]: 26 CALL
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$f12(s2);                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s0;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s3 !== peg$FAILED) {                 │
    │   peg$savedPos = s0;                     │
    │   s0 = peg$f12(s2);                      │
    │ } else {                                 │
    │   peg$currPos = s0;                      │
    │   s0 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────────────────────  New Code  ───────────────────────────────┐
  │ if (s1 !== peg$FAILED) {                                                 │
  │   s2 = peg$currPos;                                                      │
  │   s3 = [];                                                               │
  │   s4 = input.charAt(peg$currPos);                                        │
  │   if (peg$r2.test(s4)) {                                                 │
  │     peg$currPos++;                                                       │
  │     peg$tracer.trace({                                                   │
  │       type: "class.match",                                               │
  │       rule: "string",                                                    │
  │       result: input.charAt(peg$currPos-1),                               │
  │       details: peg$r2.toString(),                                        │
  │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │     });                                                                  │
  │   } else {                                                               │
  │     s4 = peg$FAILED;                                                     │
  │     if (peg$silentFails === 0) { peg$fail(peg$e9); }                     │
  │     peg$tracer.trace({                                                   │
  │       type: "class.fail",                                                │
  │       rule: "string",                                                    │
  │       details: peg$r2.toString(),                                        │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │     });                                                                  │
  │   }                                                                      │
  │   while (s4 !== peg$FAILED) {                                            │
  │     s3.push(s4);                                                         │
  │     s4 = input.charAt(peg$currPos);                                      │
  │     if (peg$r2.test(s4)) {                                               │
  │       peg$currPos++;                                                     │
  │       peg$tracer.trace({                                                 │
  │         type: "class.match",                                             │
  │         rule: "string",                                                  │
  │         result: input.charAt(peg$currPos-1),                             │
  │         details: peg$r2.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │       });                                                                │
  │     } else {                                                             │
  │       s4 = peg$FAILED;                                                   │
  │       if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
  │       peg$tracer.trace({                                                 │
  │         type: "class.fail",                                              │
  │         rule: "string",                                                  │
  │         details: peg$r2.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │       });                                                                │
  │     }                                                                    │
  │   }                                                                      │
  │   s2 = input.substring(s2, peg$currPos);                                 │
  │                                                                          │
  │   if (input.charCodeAt(peg$currPos) === 34) {                            │
  │     s3 = peg$c10;                                                        │
  │     peg$currPos++;                                                       │
  │     peg$tracer.trace({                                                   │
  │       type: "string.match",                                              │
  │       rule: "string",                                                    │
  │       result: "\"",                                                      │
  │       location: peg$computeLocation(startPos, peg$currPos, true),        │
  │     });                                                                  │
  │   } else {                                                               │
  │     s3 = peg$FAILED;                                                     │
  │     if (peg$silentFails === 0) { peg$fail(peg$e8); }                     │
  │     peg$tracer.trace({                                                   │
  │       type: "string.fail",                                               │
  │       rule: "string",                                                    │
  │       details: "\"",                                                     │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │     });                                                                  │
  │   }                                                                      │
  │                                                                          │
  │   if (s3 !== peg$FAILED) {                                               │
  │     peg$savedPos = s0;                                                   │
  │     s0 = peg$f12(s2);                                                    │
  │   } else {                                                               │
  │     peg$currPos = s0;                                                    │
  │     s0 = peg$FAILED;                                                     │
  │   }                                                                      │
  │ } else {                                                                 │
  │   peg$currPos = s0;                                                      │
  │   s0 = peg$FAILED;                                                       │
  │ }                                                                        │
  └──────────────────────────────────────────────────────────────────────────┘
  OP[96]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 5]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[ 8]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s1 = peg$c12;                            │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ────────────────────┐
      │ s1 = peg$FAILED;                                  │
      │ if (peg$silentFails === 0) { peg$fail(peg$e10); } │
      └───────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 39) {                        │
    │   s1 = peg$c12;                                                    │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "string",                                                │
    │     result: "'",                                                   │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s1 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e10); }                │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "string",                                                │
    │     details: "'",                                                  │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[17]: 15 IF_NOT_ERROR
      OP[ 8]:  5 PUSH_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ s2 = peg$currPos;                        │
      │                                          │
      └──────────────────────────────────────────┘
      OP[11]:  4 PUSH_EMPTY_ARRAY
      ┌───────────────  New Code  ───────────────┐
      │ s3 = [];                                 │
      └──────────────────────────────────────────┘
      OP[14]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s4 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e11); } │
        └───────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s4 = input.charAt(peg$currPos);                                      │
      │ if (peg$r3.test(s4)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "string",                                                  │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r3.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s4 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "string",                                                  │
      │     details: peg$r3.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
      OP[23]: 16 WHILE_NOT_ERROR
        OP[ 0]: 10 APPEND
        ┌───────────────  New Code  ───────────────┐
        │ s3.push(s4);                             │
        └──────────────────────────────────────────┘
        OP[ 3]: 20 MATCH_CHAR_CLASS
          OP[ 0]: 23 FAIL
          ┌───────────────────  New Code  ────────────────────┐
          │ s4 = peg$FAILED;                                  │
          │ if (peg$silentFails === 0) { peg$fail(peg$e11); } │
          └───────────────────────────────────────────────────┘
        ┌─────────────────────────────  New Code  ─────────────────────────────┐
        │ s4 = input.charAt(peg$currPos);                                      │
        │ if (peg$r3.test(s4)) {                                               │
        │   peg$currPos++;                                                     │
        │   peg$tracer.trace({                                                 │
        │     type: "class.match",                                             │
        │     rule: "string",                                                  │
        │     result: input.charAt(peg$currPos-1),                             │
        │     details: peg$r3.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
        │   });                                                                │
        │ } else {                                                             │
        │   s4 = peg$FAILED;                                                   │
        │   if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
        │   peg$tracer.trace({                                                 │
        │     type: "class.fail",                                              │
        │     rule: "string",                                                  │
        │     details: peg$r3.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
        │   });                                                                │
        │ }                                                                    │
        └──────────────────────────────────────────────────────────────────────┘
      ┌──────────────────────────────  New Code  ──────────────────────────────┐
      │ while (s4 !== peg$FAILED) {                                            │
      │   s3.push(s4);                                                         │
      │   s4 = input.charAt(peg$currPos);                                      │
      │   if (peg$r3.test(s4)) {                                               │
      │     peg$currPos++;                                                     │
      │     peg$tracer.trace({                                                 │
      │       type: "class.match",                                             │
      │       rule: "string",                                                  │
      │       result: input.charAt(peg$currPos-1),                             │
      │       details: peg$r3.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │     });                                                                │
      │   } else {                                                             │
      │     s4 = peg$FAILED;                                                   │
      │     if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
      │     peg$tracer.trace({                                                 │
      │       type: "class.fail",                                              │
      │       rule: "string",                                                  │
      │       details: peg$r3.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │     });                                                                │
      │   }                                                                    │
      │                                                                        │
      │ }                                                                      │
      └────────────────────────────────────────────────────────────────────────┘
      OP[37]:  6 POP
      OP[39]:  6 POP
      OP[40]: 12 TEXT
      ┌───────────────  New Code  ───────────────┐
      │ s2 = input.substring(s2, peg$currPos);   │
      │                                          │
      └──────────────────────────────────────────┘
      OP[47]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s3 = peg$c12;                            │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s3 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e10); } │
        └───────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 39) {                        │
      │   s3 = peg$c12;                                                    │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "string",                                                │
      │     result: "'",                                                   │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s3 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e10); }                │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "string",                                                │
      │     details: "'",                                                  │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
      OP[56]: 15 IF_NOT_ERROR
        OP[ 0]: 24 LOAD_SAVED_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$savedPos = s0;                       │
        └──────────────────────────────────────────┘
        OP[ 2]: 26 CALL
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$f13(s2);                        │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s0;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s3 !== peg$FAILED) {                 │
      │   peg$savedPos = s0;                     │
      │   s0 = peg$f13(s2);                      │
      │ } else {                                 │
      │   peg$currPos = s0;                      │
      │   s0 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  6 POP
      OP[ 1]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s0;                        │
      └──────────────────────────────────────────┘
      OP[ 2]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────────────────────  New Code  ───────────────────────────────┐
    │ if (s1 !== peg$FAILED) {                                                 │
    │   s2 = peg$currPos;                                                      │
    │   s3 = [];                                                               │
    │   s4 = input.charAt(peg$currPos);                                        │
    │   if (peg$r3.test(s4)) {                                                 │
    │     peg$currPos++;                                                       │
    │     peg$tracer.trace({                                                   │
    │       type: "class.match",                                               │
    │       rule: "string",                                                    │
    │       result: input.charAt(peg$currPos-1),                               │
    │       details: peg$r3.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
    │     });                                                                  │
    │   } else {                                                               │
    │     s4 = peg$FAILED;                                                     │
    │     if (peg$silentFails === 0) { peg$fail(peg$e11); }                    │
    │     peg$tracer.trace({                                                   │
    │       type: "class.fail",                                                │
    │       rule: "string",                                                    │
    │       details: peg$r3.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
    │     });                                                                  │
    │   }                                                                      │
    │   while (s4 !== peg$FAILED) {                                            │
    │     s3.push(s4);                                                         │
    │     s4 = input.charAt(peg$currPos);                                      │
    │     if (peg$r3.test(s4)) {                                               │
    │       peg$currPos++;                                                     │
    │       peg$tracer.trace({                                                 │
    │         type: "class.match",                                             │
    │         rule: "string",                                                  │
    │         result: input.charAt(peg$currPos-1),                             │
    │         details: peg$r3.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │       });                                                                │
    │     } else {                                                             │
    │       s4 = peg$FAILED;                                                   │
    │       if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
    │       peg$tracer.trace({                                                 │
    │         type: "class.fail",                                              │
    │         rule: "string",                                                  │
    │         details: peg$r3.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │       });                                                                │
    │     }                                                                    │
    │   }                                                                      │
    │   s2 = input.substring(s2, peg$currPos);                                 │
    │                                                                          │
    │   if (input.charCodeAt(peg$currPos) === 39) {                            │
    │     s3 = peg$c12;                                                        │
    │     peg$currPos++;                                                       │
    │     peg$tracer.trace({                                                   │
    │       type: "string.match",                                              │
    │       rule: "string",                                                    │
    │       result: "'",                                                       │
    │       location: peg$computeLocation(startPos, peg$currPos, true),        │
    │     });                                                                  │
    │   } else {                                                               │
    │     s3 = peg$FAILED;                                                     │
    │     if (peg$silentFails === 0) { peg$fail(peg$e10); }                    │
    │     peg$tracer.trace({                                                   │
    │       type: "string.fail",                                               │
    │       rule: "string",                                                    │
    │       details: "'",                                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
    │     });                                                                  │
    │   }                                                                      │
    │                                                                          │
    │   if (s3 !== peg$FAILED) {                                               │
    │     peg$savedPos = s0;                                                   │
    │     s0 = peg$f13(s2);                                                    │
    │   } else {                                                               │
    │     peg$currPos = s0;                                                    │
    │     s0 = peg$FAILED;                                                     │
    │   }                                                                      │
    │ } else {                                                                 │
    │   peg$currPos = s0;                                                      │
    │   s0 = peg$FAILED;                                                       │
    │ }                                                                        │
    └──────────────────────────────────────────────────────────────────────────┘
  ┌────────────────────────────────  New Code  ────────────────────────────────┐
  │ if (s0 === peg$FAILED) {                                                   │
  │   s0 = peg$currPos;                                                        │
  │   if (input.charCodeAt(peg$currPos) === 39) {                              │
  │     s1 = peg$c12;                                                          │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "string.match",                                                │
  │       rule: "string",                                                      │
  │       result: "'",                                                         │
  │       location: peg$computeLocation(startPos, peg$currPos, true),          │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s1 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e10); }                      │
  │     peg$tracer.trace({                                                     │
  │       type: "string.fail",                                                 │
  │       rule: "string",                                                      │
  │       details: "'",                                                        │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   if (s1 !== peg$FAILED) {                                                 │
  │     s2 = peg$currPos;                                                      │
  │     s3 = [];                                                               │
  │     s4 = input.charAt(peg$currPos);                                        │
  │     if (peg$r3.test(s4)) {                                                 │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "class.match",                                               │
  │         rule: "string",                                                    │
  │         result: input.charAt(peg$currPos-1),                               │
  │         details: peg$r3.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │       });                                                                  │
  │     } else {                                                               │
  │       s4 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e11); }                    │
  │       peg$tracer.trace({                                                   │
  │         type: "class.fail",                                                │
  │         rule: "string",                                                    │
  │         details: peg$r3.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │     while (s4 !== peg$FAILED) {                                            │
  │       s3.push(s4);                                                         │
  │       s4 = input.charAt(peg$currPos);                                      │
  │       if (peg$r3.test(s4)) {                                               │
  │         peg$currPos++;                                                     │
  │         peg$tracer.trace({                                                 │
  │           type: "class.match",                                             │
  │           rule: "string",                                                  │
  │           result: input.charAt(peg$currPos-1),                             │
  │           details: peg$r3.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │         });                                                                │
  │       } else {                                                             │
  │         s4 = peg$FAILED;                                                   │
  │         if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
  │         peg$tracer.trace({                                                 │
  │           type: "class.fail",                                              │
  │           rule: "string",                                                  │
  │           details: peg$r3.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │         });                                                                │
  │       }                                                                    │
  │     }                                                                      │
  │     s2 = input.substring(s2, peg$currPos);                                 │
  │     if (input.charCodeAt(peg$currPos) === 39) {                            │
  │       s3 = peg$c12;                                                        │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "string.match",                                              │
  │         rule: "string",                                                    │
  │         result: "'",                                                       │
  │         location: peg$computeLocation(startPos, peg$currPos, true),        │
  │       });                                                                  │
  │     } else {                                                               │
  │       s3 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e10); }                    │
  │       peg$tracer.trace({                                                   │
  │         type: "string.fail",                                               │
  │         rule: "string",                                                    │
  │         details: "'",                                                      │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │     if (s3 !== peg$FAILED) {                                               │
  │       peg$savedPos = s0;                                                   │
  │       s0 = peg$f13(s2);                                                    │
  │     } else {                                                               │
  │       peg$currPos = s0;                                                    │
  │       s0 = peg$FAILED;                                                     │
  │     }                                                                      │
  │   } else {                                                                 │
  │     peg$currPos = s0;                                                      │
  │     s0 = peg$FAILED;                                                       │
  │   }                                                                        │
  │                                                                            │
  │ }                                                                          │
  └────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────  string CODE  ────────────────────────────────┐
│ function peg$parse_string() {                                                │
│                                                                              │
│   var startPos = peg$currPos;                                                │
│   var s0, s1, s2, s3, s4;                                                    │
│                                                                              │
│   peg$tracer.trace({                                                         │
│     type: "rule.enter",                                                      │
│     rule: "string",                                                          │
│     location: peg$computeLocation(startPos, startPos, true),                 │
│   });                                                                        │
│                                                                              │
│   s0 = peg$currPos;                                                          │
│   if (input.charCodeAt(peg$currPos) === 34) {                                │
│     s1 = peg$c10;                                                            │
│     peg$currPos++;                                                           │
│     peg$tracer.trace({                                                       │
│       type: "string.match",                                                  │
│       rule: "string",                                                        │
│       result: "\"",                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     s1 = peg$FAILED;                                                         │
│     if (peg$silentFails === 0) { peg$fail(peg$e8); }                         │
│     peg$tracer.trace({                                                       │
│       type: "string.fail",                                                   │
│       rule: "string",                                                        │
│       details: "\"",                                                         │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),         │
│     });                                                                      │
│   }                                                                          │
│   if (s1 !== peg$FAILED) {                                                   │
│     s2 = peg$currPos;                                                        │
│     s3 = [];                                                                 │
│     s4 = input.charAt(peg$currPos);                                          │
│     if (peg$r2.test(s4)) {                                                   │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "class.match",                                                 │
│         rule: "string",                                                      │
│         result: input.charAt(peg$currPos-1),                                 │
│         details: peg$r2.toString(),                                          │
│         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),     │
│       });                                                                    │
│     } else {                                                                 │
│       s4 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e9); }                       │
│       peg$tracer.trace({                                                     │
│         type: "class.fail",                                                  │
│         rule: "string",                                                      │
│         details: peg$r2.toString(),                                          │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     while (s4 !== peg$FAILED) {                                              │
│       s3.push(s4);                                                           │
│       s4 = input.charAt(peg$currPos);                                        │
│       if (peg$r2.test(s4)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "string",                                                    │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r2.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s4 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e9); }                     │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "string",                                                    │
│           details: peg$r2.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│     }                                                                        │
│     s2 = input.substring(s2, peg$currPos);                                   │
│     if (input.charCodeAt(peg$currPos) === 34) {                              │
│       s3 = peg$c10;                                                          │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "string.match",                                                │
│         rule: "string",                                                      │
│         result: "\"",                                                        │
│         location: peg$computeLocation(startPos, peg$currPos, true),          │
│       });                                                                    │
│     } else {                                                                 │
│       s3 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e8); }                       │
│       peg$tracer.trace({                                                     │
│         type: "string.fail",                                                 │
│         rule: "string",                                                      │
│         details: "\"",                                                       │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     if (s3 !== peg$FAILED) {                                                 │
│       peg$savedPos = s0;                                                     │
│       s0 = peg$f12(s2);                                                      │
│     } else {                                                                 │
│       peg$currPos = s0;                                                      │
│       s0 = peg$FAILED;                                                       │
│     }                                                                        │
│   } else {                                                                   │
│     peg$currPos = s0;                                                        │
│     s0 = peg$FAILED;                                                         │
│   }                                                                          │
│                                                                              │
│   if (s0 === peg$FAILED) {                                                   │
│     s0 = peg$currPos;                                                        │
│     if (input.charCodeAt(peg$currPos) === 39) {                              │
│       s1 = peg$c12;                                                          │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "string.match",                                                │
│         rule: "string",                                                      │
│         result: "'",                                                         │
│         location: peg$computeLocation(startPos, peg$currPos, true),          │
│       });                                                                    │
│     } else {                                                                 │
│       s1 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e10); }                      │
│       peg$tracer.trace({                                                     │
│         type: "string.fail",                                                 │
│         rule: "string",                                                      │
│         details: "'",                                                        │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     if (s1 !== peg$FAILED) {                                                 │
│       s2 = peg$currPos;                                                      │
│       s3 = [];                                                               │
│       s4 = input.charAt(peg$currPos);                                        │
│       if (peg$r3.test(s4)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "string",                                                    │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r3.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s4 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e11); }                    │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "string",                                                    │
│           details: peg$r3.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│       while (s4 !== peg$FAILED) {                                            │
│         s3.push(s4);                                                         │
│         s4 = input.charAt(peg$currPos);                                      │
│         if (peg$r3.test(s4)) {                                               │
│           peg$currPos++;                                                     │
│           peg$tracer.trace({                                                 │
│             type: "class.match",                                             │
│             rule: "string",                                                  │
│             result: input.charAt(peg$currPos-1),                             │
│             details: peg$r3.toString(),                                      │
│             location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
│           });                                                                │
│         } else {                                                             │
│           s4 = peg$FAILED;                                                   │
│           if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
│           peg$tracer.trace({                                                 │
│             type: "class.fail",                                              │
│             rule: "string",                                                  │
│             details: peg$r3.toString(),                                      │
│             location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│           });                                                                │
│         }                                                                    │
│       }                                                                      │
│       s2 = input.substring(s2, peg$currPos);                                 │
│       if (input.charCodeAt(peg$currPos) === 39) {                            │
│         s3 = peg$c12;                                                        │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "string.match",                                              │
│           rule: "string",                                                    │
│           result: "'",                                                       │
│           location: peg$computeLocation(startPos, peg$currPos, true),        │
│         });                                                                  │
│       } else {                                                               │
│         s3 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e10); }                    │
│         peg$tracer.trace({                                                   │
│           type: "string.fail",                                               │
│           rule: "string",                                                    │
│           details: "'",                                                      │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│       if (s3 !== peg$FAILED) {                                               │
│         peg$savedPos = s0;                                                   │
│         s0 = peg$f13(s2);                                                    │
│       } else {                                                               │
│         peg$currPos = s0;                                                    │
│         s0 = peg$FAILED;                                                     │
│       }                                                                      │
│     } else {                                                                 │
│       peg$currPos = s0;                                                      │
│       s0 = peg$FAILED;                                                       │
│     }                                                                        │
│   }                                                                          │
│                                                                              │
│                                                                              │
│   if (s0 !== peg$FAILED) {                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.match",                                                    │
│       rule: "string",                                                        │
│       result: s0,                                                            │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.fail",                                                     │
│       rule: "string",                                                        │
│       location: peg$computeLocation(startPos, startPos, true),               │
│     });                                                                      │
│   }                                                                          │
│                                                                              │
│   return s0;                                                                 │
│ }                                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
========================================
RULE: identifier
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[16]:  4 PUSH_EMPTY_ARRAY
  ┌───────────────  New Code  ───────────────┐
  │ s2 = [];                                 │
  └──────────────────────────────────────────┘
  OP[19]: 20 MATCH_CHAR_CLASS
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ────────────────────┐
    │ s3 = peg$FAILED;                                  │
    │ if (peg$silentFails === 0) { peg$fail(peg$e12); } │
    └───────────────────────────────────────────────────┘
  ┌─────────────────────────────  New Code  ─────────────────────────────┐
  │ s3 = input.charAt(peg$currPos);                                      │
  │ if (peg$r4.test(s3)) {                                               │
  │   peg$currPos++;                                                     │
  │   peg$tracer.trace({                                                 │
  │     type: "class.match",                                             │
  │     rule: "identifier",                                              │
  │     result: input.charAt(peg$currPos-1),                             │
  │     details: peg$r4.toString(),                                      │
  │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │   });                                                                │
  │ } else {                                                             │
  │   s3 = peg$FAILED;                                                   │
  │   if (peg$silentFails === 0) { peg$fail(peg$e12); }                  │
  │   peg$tracer.trace({                                                 │
  │     type: "class.fail",                                              │
  │     rule: "identifier",                                              │
  │     details: peg$r4.toString(),                                      │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │   });                                                                │
  │ }                                                                    │
  └──────────────────────────────────────────────────────────────────────┘
  OP[28]: 15 IF_NOT_ERROR
    OP[ 0]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s2.push(s3);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s3 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e12); } │
        └───────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s3 = input.charAt(peg$currPos);                                      │
      │ if (peg$r4.test(s3)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "identifier",                                              │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r4.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s3 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e12); }                  │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "identifier",                                              │
      │     details: peg$r4.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
    ┌──────────────────────────────  New Code  ──────────────────────────────┐
    │ while (s3 !== peg$FAILED) {                                            │
    │   s2.push(s3);                                                         │
    │   s3 = input.charAt(peg$currPos);                                      │
    │   if (peg$r4.test(s3)) {                                               │
    │     peg$currPos++;                                                     │
    │     peg$tracer.trace({                                                 │
    │       type: "class.match",                                             │
    │       rule: "identifier",                                              │
    │       result: input.charAt(peg$currPos-1),                             │
    │       details: peg$r4.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │     });                                                                │
    │   } else {                                                             │
    │     s3 = peg$FAILED;                                                   │
    │     if (peg$silentFails === 0) { peg$fail(peg$e12); }                  │
    │     peg$tracer.trace({                                                 │
    │       type: "class.fail",                                              │
    │       rule: "identifier",                                              │
    │       details: peg$r4.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │     });                                                                │
    │   }                                                                    │
    │                                                                        │
    │ }                                                                      │
    └────────────────────────────────────────────────────────────────────────┘
    OP[14]:  6 POP
    OP[ 0]:  6 POP
    OP[ 1]:  6 POP
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────────────────────  New Code  ───────────────────────────────┐
  │ if (s3 !== peg$FAILED) {                                                 │
  │   while (s3 !== peg$FAILED) {                                            │
  │     s2.push(s3);                                                         │
  │     s3 = input.charAt(peg$currPos);                                      │
  │     if (peg$r4.test(s3)) {                                               │
  │       peg$currPos++;                                                     │
  │       peg$tracer.trace({                                                 │
  │         type: "class.match",                                             │
  │         rule: "identifier",                                              │
  │         result: input.charAt(peg$currPos-1),                             │
  │         details: peg$r4.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │       });                                                                │
  │     } else {                                                             │
  │       s3 = peg$FAILED;                                                   │
  │       if (peg$silentFails === 0) { peg$fail(peg$e12); }                  │
  │       peg$tracer.trace({                                                 │
  │         type: "class.fail",                                              │
  │         rule: "identifier",                                              │
  │         details: peg$r4.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │       });                                                                │
  │     }                                                                    │
  │                                                                          │
  │   }                                                                      │
  │ } else {                                                                 │
  │   s2 = peg$FAILED;                                                       │
  │ }                                                                        │
  └──────────────────────────────────────────────────────────────────────────┘
  OP[50]: 15 IF_NOT_ERROR
    OP[ 0]:  6 POP
    OP[ 1]: 12 TEXT
    ┌───────────────  New Code  ───────────────┐
    │ s1 = input.substring(s1, peg$currPos);   │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s1 = s2;                                 │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   s1 = input.substring(s1, peg$currPos); │
  │                                          │
  │ } else {                                 │
  │   s1 = s2;                               │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[60]: 15 IF_NOT_ERROR
    OP[ 2]: 25 UPDATE_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = peg$currPos;              │
    └──────────────────────────────────────────┘
    OP[ 3]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$f14(s1);                        │
    └──────────────────────────────────────────┘
    OP[ 8]: 13 IF
      OP[ 0]:  6 POP
      OP[ 1]:  1 PUSH_UNDEFINED
      ┌───────────────  New Code  ───────────────┐
      │ s2 = undefined;                          │
      └──────────────────────────────────────────┘
      OP[ 0]:  6 POP
      OP[ 1]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s2 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s2) {                                │
    │   s2 = undefined;                        │
    │ } else {                                 │
    │   s2 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[16]: 15 IF_NOT_ERROR
      OP[ 0]: 24 LOAD_SAVED_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$savedPos = s0;                       │
      └──────────────────────────────────────────┘
      OP[ 2]: 26 CALL
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$f15(s1);                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s0;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s2 !== peg$FAILED) {                 │
    │   peg$savedPos = s0;                     │
    │   s0 = peg$f15(s1);                      │
    │ } else {                                 │
    │   peg$currPos = s0;                      │
    │   s0 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 !== peg$FAILED) {                 │
  │   peg$savedPos = peg$currPos;            │
  │   s2 = peg$f14(s1);                      │
  │   if (s2) {                              │
  │     s2 = undefined;                      │
  │   } else {                               │
  │     s2 = peg$FAILED;                     │
  │   }                                      │
  │                                          │
  │   if (s2 !== peg$FAILED) {               │
  │     peg$savedPos = s0;                   │
  │     s0 = peg$f15(s1);                    │
  │   } else {                               │
  │     peg$currPos = s0;                    │
  │     s0 = peg$FAILED;                     │
  │   }                                      │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌────────────────────────────  identifier CODE  ─────────────────────────────┐
│ function peg$parse_identifier() {                                          │
│                                                                            │
│   var startPos = peg$currPos;                                              │
│   var s0, s1, s2, s3;                                                      │
│                                                                            │
│   peg$tracer.trace({                                                       │
│     type: "rule.enter",                                                    │
│     rule: "identifier",                                                    │
│     location: peg$computeLocation(startPos, startPos, true),               │
│   });                                                                      │
│                                                                            │
│   s0 = peg$currPos;                                                        │
│   s1 = peg$currPos;                                                        │
│   s2 = [];                                                                 │
│   s3 = input.charAt(peg$currPos);                                          │
│   if (peg$r4.test(s3)) {                                                   │
│     peg$currPos++;                                                         │
│     peg$tracer.trace({                                                     │
│       type: "class.match",                                                 │
│       rule: "identifier",                                                  │
│       result: input.charAt(peg$currPos-1),                                 │
│       details: peg$r4.toString(),                                          │
│       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),     │
│     });                                                                    │
│   } else {                                                                 │
│     s3 = peg$FAILED;                                                       │
│     if (peg$silentFails === 0) { peg$fail(peg$e12); }                      │
│     peg$tracer.trace({                                                     │
│       type: "class.fail",                                                  │
│       rule: "identifier",                                                  │
│       details: peg$r4.toString(),                                          │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│     });                                                                    │
│   }                                                                        │
│   if (s3 !== peg$FAILED) {                                                 │
│     while (s3 !== peg$FAILED) {                                            │
│       s2.push(s3);                                                         │
│       s3 = input.charAt(peg$currPos);                                      │
│       if (peg$r4.test(s3)) {                                               │
│         peg$currPos++;                                                     │
│         peg$tracer.trace({                                                 │
│           type: "class.match",                                             │
│           rule: "identifier",                                              │
│           result: input.charAt(peg$currPos-1),                             │
│           details: peg$r4.toString(),                                      │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
│         });                                                                │
│       } else {                                                             │
│         s3 = peg$FAILED;                                                   │
│         if (peg$silentFails === 0) { peg$fail(peg$e12); }                  │
│         peg$tracer.trace({                                                 │
│           type: "class.fail",                                              │
│           rule: "identifier",                                              │
│           details: peg$r4.toString(),                                      │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│         });                                                                │
│       }                                                                    │
│     }                                                                      │
│   } else {                                                                 │
│     s2 = peg$FAILED;                                                       │
│   }                                                                        │
│   if (s2 !== peg$FAILED) {                                                 │
│     s1 = input.substring(s1, peg$currPos);                                 │
│   } else {                                                                 │
│     s1 = s2;                                                               │
│   }                                                                        │
│   if (s1 !== peg$FAILED) {                                                 │
│     peg$savedPos = peg$currPos;                                            │
│     s2 = peg$f14(s1);                                                      │
│     if (s2) {                                                              │
│       s2 = undefined;                                                      │
│     } else {                                                               │
│       s2 = peg$FAILED;                                                     │
│     }                                                                      │
│     if (s2 !== peg$FAILED) {                                               │
│       peg$savedPos = s0;                                                   │
│       s0 = peg$f15(s1);                                                    │
│     } else {                                                               │
│       peg$currPos = s0;                                                    │
│       s0 = peg$FAILED;                                                     │
│     }                                                                      │
│   } else {                                                                 │
│     peg$currPos = s0;                                                      │
│     s0 = peg$FAILED;                                                       │
│   }                                                                        │
│                                                                            │
│                                                                            │
│   if (s0 !== peg$FAILED) {                                                 │
│     peg$tracer.trace({                                                     │
│       type: "rule.match",                                                  │
│       rule: "identifier",                                                  │
│       result: s0,                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),          │
│     });                                                                    │
│   } else {                                                                 │
│     peg$tracer.trace({                                                     │
│       type: "rule.fail",                                                   │
│       rule: "identifier",                                                  │
│       location: peg$computeLocation(startPos, startPos, true),             │
│     });                                                                    │
│   }                                                                        │
│                                                                            │
│   return s0;                                                               │
│ }                                                                          │
└────────────────────────────────────────────────────────────────────────────┘
========================================
RULE: NL
========================================
  OP[ 2]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[ 7]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c1;                             │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s1 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e0); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 13) {                        │
  │   s1 = peg$c1;                                                     │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "NL",                                                    │
  │     result: "\r",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "NL",                                                    │
  │     details: "\r",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[16]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 1]:  2 PUSH_NULL
    ┌───────────────  New Code  ───────────────┐
    │ s1 = null;                               │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 === peg$FAILED) {                 │
  │   s1 = null;                             │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[24]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$c2;                             │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s2 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e1); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 10) {                        │
  │   s2 = peg$c2;                                                     │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "NL",                                                    │
  │     result: "\n",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s2 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e1); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "NL",                                                    │
  │     details: "\n",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[33]: 15 IF_NOT_ERROR
    OP[ 0]: 11 WRAP
    ┌───────────────  New Code  ───────────────┐
    │ s1 = [s1, s2];                           │
    └──────────────────────────────────────────┘
    OP[ 2]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s0 = s1;                                 │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   s1 = [s1, s2];                         │
  │   s0 = s1;                               │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌─────────────────────────────  NL CODE  ──────────────────────────────┐
│ function peg$parse_NL() {                                            │
│                                                                      │
│   var startPos = peg$currPos;                                        │
│   var s0, s1, s2;                                                    │
│                                                                      │
│   peg$tracer.trace({                                                 │
│     type: "rule.enter",                                              │
│     rule: "NL",                                                      │
│     location: peg$computeLocation(startPos, startPos, true),         │
│   });                                                                │
│                                                                      │
│   s0 = peg$currPos;                                                  │
│   if (input.charCodeAt(peg$currPos) === 13) {                        │
│     s1 = peg$c1;                                                     │
│     peg$currPos++;                                                   │
│     peg$tracer.trace({                                               │
│       type: "string.match",                                          │
│       rule: "NL",                                                    │
│       result: "\r",                                                  │
│       location: peg$computeLocation(startPos, peg$currPos, true),    │
│     });                                                              │
│   } else {                                                           │
│     s1 = peg$FAILED;                                                 │
│     if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
│     peg$tracer.trace({                                               │
│       type: "string.fail",                                           │
│       rule: "NL",                                                    │
│       details: "\r",                                                 │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│     });                                                              │
│   }                                                                  │
│   if (s1 === peg$FAILED) {                                           │
│     s1 = null;                                                       │
│   }                                                                  │
│                                                                      │
│   if (input.charCodeAt(peg$currPos) === 10) {                        │
│     s2 = peg$c2;                                                     │
│     peg$currPos++;                                                   │
│     peg$tracer.trace({                                               │
│       type: "string.match",                                          │
│       rule: "NL",                                                    │
│       result: "\n",                                                  │
│       location: peg$computeLocation(startPos, peg$currPos, true),    │
│     });                                                              │
│   } else {                                                           │
│     s2 = peg$FAILED;                                                 │
│     if (peg$silentFails === 0) { peg$fail(peg$e1); }                 │
│     peg$tracer.trace({                                               │
│       type: "string.fail",                                           │
│       rule: "NL",                                                    │
│       details: "\n",                                                 │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│     });                                                              │
│   }                                                                  │
│   if (s2 !== peg$FAILED) {                                           │
│     s1 = [s1, s2];                                                   │
│     s0 = s1;                                                         │
│   } else {                                                           │
│     peg$currPos = s0;                                                │
│     s0 = peg$FAILED;                                                 │
│   }                                                                  │
│                                                                      │
│                                                                      │
│   if (s0 !== peg$FAILED) {                                           │
│     peg$tracer.trace({                                               │
│       type: "rule.match",                                            │
│       rule: "NL",                                                    │
│       result: s0,                                                    │
│       location: peg$computeLocation(startPos, peg$currPos, true),    │
│     });                                                              │
│   } else {                                                           │
│     peg$tracer.trace({                                               │
│       type: "rule.fail",                                             │
│       rule: "NL",                                                    │
│       location: peg$computeLocation(startPos, startPos, true),       │
│     });                                                              │
│   }                                                                  │
│                                                                      │
│   return s0;                                                         │
│ }                                                                    │
└──────────────────────────────────────────────────────────────────────┘
========================================
RULE: _
========================================
  OP[ 2]:  4 PUSH_EMPTY_ARRAY
  ┌───────────────  New Code  ───────────────┐
  │ s0 = [];                                 │
  └──────────────────────────────────────────┘
  OP[ 5]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c13;                            │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ────────────────────┐
    │ s1 = peg$FAILED;                                  │
    │ if (peg$silentFails === 0) { peg$fail(peg$e13); } │
    └───────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 32) {                        │
  │   s1 = peg$c13;                                                    │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "_",                                                     │
  │     result: " ",                                                   │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e13); }                │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "_",                                                     │
  │     details: " ",                                                  │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[14]: 15 IF_NOT_ERROR
    OP[ 0]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s0.push(s1);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s1 = peg$c13;                            │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s1 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e13); } │
        └───────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 32) {                        │
      │   s1 = peg$c13;                                                    │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "_",                                                     │
      │     result: " ",                                                   │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s1 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e13); }                │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "_",                                                     │
      │     details: " ",                                                  │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ while (s1 !== peg$FAILED) {                                          │
    │   s0.push(s1);                                                       │
    │   if (input.charCodeAt(peg$currPos) === 32) {                        │
    │     s1 = peg$c13;                                                    │
    │     peg$currPos++;                                                   │
    │     peg$tracer.trace({                                               │
    │       type: "string.match",                                          │
    │       rule: "_",                                                     │
    │       result: " ",                                                   │
    │       location: peg$computeLocation(startPos, peg$currPos, true),    │
    │     });                                                              │
    │   } else {                                                           │
    │     s1 = peg$FAILED;                                                 │
    │     if (peg$silentFails === 0) { peg$fail(peg$e13); }                │
    │     peg$tracer.trace({                                               │
    │       type: "string.fail",                                           │
    │       rule: "_",                                                     │
    │       details: " ",                                                  │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │     });                                                              │
    │   }                                                                  │
    │                                                                      │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[14]:  6 POP
    OP[ 0]:  6 POP
    OP[ 1]:  6 POP
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌──────────────────────────────  New Code  ──────────────────────────────┐
  │ if (s1 !== peg$FAILED) {                                               │
  │   while (s1 !== peg$FAILED) {                                          │
  │     s0.push(s1);                                                       │
  │     if (input.charCodeAt(peg$currPos) === 32) {                        │
  │       s1 = peg$c13;                                                    │
  │       peg$currPos++;                                                   │
  │       peg$tracer.trace({                                               │
  │         type: "string.match",                                          │
  │         rule: "_",                                                     │
  │         result: " ",                                                   │
  │         location: peg$computeLocation(startPos, peg$currPos, true),    │
  │       });                                                              │
  │     } else {                                                           │
  │       s1 = peg$FAILED;                                                 │
  │       if (peg$silentFails === 0) { peg$fail(peg$e13); }                │
  │       peg$tracer.trace({                                               │
  │         type: "string.fail",                                           │
  │         rule: "_",                                                     │
  │         details: " ",                                                  │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │       });                                                              │
  │     }                                                                  │
  │                                                                        │
  │   }                                                                    │
  │ } else {                                                               │
  │   s0 = peg$FAILED;                                                     │
  │ }                                                                      │
  └────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────    CODE  ────────────────────────────────┐
│ function peg$parse__() {                                                 │
│                                                                          │
│   var startPos = peg$currPos;                                            │
│   var s0, s1;                                                            │
│                                                                          │
│   peg$tracer.trace({                                                     │
│     type: "rule.enter",                                                  │
│     rule: "_",                                                           │
│     location: peg$computeLocation(startPos, startPos, true),             │
│   });                                                                    │
│                                                                          │
│   s0 = [];                                                               │
│   if (input.charCodeAt(peg$currPos) === 32) {                            │
│     s1 = peg$c13;                                                        │
│     peg$currPos++;                                                       │
│     peg$tracer.trace({                                                   │
│       type: "string.match",                                              │
│       rule: "_",                                                         │
│       result: " ",                                                       │
│       location: peg$computeLocation(startPos, peg$currPos, true),        │
│     });                                                                  │
│   } else {                                                               │
│     s1 = peg$FAILED;                                                     │
│     if (peg$silentFails === 0) { peg$fail(peg$e13); }                    │
│     peg$tracer.trace({                                                   │
│       type: "string.fail",                                               │
│       rule: "_",                                                         │
│       details: " ",                                                      │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│     });                                                                  │
│   }                                                                      │
│                                                                          │
│   if (s1 !== peg$FAILED) {                                               │
│     while (s1 !== peg$FAILED) {                                          │
│       s0.push(s1);                                                       │
│       if (input.charCodeAt(peg$currPos) === 32) {                        │
│         s1 = peg$c13;                                                    │
│         peg$currPos++;                                                   │
│         peg$tracer.trace({                                               │
│           type: "string.match",                                          │
│           rule: "_",                                                     │
│           result: " ",                                                   │
│           location: peg$computeLocation(startPos, peg$currPos, true),    │
│         });                                                              │
│       } else {                                                           │
│         s1 = peg$FAILED;                                                 │
│         if (peg$silentFails === 0) { peg$fail(peg$e13); }                │
│         peg$tracer.trace({                                               │
│           type: "string.fail",                                           │
│           rule: "_",                                                     │
│           details: " ",                                                  │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│         });                                                              │
│       }                                                                  │
│     }                                                                    │
│   } else {                                                               │
│     s0 = peg$FAILED;                                                     │
│   }                                                                      │
│                                                                          │
│                                                                          │
│   if (s0 !== peg$FAILED) {                                               │
│     peg$tracer.trace({                                                   │
│       type: "rule.match",                                                │
│       rule: "_",                                                         │
│       result: s0,                                                        │
│       location: peg$computeLocation(startPos, peg$currPos, true),        │
│     });                                                                  │
│   } else {                                                               │
│     peg$tracer.trace({                                                   │
│       type: "rule.fail",                                                 │
│       rule: "_",                                                         │
│       location: peg$computeLocation(startPos, startPos, true),           │
│     });                                                                  │
│   }                                                                      │
│                                                                          │
│   return s0;                                                             │
│ }                                                                        │
└──────────────────────────────────────────────────────────────────────────┘