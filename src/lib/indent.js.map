{
  "version": 3,
  "file": "indent.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\indent.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# indent.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, pass, rtrim, OL,\r\n\tblockToArray, arrayToBlock,\r\n\tassert, croak, countChars,\r\n\tisString, isArray, isHash, isInteger,\r\n\t} from '@jdeighan/llutils'\r\n\r\nexport oneIndent = undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport resetOneIndent = (val=undef) =>\r\n\r\n\tif defined(val)\r\n\t\tassert (val == '\\t') || val.match(/^ +$/), \"Bad oneIndent\"\r\n\t\toneIndent = val\r\n\telse\r\n\t\toneIndent = undef\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   indentLevel - determine indent level of a string\r\n#                 it's OK if the string is ONLY indentation\r\n\r\nexport indentLevel = (line) =>\r\n\r\n\tassert isString(line), \"not a string: #{OL(line)}\"\r\n\r\n\t# --- This will always match, and it's greedy\r\n\t[prefix] = line.match(/^\\s*/)\r\n\r\n\tif (prefix.length == 0)\r\n\t\treturn 0\r\n\r\n\t# --- Check if we're using TABs or spaces\r\n\tnumTABs = countChars(prefix, \"\\t\")\r\n\tnumSpaces = countChars(prefix, \" \")\r\n\tif (numTABs > 0) && (numSpaces > 0)\r\n\t\tcroak \"Invalid mix of TABs and spaces\"\r\n\r\n\t# --- oneIndent must be one of:\r\n\t#        undef\r\n\t#        a single TAB character\r\n\t#        some number of space characters\r\n\r\n\t# --- Set variables oneIndent & level\r\n\tswitch oneIndent\r\n\t\twhen undef\r\n\t\t\tif (numTABs > 0)\r\n\t\t\t\tlevel = numTABs\r\n\t\t\t\toneIndent = \"\\t\"\r\n\t\t\telse\r\n\t\t\t\tlevel = 1\r\n\t\t\t\toneIndent = ' '.repeat(numSpaces)\r\n\t\twhen \"\\t\"\r\n\t\t\tassert (numSpaces == 0), \"Expecting TABs, found spaces\"\r\n\t\t\tlevel = numTABs\r\n\t\telse\r\n\t\t\t# --- using some number of spaces\r\n\t\t\tassert (numTABs == 0), \"Expecting spaces, found TABs\"\r\n\t\t\tassert (numSpaces % oneIndent.length == 0), \"Invalid num spaces\"\r\n\t\t\tlevel = numSpaces / oneIndent.length\r\n\r\n\treturn level\r\n\r\n# ---------------------------------------------------------------------------\r\n#   splitLine - separate a line into [level, line]\r\n\r\nexport splitLine = (line) =>\r\n\r\n\t[_, prefix, str] = line.match(/^(\\s*)(.*)$/)\r\n\treturn [indentLevel(prefix), str.trim()]\r\n\r\n# ---------------------------------------------------------------------------\r\n#   indented - add indentation to each string in a block or array\r\n#            - returns the same type as input, i.e. array or string\r\n\r\nexport indented = (input, level=1) =>\r\n\r\n\tassert isInteger(level, {min:0}), \"Invalid level: #{OL(level)}\"\r\n\tif (level == 0)\r\n\t\treturn input\r\n\tif notdefined(oneIndent)\r\n\t\toneIndent = \"\\t\"\r\n\ttoAdd = oneIndent.repeat(level)\r\n\r\n\t# --- input must be either a string or array of strings\r\n\tif isArray(input)\r\n\t\tlLines = input\r\n\telse if isString(input)\r\n\t\tlLines = blockToArray(input)\r\n\telse\r\n\t\tcroak \"invalid input: #{OL(input)}\"\r\n\r\n\t# --- NOTE: don't add indentation to empty lines\r\n\tlNewLines = []\r\n\tlNewLines = for line in lLines\r\n\t\tline = rtrim(line)\r\n\t\tif (line == '')\r\n\t\t\t''\r\n\t\telse\r\n\t\t\t\"#{toAdd}#{line}\"\r\n\r\n\tif isArray(input)\r\n\t\treturn lNewLines\r\n\telse\r\n\t\treturn arrayToBlock(lNewLines)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   undented - string with 1st line indentation removed for each line\r\n#            - returns same type as input, i.e. either string or array\r\n\r\nexport undented = (input) =>\r\n\r\n\t# --- input must be either a string or array of strings\r\n\tif isString(input)\r\n\t\tlLines = blockToArray(input)\r\n\telse if isArray(input)\r\n\t\tlLines = input\r\n\telse\r\n\t\tcroak \"invalid input: #{OL(input)}\"\r\n\r\n\t# --- NOTE: leave empty lines empty\r\n\ttoRemove = undef\r\n\tnToRemove = undef\r\n\tlNewLines = for line in lLines\r\n\t\tline = rtrim(line)\r\n\t\tif (line == '')\r\n\t\t\t''\r\n\t\telse if notdefined(toRemove)\r\n\t\t\t[_, prefix, rest] = line.match(/^(\\s*)(.*)$/)\r\n\t\t\tif (prefix.length == 0)\r\n\t\t\t\tline\r\n\t\t\telse\r\n\t\t\t\ttoRemove = prefix\r\n\t\t\t\tnToRemove = prefix.length\r\n\t\t\t\trest\r\n\t\telse\r\n\t\t\tassert (line.indexOf(toRemove)==0),\r\n\t\t\t\t\"can't remove #{OL(toRemove)} from #{OL(line)}\"\r\n\t\t\tline.substr(nToRemove)\r\n\r\n\tif isString(input)\r\n\t\treturn arrayToBlock(lNewLines)\r\n\telse\r\n\t\treturn lNewLines\r\n"
  ]
}