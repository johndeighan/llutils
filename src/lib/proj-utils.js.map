{
  "version": 3,
  "file": "proj-utils.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\proj-utils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# proj-utils.coffee\r\n\r\nimport prompts from 'prompts'\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, getOptions,\r\n\tassert, execCmd, words,\r\n\t} from '@jdeighan/llutils'\r\nimport {BOX} from '@jdeighan/llutils/dump'\r\nimport {\r\n\tmkpath, isDir, mkDir, slurp, barf, clearDir,\r\n\tslurpJSON, barfJSON, barfPkgJSON, touch, createFile,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {\r\n\tPkgJson,\r\n\t} from '@jdeighan/llutils/pkg-json'\r\n\r\n# --- type 'website' will change to 'parcel' for now\r\nlValidTypes = words('electron codemirror parcel vite none')\r\ntype = undef\r\npj = undef     # PkgJson object\r\nlDeps = []\r\nlDevDeps = []\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isDep = (pkg) =>\r\n\r\n\treturn lDeps.includes(pkg) || lDevDeps.includes(pkg)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setProjType = (t) =>\r\n\r\n\tif (t == 'vite')\r\n\t\tconsole.log \"Type 'vite' not implemented yet\"\r\n\t\tprocess.exit()\r\n\tassert defined(t), \"type is undef\"\r\n\ttype = t\r\n\tassert lValidTypes.includes(type), \"Bad type: #{OL(type)}\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport promptForProjType = () =>\r\n\r\n\thResponse = await prompts({\r\n\t\ttype: 'select'\r\n\t\tname: 'type'\r\n\t\tmessage: 'Which type of project?'\r\n\t\tchoices: [\r\n\t\t\t{\r\n\t\t\t\ttitle: 'Bare'\r\n\t\t\t\tdescription: 'Bare project'\r\n\t\t\t\tvalue: 'none'\r\n\t\t\t\t}\r\n\t\t\t{\r\n\t\t\t\ttitle: 'parcel'\r\n\t\t\t\tdescription: 'parcel web site'\r\n\t\t\t\tvalue: 'parcel'\r\n\t\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: 'vite'\r\n\t\t\t\tdescription: 'vite web site'\r\n\t\t\t\tvalue: 'vite'\r\n\t\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttitle: 'electron'\r\n\t\t\t\tdescription: 'electron app'\r\n\t\t\t\tvalue: 'electron'\r\n\t\t\t\t}\r\n\t\t\t{\r\n\t\t\t\ttitle: 'codemirror'\r\n\t\t\t\tdescription: 'codeMirror editor'\r\n\t\t\t\tvalue: 'codemirror'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t});\r\n\tsetProjType hResponse.type\r\n\treturn type\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport promptForLibs = () =>\r\n\r\n\tloop\r\n\t\thResponse = await prompts {\r\n\t\t\ttype: 'text',\r\n\t\t\tname: 'name',\r\n\t\t\tmessage: 'New library name (Enter to end)'\r\n\t\t\t}\r\n\t\tif hResponse.name\r\n\t\t\taddLib hResponse.name\r\n\t\telse\r\n\t\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport promptForBins = () =>\r\n\r\n\tloop\r\n\t\thResponse = await prompts {\r\n\t\t\ttype: 'text',\r\n\t\t\tname: 'name',\r\n\t\t\tmessage: 'New binary name (Enter to end)'\r\n\t\t\t}\r\n\t\tif hResponse.name\r\n\t\t\taddBin hResponse.name\r\n\t\telse\r\n\t\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- For example, isType('electron') will return true\r\n#     when type is 'codemirror'\r\n\r\nexport isOfType = (t) =>\r\n\r\n\tswitch t\r\n\t\twhen 'parcel'\r\n\t\t\treturn (type == 'parcel')\r\n\t\twhen 'electron'\r\n\t\t\treturn (type == 'electron') || (type == 'codemirror')\r\n\t\twhen 'codemirror'\r\n\t\t\treturn (type == 'codemirror')\r\n\t\twhen 'website'\r\n\t\t\treturn (type == 'parcel') || (type == 'vite')\r\n\t\telse\r\n\t\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport makeProjDir = (dirname, hOptions={}) =>\r\n\r\n\t{clear} = getOptions hOptions, {\r\n\t\tclear: false\r\n\t\t}\r\n\r\n\trootDir = process.env.PROJECT_ROOT_DIR\r\n\tif ! isDir(rootDir)\r\n\t\tconsole.log \"\"\"\r\n\t\t\tPlease set env var PROJECT_ROOT_DIR to a valid directory\r\n\t\t\t\"\"\"\r\n\t\tprocess.exit()\r\n\r\n\t# === Create the new directory and cd to it\r\n\r\n\tnewDir = mkpath(rootDir, dirname)\r\n\tif isDir(newDir)\r\n\t\tif clear\r\n\t\t\tconsole.log \"Directory #{OL(newDir)} exists, clearing it out\"\r\n\t\t\tclearDir newDir\r\n\t\telse\r\n\t\t\tconsole.log \"Directory #{OL(newDir)} already exists\"\r\n\t\t\tconsole.log \"Aborting...\"\r\n\t\t\tprocess.exit()\r\n\telse\r\n\t\tconsole.log \"Creating directory #{newDir}\"\r\n\t\tmkDir newDir\r\n\r\n\tprocess.chdir newDir\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport init_git = () =>\r\n\r\n\tconsole.log \"Initializing git\"\r\n\texecCmd \"git init\"\r\n\texecCmd \"git branch -m main\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport make_dirs = () =>\r\n\r\n\tconsole.log \"Making directories\"\r\n\tconsole.log \"   ./src\"\r\n\tmkDir './src'\r\n\r\n\tconsole.log \"   ./src/lib\"\r\n\tmkDir './src/lib'\r\n\r\n\tconsole.log \"   ./src/bin\"\r\n\tmkDir './src/bin'\r\n\r\n\tif isOfType('website')\r\n\t\tconsole.log \"   ./src/elements\"\r\n\t\tmkDir './src/elements'\r\n\r\n\tconsole.log \"   ./test\"\r\n\tmkDir './test'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Returns PkgJson object\r\n\r\nexport init_npm = () =>\r\n\r\n\tconsole.log \"Initializing npm\"\r\n\texecCmd \"npm init -y\"\r\n\r\n\tconsole.log \"Creating package.json\"\r\n\tpj = new PkgJson('fix')\r\n\tpj.setField 'description', \"A #{type} app\"\r\n\treturn pj\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Returns PkgJson object\r\n\r\nexport read_pkg_json = () =>\r\n\r\n\tconsole.log \"Reading package.json\"\r\n\tpj = new PkgJson()\r\n\treturn pj\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addLib = (name) =>\r\n\r\n\tcreateFile \"./src/lib/#{name}.coffee\", \"\"\"\r\n\t\t# --- #{name}.coffee\r\n\t\t\"\"\"\r\n\r\n\t# --- Add a unit test\r\n\tif pj.isInstalled('@jdeighan/llutils')\r\n\t\tcreateFile \"./test/#{name}.test.coffee\", \"\"\"\r\n\t\t\t# --- #{name}.test.offee\r\n\r\n\t\t\timport * as lib from '#{pj.name}/#{name}'\r\n\t\t\tObject.assign(global, lib)\r\n\t\t\timport * as lib2 from '@jdeighan/llutils/utest'\r\n\t\t\tObject.assign(global, lib2)\r\n\r\n\t\t\tequal 2+2, 4\r\n\t\t\t\"\"\"\r\n\telse\r\n\t\tcreateFile \"./test/#{name}.test.coffee\", \"\"\"\r\n\t\t\t# --- #{name}.test.offee\r\n\r\n\t\t\timport * as lib from '#{pj.name}/#{name}'\r\n\t\t\tObject.assign(global, lib)\r\n\t\t\timport test from 'ava'\r\n\r\n\t\t\ttest \"line 7\", (t) =>\r\n\t\t\t\tt.is 2+2, 4\r\n\r\n\t\t\t\"\"\"\r\n\tpj.addExport \"./#{name}\", \"./src/lib/#{name}.js\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addBin = (name) =>\r\n\r\n\tcreateFile \"./src/bin/#{name}.coffee\", \"\"\"\r\n\t\t# --- #{name}.coffee\r\n\t\t\"\"\"\r\n\r\n\tpj.addBin name, \"./src/bin/#{name}.js\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addDep = (pkg) =>\r\n\r\n\tassert !isDep(pkg), \"Package #{pkg} already installed\"\r\n\tpj.addDep pkg\r\n\tlDeps.push pkg\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addDevDep = (pkg) =>\r\n\r\n\tassert !isDep(pkg), \"Package #{pkg} already installed\"\r\n\tpj.addDevDep pkg\r\n\tlDevDeps.push pkg\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addReadMe = () =>\r\n\r\n\tconsole.log \"Creating README.md\"\r\n\tbarf \"\"\"\r\n\t\tREADME.md file\r\n\t\t==============\r\n\r\n\r\n\t\t\"\"\", \"./README.md\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addGitIgnore = () =>\r\n\r\n\tconsole.log \"Creating .gitignore\"\r\n\tbarf \"\"\"\r\n\t\tlogs/\r\n\t\tnode_modules/\r\n\t\ttypings/\r\n\t\t*.tsbuildinfo\r\n\t\t.npmrc\r\n\t\t/build\r\n\t\t/public\r\n\t\t/dist\r\n\r\n\t\t# dotenv environment variables file\r\n\t\t.env\r\n\t\t.env.test\r\n\r\n\t\ttest/temp*.*\r\n\t\t/.svelte-kit\r\n\t\t\"\"\", \"./.gitignore\"\r\n\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addNpmRc = () =>\r\n\r\n\tconsole.log \"Creating .npmrc\"\r\n\tbarf \"\"\"\r\n\t\tengine-strict=true\r\n\t\t# --- loglevel can be silent or warn\r\n\t\tloglevel=silent\r\n\t\t\"\"\", \"./.npmrc\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setUpWebSite = (pj) =>\r\n\r\n\tconsole.log \"Creating src/index.html\"\r\n\tbarf \"\"\"\r\n\t\t<!DOCTYPE html>\r\n\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"utf-8\">\r\n\t\t\t\t<title>Parcel App</title>\r\n\t\t\t</head>\r\n\t\t\t<body>\r\n\t\t\t\t<h1>Hello, World!</h1>\r\n\t\t\t</body>\r\n\t\t</html>\r\n\t\t\"\"\", \"./src/index.html\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setUpParcel = () =>\r\n\r\n\tpj.addDevDep 'parcel'\r\n\tpj.setField 'source', 'src/index.html'\r\n\tpj.addScript 'start', 'parcel'\r\n\tpj.addScript 'build', 'parcel build'\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setUpElectron = () =>\r\n\r\n\tpj.setField 'main', 'src/main.js'\r\n\tpj.addScript 'start', 'npm run build && electron .'\r\n\r\n\tconsole.log \"Installing (dev) \\\"electron\\\"\"\r\n\tpj.addDevDep 'electron'\r\n\r\n\tconsole.log \"Creating src/main.coffee\"\r\n\tbarf \"\"\"\r\n\t\timport pathLib from 'node:path'\r\n\t\timport {app, BrowserWindow} from 'electron'\r\n\r\n\t\tapp.on 'ready', () =>\r\n\t\t\twin = new BrowserWindow({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600\r\n\t\t\t\twebPreferences: {\r\n\t\t\t\t\tnodeIntegration: true\r\n\t\t\t\t\tpreload: pathLib.join(import.meta.dirname, 'preload.js')\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t# --- win.loadFile('src/index.html')\r\n\t\t\twin.loadURL(\"file://#{import.meta.dirname}/index.html\")\r\n\t\t\t\"\"\", \"./src/main.coffee\"\r\n\r\n\t# ..........................................................\r\n\r\n\tconsole.log \"Creating src/index.html\"\r\n\tbarf \"\"\"\r\n\t\t<!DOCTYPE html>\r\n\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\t\t\t\t<!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->\r\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\">\r\n\t\t\t\t<title>Electron App</title>\r\n\t\t\t</head>\r\n\t\t\t<body>\r\n\t\t\t\t<h1>Electron App, using:</h1>\r\n\t\t\t\t<p span id=\"node-version\">node-version</p>\r\n\t\t\t\t<p span id=\"chrome-version\">chrome-version</p>\r\n\t\t\t\t<p span id=\"electron-version\">electron-version</p>\r\n\t\t\t\tby <p id=\"myname\">My Name Here</p>\r\n\t\t\t\t<script src=\"./renderer.js\"></script>\r\n\t\t\t</body>\r\n\t\t</html>\r\n\t\t\"\"\", \"./src/index.html\"\r\n\r\n\t# ..........................................................\r\n\r\n\tconsole.log \"Creating src/preload.coffee\"\r\n\tbarf \"\"\"\r\n\t\t# --- preload.coffee has access to window,\r\n\t\t#     document and NodeJS globals\r\n\r\n\t\twindow.addEventListener 'DOMContentLoaded', () =>\r\n\t\t\treplaceText = (selector, text) =>\r\n\t\t\t\telem = document.getElementById(selector)\r\n\t\t\t\tif (elem)\r\n\t\t\t\t\telem.innerText = text\r\n\r\n\t\t\tfor dep in ['chrome','node','electron']\r\n\t\t\t\tstr = \"\\#{dep} version \\#{process.versions[dep]}\"\r\n\t\t\t\treplaceText \"\\#{dep}-version\", str\r\n\t\t\"\"\", \"./src/preload.coffee\"\r\n\r\n\t# ..........................................................\r\n\r\n\tconsole.log \"Creating src/renderer.coffee\"\r\n\tbarf \"\"\"\r\n\t\t# --- preload.coffee has access to window and document\r\n\r\n\t\telem = document.getElementById('myname')\r\n\t\tif elem\r\n\t\t\telem.innerText = '#{author}'\r\n\t\telse\r\n\t\t\tconsole.log \"No element with id 'myname'\"\r\n\t\t\"\"\", \"./src/renderer.coffee\"\r\n\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setUpCodeMirror = () =>\r\n\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport typeSpecificSetup = () =>\r\n\r\n\tif isOfType('website')\r\n\t\tsetUpWebSite()\r\n\tif isOfType('parcel')\r\n\t\tsetUpParcel()\r\n\tif isOfType('electron')\r\n\t\tsetUpElectron()\r\n\tif isOfType('codemirror')\r\n\t\tsetUpCodeMirror()\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport write_pkg_json = () =>\r\n\r\n\tconsole.log \"Writing package.json\"\r\n\tpj.addExport \"./package.json\", \"./package.json\"\r\n\tpj.write()\r\n\treturn\r\n"
  ]
}