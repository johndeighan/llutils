{
  "version": 3,
  "file": "text-table.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\text-table.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# --- text-table.coffee\r\n\r\nimport {sprintf} from 'sprintf-js'\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, words, OL,\r\n\ttoBlock, isEmpty, nonEmpty, rtrim,\r\n\tisString, isNumber, isInteger, isArray,\r\n\tisFunction, range, hasKey, untabify, padString,\r\n\tassert, croak,\r\n\t} from '@jdeighan/llutils'\r\nimport {toNICE} from '@jdeighan/llutils/to-nice'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class TextTable\r\n\r\n\tconstructor: (formatStr, hOptions={}) ->\r\n\t\t# --- Valid options:\r\n\t\t#        decPlaces - used for numbers with no % style format\r\n\t\t#                    default: 2\r\n\t\t#        parseNumbers - string data that looks like a number\r\n\t\t#                       is treated as a number, default: false\r\n\r\n\t\t@hOptions = getOptions hOptions, {\r\n\t\t\tdecPlaces: 2\r\n\t\t\tparseNumbers: false\r\n\t\t\t}\r\n\r\n\t\t# --- sets @numCols, @lColAligns, @lColFormats\r\n\t\t@parseFormatString formatStr, hOptions\r\n\r\n\t\t# --- Items in @lRows must be a hash w/key 'opcode'\r\n\t\t@lRows = []\r\n\t\t@lColWidths = new Array(@numCols).fill(0)\r\n\t\t@totalWidth = undef\r\n\t\t@closed = false\r\n\r\n\t\t# --- Accumulate totals and subtotals\r\n\t\t#     When a subtotal row is added, subtotals are reset to 0\r\n\t\t@lColTotals    = new Array(@numCols).fill(undef)\r\n\t\t@lColSubTotals = new Array(@numCols).fill(undef)\r\n\r\n\t# ..........................................................\r\n\r\n\tparseFormatString: (formatStr, hOptions) ->\r\n\r\n\t\tassert defined(formatStr), \"missing format string\"\r\n\r\n\t\tlWords = words(formatStr)\r\n\t\t@numCols = lWords.length\r\n\r\n\t\t@lColAligns  = new Array(@numCols)\r\n\t\t@lColFormats = new Array(@numCols)\r\n\r\n\t\tfor word,colNum in lWords\r\n\t\t\tif (lMatches = word.match(/^(l|c|r)(\\%\\S+)?$/))\r\n\t\t\t\t[_, align, fmt] = lMatches\r\n\t\t\t\talignWord = switch align\r\n\t\t\t\t\twhen 'l' then 'left'\r\n\t\t\t\t\twhen 'c' then 'center'\r\n\t\t\t\t\twhen 'r' then 'right'\r\n\t\t\t\t\telse undef\r\n\t\t\t\tassert defined(alignWord), \"Bad format string: #{OL(formatStr)}\"\r\n\t\t\t\t@lColAligns[colNum] = alignWord\r\n\t\t\t\t@lColFormats[colNum] = fmt       # may be undef\r\n\t\t\telse\r\n\t\t\t\tcroak \"Bad format string: #{OL(formatStr)}\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tresetSubTotals: () ->\r\n\r\n\t\t@lColSubTotals.fill(undef)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\talignItem: (item, colNum) ->\r\n\r\n\t\tassert @closed, \"table not closed\"\r\n\t\tassert isString(item), \"Not a string: #{OL(item)}\"\r\n\t\tif (item.length == width)\r\n\t\t\treturn item\r\n\t\talign = @lColAligns[colNum]\r\n\t\tassert ['left','center','right'].includes(align), \\\r\n\t\t\t\t\"Bad align parm: #{OL(align)}\"\r\n\t\twidth = @lColWidths[colNum]\r\n\t\treturn alignString(item, width, align)\r\n\r\n\t# ..........................................................\r\n\r\n\tformatItem: (item, colNum) ->\r\n\r\n\t\tif notdefined(item)\r\n\t\t\treturn ''\r\n\t\tfmt = @lColFormats[colNum]\r\n\t\tif defined(fmt)\r\n\t\t\treturn sprintf(fmt, item)\r\n\t\telse if isString(item)\r\n\t\t\treturn item\r\n\t\telse if isNumber(item)\r\n\t\t\treturn item.toFixed(@hOptions.decPlaces)\r\n\t\telse\r\n\t\t\treturn OL(item)\r\n\r\n\t# ..........................................................\r\n\r\n\tdumpInternals: () ->\r\n\r\n\t\tLOGVALUE 'totalWidth', @totalWidth\r\n\t\tLOGVALUE 'numCols:', @numCols\r\n\t\tLOGVALUE 'lColWidths:', @lColWidths\r\n\t\tLOGVALUE 'lColAligns', @lColAligns\r\n\t\tLOGVALUE 'lColFormats:', @lColFormats\r\n\t\tif nonEmpty(@lColTotals)\r\n\t\t\tLOGVALUE 'lColTotals:', @lColTotals\r\n\t\tif nonEmpty(@lColSubTotals)\r\n\t\t\tLOGVALUE 'lColSubTotals:', @lColSubTotals\r\n\t\tif nonEmpty(@lRows)\r\n\t\t\tLOGVALUE 'lRows:', @lRows\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- adjust column to width at least minWidth\r\n\r\n\tadjust: (colNum, minWidth) ->\r\n\r\n\t\tif (minWidth > @lColWidths[colNum])\r\n\t\t\t@lColWidths[colNum] = minWidth\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tadjustColWidths: (lRow) ->\r\n\r\n\t\tfor item,colNum in lRow\r\n\t\t\tif isString(item)\r\n\t\t\t\t@adjust colNum, item.length\r\n\t\t\telse if isArray(item)\r\n\t\t\t\tfor str in item\r\n\t\t\t\t\t@adjust colNum, str.length\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taccum: (num, colNum) ->\r\n\r\n\t\tassert isNumber(num), \"Not a number: #{OL(num)}\"\r\n\r\n\t\tif defined(@lColTotals[colNum])\r\n\t\t\t@lColTotals[colNum] += num\r\n\t\telse\r\n\t\t\t@lColTotals[colNum] = num\r\n\r\n\t\tif defined(@lColSubTotals[colNum])\r\n\t\t\t@lColSubTotals[colNum] += num\r\n\t\telse\r\n\t\t\t@lColSubTotals[colNum] = num\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tlabels: (lRow) ->\r\n\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert isArray(lRow), \"Not an array: #{OL(lRow)}\"\r\n\t\tassert (lRow.length == @numCols),\r\n\t\t\t\t\"bad length: lRow = #{OL(lRow)}\"\r\n\t\t@adjustColWidths lRow\r\n\t\thRow = {\r\n\t\t\topcode: 'labels'\r\n\t\t\tlRow\r\n\t\t\t}\r\n\t\t@lRows.push hRow\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tdata: (lRow) ->\r\n\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert isArray(lRow), \"Not an array: #{OL(lRow)}\"\r\n\t\tassert (lRow.length == @numCols), \"lRow = #{OL(lRow)}\"\r\n\t\tlRow = lRow.map (item, colNum) =>\r\n\t\t\tif notdefined(item)\r\n\t\t\t\treturn ''\r\n\t\t\telse if isString(item)\r\n\t\t\t\tif @hOptions.parseNumbers && item.match(///^\r\n\t\t\t\t\t\t\\d+         # one or more digits\r\n\t\t\t\t\t\t(\\.\\d*)?    # optional decimal part\r\n\t\t\t\t\t\t([Ee]\\d+)?  # optional exponent\r\n\t\t\t\t\t\t$///)\r\n\t\t\t\t\tnum = parseFloat(item)\r\n\t\t\t\t\t@accum num, colNum\r\n\t\t\t\t\tformatted = @formatItem(num, colNum)\r\n\t\t\t\t\treturn formatted\r\n\t\t\t\telse\r\n\t\t\t\t\treturn item\r\n\t\t\telse if isNumber(item)\r\n\t\t\t\t@accum item, colNum\r\n\t\t\t\tformatted = @formatItem(item, colNum)\r\n\t\t\t\treturn formatted\r\n\t\t\telse\r\n\t\t\t\tformatted = @formatItem(num, colNum)\r\n\t\t\t\treturn formatted\r\n\t\t@adjustColWidths lRow\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'data'\r\n\t\t\tlRow\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsep: (ch='-') ->\r\n\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (ch.length == 1), \"Non-char arg\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'sep'\r\n\t\t\tch\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfullsep: (ch='-') ->\r\n\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert (ch.length == 1), \"Non-char arg\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'fullsep'\r\n\t\t\tch\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttitle: (title, align='center') ->\r\n\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tassert isString(title, 'nonempty'), \"Bad title: '@{title}'\"\r\n\t\tassert ['left','center','right'].includes(align),\r\n\t\t\t\"Bad align: #{OL(align)}\"\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'title'\r\n\t\t\ttitle\r\n\t\t\talign\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttotals: () ->\r\n\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tlRow = @lColTotals.map (item, colNum) =>\r\n\t\t\treturn @formatItem(item, colNum)\r\n\t\t@adjustColWidths lRow\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'totals'\r\n\t\t\tlRow\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsubtotals: () ->\r\n\r\n\t\tassert ! @closed, \"table is closed\"\r\n\t\tlRow = @lColSubTotals.map (item, colNum) =>\r\n\t\t\treturn @formatItem(item, colNum)\r\n\t\t@resetSubTotals()\r\n\t\t@adjustColWidths lRow\r\n\t\t@lRows.push {\r\n\t\t\topcode: 'subtotals'\r\n\t\t\tlRow\r\n\t\t\t}\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tclose: () ->\r\n\r\n\t\t# --- Allow multiple calls to close()\r\n\t\tif @closed\r\n\t\t\treturn\r\n\r\n\t\t# --- We can now compute some other stuff\r\n\t\t@totalWidth = @lColWidths.reduce(\r\n\t\t\t(acc, n) => acc+n,\r\n\t\t\t0) + (@numCols - 1)\r\n\r\n\t\t# --- Go through @lRows, updating 'sep' entries\r\n\t\tfor h in @lRows\r\n\t\t\tif (h.opcode == 'sep')\r\n\t\t\t\th.lRow = @lColWidths.map((w) =>\r\n\t\t\t\t\th.ch.repeat(w))\r\n\r\n\t\t@closed = true\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tasString: (hOptions={}) ->\r\n\r\n\t\t@close()\r\n\r\n\t\t{hide} = getOptions hOptions, {\r\n\t\t\thide: ''\r\n\t\t\t}\r\n\r\n\t\tif isEmpty(hide)\r\n\t\t\twidth = @totalWidth\r\n\t\t\tlHide = []\r\n\t\telse\r\n\t\t\tif isInteger(hide)\r\n\t\t\t\tlHide = [hide]\r\n\t\t\telse\r\n\t\t\t\tlHide = hide.split(',').map((s) => parseInt(s))\r\n\r\n\t\t\t# --- We have to compute width\r\n\t\t\twidth = 0\r\n\t\t\tfor w,i in @lColWidths\r\n\t\t\t\tif ! lHide.includes(i)\r\n\t\t\t\t\twidth += w+1\r\n\t\t\twidth -= 1\r\n\r\n\t\t# --- Map each item in @lRows to a string\r\n\t\tlLines = @lRows.map (hRow) =>\r\n\t\t\t{opcode, title, lRow, ch, align} = hRow\r\n\t\t\tif defined(lRow)\r\n\t\t\t\tnumCols = 0\r\n\t\t\t\thColWidth = {}\r\n\t\t\t\thColAlign = {}\r\n\t\t\t\tlRow = lRow.filter((elem, index) =>\r\n\t\t\t\t\tif lHide.includes(index)\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\thColWidth[numCols] = @lColWidths[index]\r\n\t\t\t\t\t\thColAlign[numCols] = @lColAligns[index]\r\n\t\t\t\t\t\t++numCols\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\t)\r\n\t\t\tswitch opcode\r\n\t\t\t\twhen 'title'\r\n\t\t\t\t\treturn padString(title, width, align)\r\n\t\t\t\twhen 'sep'\r\n\t\t\t\t\treturn lRow.join(' ')\r\n\t\t\t\twhen 'fullsep'\r\n\t\t\t\t\treturn ch.repeat(width)\r\n\t\t\t\twhen 'labels'\r\n\t\t\t\t\t# --- labels are always center aligned\r\n\t\t\t\t\treturn lRow.map((item, colNum) =>\r\n\t\t\t\t\t\tw = hColWidth[colNum]\r\n\t\t\t\t\t\ta = hColAlign[colNum]\r\n\t\t\t\t\t\treturn padString(item, w, 'center')\r\n\t\t\t\t\t\t).join(' ')\r\n\t\t\t\twhen 'data','totals','subtotals'\r\n\t\t\t\t\treturn lRow.map((item, colNum) =>\r\n\t\t\t\t\t\tw = hColWidth[colNum]\r\n\t\t\t\t\t\ta = hColAlign[colNum]\r\n\t\t\t\t\t\treturn padString(item, w, a)\r\n\t\t\t\t\t\t).join(' ')\r\n\r\n\r\n\t\ttable = toBlock(lLines.map((line) => rtrim(line)))\r\n\t\treturn table\r\n"
  ]
}