{
  "version": 3,
  "file": "exec-utils.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\exec-utils.coffee"
  ],
  "names": [],
  "mappings": "AAAmB;AAAA,IAAA;;AAEnB,OAAA;EAAQ,IAAR;EAAc,QAAd;CAAA,MAAA;;AACA,OAAA;EAAQ,SAAR;CAAA,MAAA;;AACA,SAAA,GAAY,SAAA,CAAU,IAAV;;AAEZ,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,UAD7B;EACyC,KADzC;EACgD,MADhD;CAAA,MAAA,oBANmB;;;AAYnB,OAAA,IAAO,OAAA,GAAU,CAAC,OAAD,EAAU,WAAS,CAAA,CAAnB,CAAA,GAAA;AACjB,MAAA,MAAA;;EAEC,QAAA,GAAW,UAAA,CAAW,QAAX,EAAqB;IAC/B,QAAA,EAAU,MADqB;IAE/B,WAAA,EAAa;EAFkB,CAArB;EAIX,MAAA,GAAS,QAAA,CAAS,OAAT,EAAkB,QAAlB;EACT,MAAA,CAAO,OAAA,CAAQ,MAAR,CAAP,EAAwB,8BAAxB;EACA,MAAA,GAAS,MAAM,CAAC,QAAP,CAAA;EACT,MAAA,CAAO,OAAA,CAAQ,MAAR,CAAP,EAAwB,8BAAxB;AACA,SAAO;AAXS,EAZE;;;AA2BnB,OAAA,IAAO,aAAA,GAAgB,CAAC,OAAD,EAAU,WAAS,CAAA,CAAnB,CAAA,GAAA;AACvB,MAAA,MAAA;;EAEC,QAAA,GAAW,UAAA,CAAW,QAAX,EAAqB;IAC/B,QAAA,EAAU,MADqB;IAE/B,WAAA,EAAa;EAFkB,CAArB;EAIX,MAAA,GAAS,QAAA,CAAS,OAAT,EAAkB,QAAlB,CAA2B,CAAC,QAA5B,CAAA;EACT,OAAO,CAAC,GAAR,CAAY,MAAZ;AACA,SAAO;AATe,EA3BJ;;;AAwCnB,OAAA,IAAO,YAAA,GAAe,CAAC,OAAD,EAAU,WAAS,CAAA,CAAnB,CAAA,GAAA,EAAA;;EAGrB,QAAA,GAAW,UAAA,CAAW,QAAX,EAAqB;IAC/B,QAAA,EAAU,MADqB;IAE/B,WAAA,EAAa;EAFkB,CAArB;AAIX,SAAO,SAAA,CAAU,OAAV,EAAmB,QAAnB;AAPc,EAxCH;;;AAmDnB,OAAA,IAAO,WAAA,GAAc,CAAA,CAAA,GAAA;AAErB,MAAA;EAAC,MAAA,GAAS,OAAA,CAAQ,yBAAR;AACT,SAAO,KAAA,CAAM,MAAN;AAHa",
  "sourcesContent": [
    "# exec-utils.coffee\r\n\r\nimport {exec, execSync} from 'node:child_process'\r\nimport {promisify} from 'node:util'\r\nexecAsync = promisify(exec)\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, chomp, assert,\r\n\t} from '@jdeighan/llutils'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport execCmd = (cmdLine, hOptions={}) =>\r\n\t# --- may throw an exception\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tencoding: 'utf8'\r\n\t\twindowsHide: true\r\n\t\t}\r\n\tresult = execSync(cmdLine, hOptions)\r\n\tassert defined(result), \"undef return from execSync()\"\r\n\tresult = result.toString()\r\n\tassert defined(result), \"undef return from execSync()\"\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport execAndLogCmd = (cmdLine, hOptions={}) =>\r\n\t# --- may throw an exception\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tencoding: 'utf8'\r\n\t\twindowsHide: true\r\n\t\t}\r\n\tresult = execSync(cmdLine, hOptions).toString()\r\n\tconsole.log result\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport execCmdAsync = (cmdLine, hOptions={}) =>\r\n\t# --- may throw an exception\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tencoding: 'utf8'\r\n\t\twindowsHide: true\r\n\t\t}\r\n\treturn execAsync(cmdLine, hOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport npmLogLevel = () =>\r\n\r\n\tresult = execCmd('npm config get loglevel')\r\n\treturn chomp(result)\r\n\r\n"
  ]
}