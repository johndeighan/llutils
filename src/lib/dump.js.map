{
  "version": 3,
  "file": "dump.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\dump.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# dump.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, OL, log,\r\n\tcentered, toTAML, isString, isEmpty, escapeBlock,\r\n\tassert, croak, stripCR, toArray, toBlock, rpad,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tTextBlock, TextBlockList,\r\n\t} from '@jdeighan/llutils/text-block'\r\nimport {toNICE} from '@jdeighan/llutils/to-nice'\r\n\r\nexport defValue = '.undef.'\r\nexport setDefValue = (str) => defValue = str; return\r\n\r\nexport defLabel = 'VALUE'\r\nexport setDefLabel = (str) => defLabel = str; return\r\n\r\nexport minWidth = undef\r\nexport setMinWidth = (w) => minWidth = w\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport DUMP = (item, label=undef, hOptions={}) =>\r\n\r\n\tif isString(item) && isEmpty(item)\r\n\t\titem = defValue\r\n\r\n\tif defined(label)\r\n\t\tassert isString(label), \"not a string: #{OL(label)}\"\r\n\t\tlabel = label.replaceAll('_',' ')\r\n\telse\r\n\t\tlabel = defLabel\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tesc: false\r\n\t\toneLine: true\r\n\t\tminWidth: 40\r\n\t\tmaxWidth: 78\r\n\t\tbox: false\r\n\t\tformat: 'NICE'  # --- can be 'JSON', 'TAML', 'NICE'\r\n\t\tsortKeys: true\r\n\t\techo: true\r\n\t\tnocr: true\r\n\t\tasArray: false\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\t{esc, oneLine, minWidth, maxWidth, box, format,\r\n\t\tsortKeys, echo, nocr, asArray, debug,\r\n\t\t} = hOptions\r\n\r\n\tif debug\r\n\t\tconsole.dir {esc, oneLine, minWidth, maxWidth,\r\n\t\t\t\tbox, format,\r\n\t\t\t\tsortKeys, echo, nocr, asArray, debug}\r\n\r\n\tif oneLine\r\n\t\tif nocr && isString(item)\r\n\t\t\titem = stripCR(item)\r\n\t\tstr = OL(item, {esc})\r\n\t\tif defined(label)\r\n\t\t\tlongStr = \"#{label} = #{str}\"\r\n\t\telse\r\n\t\t\tlongStr = str\r\n\t\tif (longStr.length <= maxWidth)\r\n\t\t\tif echo\r\n\t\t\t\tconsole.log longStr\r\n\t\t\tif asArray\r\n\t\t\t\treturn [longStr]\r\n\t\t\telse\r\n\t\t\t\treturn longStr\r\n\t\telse if debug\r\n\t\t\tconsole.log \"Doesn't fit on one line\"\r\n\r\n\tswitch format\r\n\t\twhen 'JSON'\r\n\t\t\titem = JSONstringify(item, undef, 3)\r\n\t\twhen 'TAML'\r\n\t\t\titem = toTAML(item)\r\n\t\twhen 'NICE'\r\n\t\t\titem = toNICE(item, {sortKeys})\r\n\r\n\t# --- If still not a string, convert to NICE format\r\n\tif !isString(item)\r\n\t\titem = toNICE(item, {sortKeys})\r\n\r\n\t# --- Create a TextBlockList object\r\n\tblocks = new TextBlockList({esc})\r\n\tblocks.addBlock(label, item)\r\n\r\n\thOpt = {minWidth}\r\n\tif box\r\n\t\thOpt.format = 'box'\r\n\r\n\tif echo\r\n\t\tconsole.log blocks.asString(hOpt)\r\n\r\n\tif asArray\r\n\t\treturn blocks.asArray(hOpt)\r\n\telse\r\n\t\treturn blocks.asString(hOpt)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport BOX = (item, label='RESULT', hOptions={}) =>\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tbox: true\r\n\t\toneLine: false    # never oneLine when boxing\r\n\t\t}\r\n\treturn DUMP(item, label, hOptions)\r\n"
  ]
}