========================================
RULE: data
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[14]:  4 PUSH_EMPTY_ARRAY
  ┌───────────────  New Code  ───────────────┐
  │ s2 = [];                                 │
  └──────────────────────────────────────────┘
  OP[17]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s3 = peg$parse_desc();                   │
  └──────────────────────────────────────────┘
  OP[20]: 16 WHILE_NOT_ERROR
    OP[ 0]: 10 APPEND
    ┌───────────────  New Code  ───────────────┐
    │ s2.push(s3);                             │
    └──────────────────────────────────────────┘
    OP[ 1]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s3 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[ 4]: 27 RULE
    ┌───────────────  New Code  ───────────────┐
    │ s4 = peg$parse_SEP();                    │
    └──────────────────────────────────────────┘
    OP[ 7]: 15 IF_NOT_ERROR
      OP[ 0]:  6 POP
      OP[ 3]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s4 = peg$parse_desc();                   │
      └──────────────────────────────────────────┘
      OP[ 6]: 14 IF_ERROR
        OP[ 0]:  6 POP
        OP[ 1]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s3;                        │
        └──────────────────────────────────────────┘
        OP[ 2]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s3 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
        OP[ 0]:  9 NIP
        ┌───────────────  New Code  ───────────────┐
        │ s3 = s4;                                 │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s4 === peg$FAILED) {                 │
      │   peg$currPos = s3;                      │
      │   s3 = peg$FAILED;                       │
      │ } else {                                 │
      │   s3 = s4;                               │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  9 NIP
      ┌───────────────  New Code  ───────────────┐
      │ s3 = s4;                                 │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s4 !== peg$FAILED) {                 │
    │   s4 = peg$parse_desc();                 │
    │                                          │
    │   if (s4 === peg$FAILED) {               │
    │     peg$currPos = s3;                    │
    │     s3 = peg$FAILED;                     │
    │   } else {                               │
    │     s3 = s4;                             │
    │   }                                      │
    │ } else {                                 │
    │   s3 = s4;                               │
    │ }                                        │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ while (s3 !== peg$FAILED) {              │
  │   s2.push(s3);                           │
  │   s3 = peg$currPos;                      │
  │   s4 = peg$parse_SEP();                  │
  │                                          │
  │   if (s4 !== peg$FAILED) {               │
  │     s4 = peg$parse_desc();               │
  │                                          │
  │     if (s4 === peg$FAILED) {             │
  │       peg$currPos = s3;                  │
  │       s3 = peg$FAILED;                   │
  │     } else {                             │
  │       s3 = s4;                           │
  │     }                                    │
  │   } else {                               │
  │     s3 = s4;                             │
  │   }                                      │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[46]:  6 POP
  OP[47]: 30 IF_LT
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s1;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$FAILED;                         │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s1 = s2;                                 │
    │                                          │
    └──────────────────────────────────────────┘
  OP[59]: 15 IF_NOT_ERROR
    OP[ 2]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s2 = [];                                 │
    └──────────────────────────────────────────┘
    OP[ 5]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s3 = peg$c1;                             │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s3 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e0); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 10) {                        │
    │   s3 = peg$c1;                                                     │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "data",                                                  │
    │     result: "\n",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s3 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "data",                                                  │
    │     details: "\n",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[14]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s2.push(s3);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s3 = peg$c1;                             │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s3 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e0); } │
        └──────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 10) {                        │
      │   s3 = peg$c1;                                                     │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "data",                                                  │
      │     result: "\n",                                                  │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s3 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "data",                                                  │
      │     details: "\n",                                                 │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ while (s3 !== peg$FAILED) {                                          │
    │   s2.push(s3);                                                       │
    │   if (input.charCodeAt(peg$currPos) === 10) {                        │
    │     s3 = peg$c1;                                                     │
    │     peg$currPos++;                                                   │
    │     peg$tracer.trace({                                               │
    │       type: "string.match",                                          │
    │       rule: "data",                                                  │
    │       result: "\n",                                                  │
    │       location: peg$computeLocation(startPos, peg$currPos, true),    │
    │     });                                                              │
    │   } else {                                                           │
    │     s3 = peg$FAILED;                                                 │
    │     if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
    │     peg$tracer.trace({                                               │
    │       type: "string.fail",                                           │
    │       rule: "data",                                                  │
    │       details: "\n",                                                 │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │     });                                                              │
    │   }                                                                  │
    │                                                                      │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[28]:  6 POP
    OP[30]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[32]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f0(s1);                         │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌──────────────────────────────  New Code  ──────────────────────────────┐
  │ if (s1 !== peg$FAILED) {                                               │
  │   s2 = [];                                                             │
  │   if (input.charCodeAt(peg$currPos) === 10) {                          │
  │     s3 = peg$c1;                                                       │
  │     peg$currPos++;                                                     │
  │     peg$tracer.trace({                                                 │
  │       type: "string.match",                                            │
  │       rule: "data",                                                    │
  │       result: "\n",                                                    │
  │       location: peg$computeLocation(startPos, peg$currPos, true),      │
  │     });                                                                │
  │   } else {                                                             │
  │     s3 = peg$FAILED;                                                   │
  │     if (peg$silentFails === 0) { peg$fail(peg$e0); }                   │
  │     peg$tracer.trace({                                                 │
  │       type: "string.fail",                                             │
  │       rule: "data",                                                    │
  │       details: "\n",                                                   │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │     });                                                                │
  │   }                                                                    │
  │                                                                        │
  │   while (s3 !== peg$FAILED) {                                          │
  │     s2.push(s3);                                                       │
  │     if (input.charCodeAt(peg$currPos) === 10) {                        │
  │       s3 = peg$c1;                                                     │
  │       peg$currPos++;                                                   │
  │       peg$tracer.trace({                                               │
  │         type: "string.match",                                          │
  │         rule: "data",                                                  │
  │         result: "\n",                                                  │
  │         location: peg$computeLocation(startPos, peg$currPos, true),    │
  │       });                                                              │
  │     } else {                                                           │
  │       s3 = peg$FAILED;                                                 │
  │       if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
  │       peg$tracer.trace({                                               │
  │         type: "string.fail",                                           │
  │         rule: "data",                                                  │
  │         details: "\n",                                                 │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │       });                                                              │
  │     }                                                                  │
  │   }                                                                    │
  │                                                                        │
  │   peg$savedPos = s0;                                                   │
  │   s0 = peg$f0(s1);                                                     │
  │ } else {                                                               │
  │   peg$currPos = s0;                                                    │
  │   s0 = peg$FAILED;                                                     │
  │ }                                                                      │
  └────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────  data CODE  ───────────────────────────────┐
│ function peg$parse_data() {                                              │
│                                                                          │
│   var startPos = peg$currPos;                                            │
│   var s0, s1, s2, s3, s4;                                                │
│                                                                          │
│   peg$tracer.trace({                                                     │
│     type: "rule.enter",                                                  │
│     rule: "data",                                                        │
│     location: peg$computeLocation(startPos, startPos, true),             │
│   });                                                                    │
│                                                                          │
│   s0 = peg$currPos;                                                      │
│   s1 = peg$currPos;                                                      │
│   s2 = [];                                                               │
│   s3 = peg$parse_desc();                                                 │
│   while (s3 !== peg$FAILED) {                                            │
│     s2.push(s3);                                                         │
│     s3 = peg$currPos;                                                    │
│     s4 = peg$parse_SEP();                                                │
│     if (s4 !== peg$FAILED) {                                             │
│       s4 = peg$parse_desc();                                             │
│       if (s4 === peg$FAILED) {                                           │
│         peg$currPos = s3;                                                │
│         s3 = peg$FAILED;                                                 │
│       } else {                                                           │
│         s3 = s4;                                                         │
│       }                                                                  │
│     } else {                                                             │
│       s3 = s4;                                                           │
│     }                                                                    │
│   }                                                                      │
│   if (s2.length < 1) {                                                   │
│     peg$currPos = s1;                                                    │
│     s1 = peg$FAILED;                                                     │
│   } else {                                                               │
│     s1 = s2;                                                             │
│   }                                                                      │
│   if (s1 !== peg$FAILED) {                                               │
│     s2 = [];                                                             │
│     if (input.charCodeAt(peg$currPos) === 10) {                          │
│       s3 = peg$c1;                                                       │
│       peg$currPos++;                                                     │
│       peg$tracer.trace({                                                 │
│         type: "string.match",                                            │
│         rule: "data",                                                    │
│         result: "\n",                                                    │
│         location: peg$computeLocation(startPos, peg$currPos, true),      │
│       });                                                                │
│     } else {                                                             │
│       s3 = peg$FAILED;                                                   │
│       if (peg$silentFails === 0) { peg$fail(peg$e0); }                   │
│       peg$tracer.trace({                                                 │
│         type: "string.fail",                                             │
│         rule: "data",                                                    │
│         details: "\n",                                                   │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│       });                                                                │
│     }                                                                    │
│     while (s3 !== peg$FAILED) {                                          │
│       s2.push(s3);                                                       │
│       if (input.charCodeAt(peg$currPos) === 10) {                        │
│         s3 = peg$c1;                                                     │
│         peg$currPos++;                                                   │
│         peg$tracer.trace({                                               │
│           type: "string.match",                                          │
│           rule: "data",                                                  │
│           result: "\n",                                                  │
│           location: peg$computeLocation(startPos, peg$currPos, true),    │
│         });                                                              │
│       } else {                                                           │
│         s3 = peg$FAILED;                                                 │
│         if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
│         peg$tracer.trace({                                               │
│           type: "string.fail",                                           │
│           rule: "data",                                                  │
│           details: "\n",                                                 │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│         });                                                              │
│       }                                                                  │
│     }                                                                    │
│     peg$savedPos = s0;                                                   │
│     s0 = peg$f0(s1);                                                     │
│   } else {                                                               │
│     peg$currPos = s0;                                                    │
│     s0 = peg$FAILED;                                                     │
│   }                                                                      │
│                                                                          │
│                                                                          │
│   if (s0 !== peg$FAILED) {                                               │
│     peg$tracer.trace({                                                   │
│       type: "rule.match",                                                │
│       rule: "data",                                                      │
│       result: s0,                                                        │
│       location: peg$computeLocation(startPos, peg$currPos, true),        │
│     });                                                                  │
│   } else {                                                               │
│     peg$tracer.trace({                                                   │
│       type: "rule.fail",                                                 │
│       rule: "data",                                                      │
│       location: peg$computeLocation(startPos, startPos, true),           │
│     });                                                                  │
│   }                                                                      │
│                                                                          │
│   return s0;                                                             │
│ }                                                                        │
└──────────────────────────────────────────────────────────────────────────┘
========================================
RULE: desc
========================================
  OP[ 6]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[15]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_expr();                   │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 15 IF_NOT_ERROR
    OP[ 2]: 25 UPDATE_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = peg$currPos;              │
    └──────────────────────────────────────────┘
    OP[ 3]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$f1(s1);                         │
    └──────────────────────────────────────────┘
    OP[ 8]: 13 IF
      OP[ 0]:  6 POP
      OP[ 1]:  1 PUSH_UNDEFINED
      ┌───────────────  New Code  ───────────────┐
      │ s2 = undefined;                          │
      └──────────────────────────────────────────┘
      OP[ 0]:  6 POP
      OP[ 1]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s2 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s2) {                                │
    │   s2 = undefined;                        │
    │ } else {                                 │
    │   s2 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[16]: 15 IF_NOT_ERROR
      OP[12]:  5 PUSH_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ s3 = peg$currPos;                        │
      │                                          │
      └──────────────────────────────────────────┘
      OP[15]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s4 = peg$parse_INDENT();                 │
      └──────────────────────────────────────────┘
      OP[18]: 15 IF_NOT_ERROR
        OP[ 4]: 27 RULE
        ┌───────────────  New Code  ───────────────┐
        │ s5 = peg$parse_data();                   │
        └──────────────────────────────────────────┘
        OP[ 8]: 15 IF_NOT_ERROR
          OP[ 2]: 27 RULE
          ┌───────────────  New Code  ───────────────┐
          │ s6 = peg$parse_UNDENT();                 │
          └──────────────────────────────────────────┘
          OP[ 5]: 15 IF_NOT_ERROR
            OP[ 0]: 36 PLUCK
            ┌───────────────  New Code  ───────────────┐
            │ s3 = s5;                                 │
            │                                          │
            └──────────────────────────────────────────┘
            OP[ 0]:  8 POP_N
            OP[ 2]:  7 POP_CURR_POS
            ┌───────────────  New Code  ───────────────┐
            │ peg$currPos = s3;                        │
            └──────────────────────────────────────────┘
            OP[ 3]:  3 PUSH_FAILED
            ┌───────────────  New Code  ───────────────┐
            │ s3 = peg$FAILED;                         │
            │                                          │
            └──────────────────────────────────────────┘
          ┌───────────────  New Code  ───────────────┐
          │ if (s6 !== peg$FAILED) {                 │
          │   s3 = s5;                               │
          │                                          │
          │ } else {                                 │
          │   peg$currPos = s3;                      │
          │   s3 = peg$FAILED;                       │
          │                                          │
          │ }                                        │
          └──────────────────────────────────────────┘
          OP[ 0]:  8 POP_N
          OP[ 2]:  7 POP_CURR_POS
          ┌───────────────  New Code  ───────────────┐
          │ peg$currPos = s3;                        │
          └──────────────────────────────────────────┘
          OP[ 3]:  3 PUSH_FAILED
          ┌───────────────  New Code  ───────────────┐
          │ s3 = peg$FAILED;                         │
          │                                          │
          └──────────────────────────────────────────┘
        ┌───────────────  New Code  ───────────────┐
        │ if (s5 !== peg$FAILED) {                 │
        │   s6 = peg$parse_UNDENT();               │
        │                                          │
        │   if (s6 !== peg$FAILED) {               │
        │     s3 = s5;                             │
        │                                          │
        │   } else {                               │
        │     peg$currPos = s3;                    │
        │     s3 = peg$FAILED;                     │
        │                                          │
        │   }                                      │
        │ } else {                                 │
        │   peg$currPos = s3;                      │
        │   s3 = peg$FAILED;                       │
        │                                          │
        │ }                                        │
        └──────────────────────────────────────────┘
        OP[ 0]:  6 POP
        OP[ 1]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s3;                        │
        └──────────────────────────────────────────┘
        OP[ 2]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s3 = peg$FAILED;                         │
        │                                          │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s4 !== peg$FAILED) {                 │
      │   s5 = peg$parse_data();                 │
      │                                          │
      │   if (s5 !== peg$FAILED) {               │
      │     s6 = peg$parse_UNDENT();             │
      │                                          │
      │     if (s6 !== peg$FAILED) {             │
      │       s3 = s5;                           │
      │                                          │
      │     } else {                             │
      │       peg$currPos = s3;                  │
      │       s3 = peg$FAILED;                   │
      │                                          │
      │     }                                    │
      │   } else {                               │
      │     peg$currPos = s3;                    │
      │     s3 = peg$FAILED;                     │
      │                                          │
      │   }                                      │
      │ } else {                                 │
      │   peg$currPos = s3;                      │
      │   s3 = peg$FAILED;                       │
      │                                          │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[57]: 14 IF_ERROR
        OP[ 0]:  6 POP
        OP[ 1]:  2 PUSH_NULL
        ┌───────────────  New Code  ───────────────┐
        │ s3 = null;                               │
        │                                          │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s3 === peg$FAILED) {                 │
      │   s3 = null;                             │
      │                                          │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[68]: 25 UPDATE_SAVED_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$savedPos = peg$currPos;              │
      └──────────────────────────────────────────┘
      OP[69]: 26 CALL
      ┌───────────────  New Code  ───────────────┐
      │ s4 = peg$f2(s1, s3);                     │
      └──────────────────────────────────────────┘
      OP[75]: 13 IF
        OP[ 0]:  6 POP
        OP[ 1]:  1 PUSH_UNDEFINED
        ┌───────────────  New Code  ───────────────┐
        │ s4 = undefined;                          │
        └──────────────────────────────────────────┘
        OP[ 0]:  6 POP
        OP[ 1]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s4 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s4) {                                │
      │   s4 = undefined;                        │
      │ } else {                                 │
      │   s4 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[83]: 15 IF_NOT_ERROR
        OP[ 0]: 24 LOAD_SAVED_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$savedPos = s0;                       │
        └──────────────────────────────────────────┘
        OP[ 2]: 26 CALL
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$f3(s1, s3);                     │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s0;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s4 !== peg$FAILED) {                 │
      │   peg$savedPos = s0;                     │
      │   s0 = peg$f3(s1, s3);                   │
      │ } else {                                 │
      │   peg$currPos = s0;                      │
      │   s0 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s0;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s2 !== peg$FAILED) {                 │
    │   s3 = peg$currPos;                      │
    │   s4 = peg$parse_INDENT();               │
    │   if (s4 !== peg$FAILED) {               │
    │     s5 = peg$parse_data();               │
    │     if (s5 !== peg$FAILED) {             │
    │       s6 = peg$parse_UNDENT();           │
    │       if (s6 !== peg$FAILED) {           │
    │         s3 = s5;                         │
    │       } else {                           │
    │         peg$currPos = s3;                │
    │         s3 = peg$FAILED;                 │
    │       }                                  │
    │     } else {                             │
    │       peg$currPos = s3;                  │
    │       s3 = peg$FAILED;                   │
    │     }                                    │
    │   } else {                               │
    │     peg$currPos = s3;                    │
    │     s3 = peg$FAILED;                     │
    │   }                                      │
    │   if (s3 === peg$FAILED) {               │
    │     s3 = null;                           │
    │   }                                      │
    │                                          │
    │   peg$savedPos = peg$currPos;            │
    │   s4 = peg$f2(s1, s3);                   │
    │   if (s4) {                              │
    │     s4 = undefined;                      │
    │   } else {                               │
    │     s4 = peg$FAILED;                     │
    │   }                                      │
    │                                          │
    │   if (s4 !== peg$FAILED) {               │
    │     peg$savedPos = s0;                   │
    │     s0 = peg$f3(s1, s3);                 │
    │   } else {                               │
    │     peg$currPos = s0;                    │
    │     s0 = peg$FAILED;                     │
    │   }                                      │
    │ } else {                                 │
    │   peg$currPos = s0;                      │
    │   s0 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 !== peg$FAILED) {                 │
  │   peg$savedPos = peg$currPos;            │
  │   s2 = peg$f1(s1);                       │
  │   if (s2) {                              │
  │     s2 = undefined;                      │
  │   } else {                               │
  │     s2 = peg$FAILED;                     │
  │   }                                      │
  │                                          │
  │   if (s2 !== peg$FAILED) {               │
  │     s3 = peg$currPos;                    │
  │     s4 = peg$parse_INDENT();             │
  │     if (s4 !== peg$FAILED) {             │
  │       s5 = peg$parse_data();             │
  │       if (s5 !== peg$FAILED) {           │
  │         s6 = peg$parse_UNDENT();         │
  │         if (s6 !== peg$FAILED) {         │
  │           s3 = s5;                       │
  │         } else {                         │
  │           peg$currPos = s3;              │
  │           s3 = peg$FAILED;               │
  │         }                                │
  │       } else {                           │
  │         peg$currPos = s3;                │
  │         s3 = peg$FAILED;                 │
  │       }                                  │
  │     } else {                             │
  │       peg$currPos = s3;                  │
  │       s3 = peg$FAILED;                   │
  │     }                                    │
  │     if (s3 === peg$FAILED) {             │
  │       s3 = null;                         │
  │     }                                    │
  │                                          │
  │     peg$savedPos = peg$currPos;          │
  │     s4 = peg$f2(s1, s3);                 │
  │     if (s4) {                            │
  │       s4 = undefined;                    │
  │     } else {                             │
  │       s4 = peg$FAILED;                   │
  │     }                                    │
  │                                          │
  │     if (s4 !== peg$FAILED) {             │
  │       peg$savedPos = s0;                 │
  │       s0 = peg$f3(s1, s3);               │
  │     } else {                             │
  │       peg$currPos = s0;                  │
  │       s0 = peg$FAILED;                   │
  │     }                                    │
  │   } else {                               │
  │     peg$currPos = s0;                    │
  │     s0 = peg$FAILED;                     │
  │   }                                      │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[150]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 5]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[14]: 27 RULE
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$parse_listexpr();               │
    │                                          │
    └──────────────────────────────────────────┘
    OP[20]: 15 IF_NOT_ERROR
      OP[ 2]: 25 UPDATE_SAVED_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$savedPos = peg$currPos;              │
      └──────────────────────────────────────────┘
      OP[ 3]: 26 CALL
      ┌───────────────  New Code  ───────────────┐
      │ s2 = peg$f4(s1);                         │
      └──────────────────────────────────────────┘
      OP[ 8]: 13 IF
        OP[ 0]:  6 POP
        OP[ 1]:  1 PUSH_UNDEFINED
        ┌───────────────  New Code  ───────────────┐
        │ s2 = undefined;                          │
        └──────────────────────────────────────────┘
        OP[ 0]:  6 POP
        OP[ 1]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s2 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s2) {                                │
      │   s2 = undefined;                        │
      │ } else {                                 │
      │   s2 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[16]: 15 IF_NOT_ERROR
        OP[12]:  5 PUSH_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ s3 = peg$currPos;                        │
        │                                          │
        └──────────────────────────────────────────┘
        OP[15]: 27 RULE
        ┌───────────────  New Code  ───────────────┐
        │ s4 = peg$parse_INDENT();                 │
        └──────────────────────────────────────────┘
        OP[18]: 15 IF_NOT_ERROR
          OP[ 4]: 27 RULE
          ┌───────────────  New Code  ───────────────┐
          │ s5 = peg$parse_data();                   │
          └──────────────────────────────────────────┘
          OP[ 8]: 15 IF_NOT_ERROR
            OP[ 2]: 27 RULE
            ┌───────────────  New Code  ───────────────┐
            │ s6 = peg$parse_UNDENT();                 │
            └──────────────────────────────────────────┘
            OP[ 5]: 15 IF_NOT_ERROR
              OP[ 0]: 36 PLUCK
              ┌───────────────  New Code  ───────────────┐
              │ s3 = s5;                                 │
              │                                          │
              └──────────────────────────────────────────┘
              OP[ 0]:  8 POP_N
              OP[ 2]:  7 POP_CURR_POS
              ┌───────────────  New Code  ───────────────┐
              │ peg$currPos = s3;                        │
              └──────────────────────────────────────────┘
              OP[ 3]:  3 PUSH_FAILED
              ┌───────────────  New Code  ───────────────┐
              │ s3 = peg$FAILED;                         │
              │                                          │
              └──────────────────────────────────────────┘
            ┌───────────────  New Code  ───────────────┐
            │ if (s6 !== peg$FAILED) {                 │
            │   s3 = s5;                               │
            │                                          │
            │ } else {                                 │
            │   peg$currPos = s3;                      │
            │   s3 = peg$FAILED;                       │
            │                                          │
            │ }                                        │
            └──────────────────────────────────────────┘
            OP[ 0]:  8 POP_N
            OP[ 2]:  7 POP_CURR_POS
            ┌───────────────  New Code  ───────────────┐
            │ peg$currPos = s3;                        │
            └──────────────────────────────────────────┘
            OP[ 3]:  3 PUSH_FAILED
            ┌───────────────  New Code  ───────────────┐
            │ s3 = peg$FAILED;                         │
            │                                          │
            └──────────────────────────────────────────┘
          ┌───────────────  New Code  ───────────────┐
          │ if (s5 !== peg$FAILED) {                 │
          │   s6 = peg$parse_UNDENT();               │
          │                                          │
          │   if (s6 !== peg$FAILED) {               │
          │     s3 = s5;                             │
          │                                          │
          │   } else {                               │
          │     peg$currPos = s3;                    │
          │     s3 = peg$FAILED;                     │
          │                                          │
          │   }                                      │
          │ } else {                                 │
          │   peg$currPos = s3;                      │
          │   s3 = peg$FAILED;                       │
          │                                          │
          │ }                                        │
          └──────────────────────────────────────────┘
          OP[ 0]:  6 POP
          OP[ 1]:  7 POP_CURR_POS
          ┌───────────────  New Code  ───────────────┐
          │ peg$currPos = s3;                        │
          └──────────────────────────────────────────┘
          OP[ 2]:  3 PUSH_FAILED
          ┌───────────────  New Code  ───────────────┐
          │ s3 = peg$FAILED;                         │
          │                                          │
          └──────────────────────────────────────────┘
        ┌───────────────  New Code  ───────────────┐
        │ if (s4 !== peg$FAILED) {                 │
        │   s5 = peg$parse_data();                 │
        │                                          │
        │   if (s5 !== peg$FAILED) {               │
        │     s6 = peg$parse_UNDENT();             │
        │                                          │
        │     if (s6 !== peg$FAILED) {             │
        │       s3 = s5;                           │
        │                                          │
        │     } else {                             │
        │       peg$currPos = s3;                  │
        │       s3 = peg$FAILED;                   │
        │                                          │
        │     }                                    │
        │   } else {                               │
        │     peg$currPos = s3;                    │
        │     s3 = peg$FAILED;                     │
        │                                          │
        │   }                                      │
        │ } else {                                 │
        │   peg$currPos = s3;                      │
        │   s3 = peg$FAILED;                       │
        │                                          │
        │ }                                        │
        └──────────────────────────────────────────┘
        OP[57]: 14 IF_ERROR
          OP[ 0]:  6 POP
          OP[ 1]:  2 PUSH_NULL
          ┌───────────────  New Code  ───────────────┐
          │ s3 = null;                               │
          │                                          │
          └──────────────────────────────────────────┘
        ┌───────────────  New Code  ───────────────┐
        │ if (s3 === peg$FAILED) {                 │
        │   s3 = null;                             │
        │                                          │
        │ }                                        │
        └──────────────────────────────────────────┘
        OP[68]: 25 UPDATE_SAVED_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$savedPos = peg$currPos;              │
        └──────────────────────────────────────────┘
        OP[69]: 26 CALL
        ┌───────────────  New Code  ───────────────┐
        │ s4 = peg$f5(s1, s3);                     │
        └──────────────────────────────────────────┘
        OP[75]: 13 IF
          OP[ 0]:  6 POP
          OP[ 1]:  1 PUSH_UNDEFINED
          ┌───────────────  New Code  ───────────────┐
          │ s4 = undefined;                          │
          └──────────────────────────────────────────┘
          OP[ 0]:  6 POP
          OP[ 1]:  3 PUSH_FAILED
          ┌───────────────  New Code  ───────────────┐
          │ s4 = peg$FAILED;                         │
          └──────────────────────────────────────────┘
        ┌───────────────  New Code  ───────────────┐
        │ if (s4) {                                │
        │   s4 = undefined;                        │
        │ } else {                                 │
        │   s4 = peg$FAILED;                       │
        │ }                                        │
        └──────────────────────────────────────────┘
        OP[83]: 15 IF_NOT_ERROR
          OP[ 0]: 24 LOAD_SAVED_POS
          ┌───────────────  New Code  ───────────────┐
          │ peg$savedPos = s0;                       │
          └──────────────────────────────────────────┘
          OP[ 2]: 26 CALL
          ┌───────────────  New Code  ───────────────┐
          │ s0 = peg$f6(s1, s3);                     │
          └──────────────────────────────────────────┘
          OP[ 0]:  8 POP_N
          OP[ 2]:  7 POP_CURR_POS
          ┌───────────────  New Code  ───────────────┐
          │ peg$currPos = s0;                        │
          └──────────────────────────────────────────┘
          OP[ 3]:  3 PUSH_FAILED
          ┌───────────────  New Code  ───────────────┐
          │ s0 = peg$FAILED;                         │
          └──────────────────────────────────────────┘
        ┌───────────────  New Code  ───────────────┐
        │ if (s4 !== peg$FAILED) {                 │
        │   peg$savedPos = s0;                     │
        │   s0 = peg$f6(s1, s3);                   │
        │ } else {                                 │
        │   peg$currPos = s0;                      │
        │   s0 = peg$FAILED;                       │
        │ }                                        │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s0;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s2 !== peg$FAILED) {                 │
      │   s3 = peg$currPos;                      │
      │   s4 = peg$parse_INDENT();               │
      │   if (s4 !== peg$FAILED) {               │
      │     s5 = peg$parse_data();               │
      │     if (s5 !== peg$FAILED) {             │
      │       s6 = peg$parse_UNDENT();           │
      │       if (s6 !== peg$FAILED) {           │
      │         s3 = s5;                         │
      │       } else {                           │
      │         peg$currPos = s3;                │
      │         s3 = peg$FAILED;                 │
      │       }                                  │
      │     } else {                             │
      │       peg$currPos = s3;                  │
      │       s3 = peg$FAILED;                   │
      │     }                                    │
      │   } else {                               │
      │     peg$currPos = s3;                    │
      │     s3 = peg$FAILED;                     │
      │   }                                      │
      │   if (s3 === peg$FAILED) {               │
      │     s3 = null;                           │
      │   }                                      │
      │                                          │
      │   peg$savedPos = peg$currPos;            │
      │   s4 = peg$f5(s1, s3);                   │
      │   if (s4) {                              │
      │     s4 = undefined;                      │
      │   } else {                               │
      │     s4 = peg$FAILED;                     │
      │   }                                      │
      │                                          │
      │   if (s4 !== peg$FAILED) {               │
      │     peg$savedPos = s0;                   │
      │     s0 = peg$f6(s1, s3);                 │
      │   } else {                               │
      │     peg$currPos = s0;                    │
      │     s0 = peg$FAILED;                     │
      │   }                                      │
      │ } else {                                 │
      │   peg$currPos = s0;                      │
      │   s0 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  6 POP
      OP[ 1]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s0;                        │
      └──────────────────────────────────────────┘
      OP[ 2]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s1 !== peg$FAILED) {                 │
    │   peg$savedPos = peg$currPos;            │
    │   s2 = peg$f4(s1);                       │
    │   if (s2) {                              │
    │     s2 = undefined;                      │
    │   } else {                               │
    │     s2 = peg$FAILED;                     │
    │   }                                      │
    │                                          │
    │   if (s2 !== peg$FAILED) {               │
    │     s3 = peg$currPos;                    │
    │     s4 = peg$parse_INDENT();             │
    │     if (s4 !== peg$FAILED) {             │
    │       s5 = peg$parse_data();             │
    │       if (s5 !== peg$FAILED) {           │
    │         s6 = peg$parse_UNDENT();         │
    │         if (s6 !== peg$FAILED) {         │
    │           s3 = s5;                       │
    │         } else {                         │
    │           peg$currPos = s3;              │
    │           s3 = peg$FAILED;               │
    │         }                                │
    │       } else {                           │
    │         peg$currPos = s3;                │
    │         s3 = peg$FAILED;                 │
    │       }                                  │
    │     } else {                             │
    │       peg$currPos = s3;                  │
    │       s3 = peg$FAILED;                   │
    │     }                                    │
    │     if (s3 === peg$FAILED) {             │
    │       s3 = null;                         │
    │     }                                    │
    │                                          │
    │     peg$savedPos = peg$currPos;          │
    │     s4 = peg$f5(s1, s3);                 │
    │     if (s4) {                            │
    │       s4 = undefined;                    │
    │     } else {                             │
    │       s4 = peg$FAILED;                   │
    │     }                                    │
    │                                          │
    │     if (s4 !== peg$FAILED) {             │
    │       peg$savedPos = s0;                 │
    │       s0 = peg$f6(s1, s3);               │
    │     } else {                             │
    │       peg$currPos = s0;                  │
    │       s0 = peg$FAILED;                   │
    │     }                                    │
    │   } else {                               │
    │     peg$currPos = s0;                    │
    │     s0 = peg$FAILED;                     │
    │   }                                      │
    │ } else {                                 │
    │   peg$currPos = s0;                      │
    │   s0 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s0 === peg$FAILED) {                 │
  │   s0 = peg$currPos;                      │
  │   s1 = peg$parse_listexpr();             │
  │   if (s1 !== peg$FAILED) {               │
  │     peg$savedPos = peg$currPos;          │
  │     s2 = peg$f4(s1);                     │
  │     if (s2) {                            │
  │       s2 = undefined;                    │
  │     } else {                             │
  │       s2 = peg$FAILED;                   │
  │     }                                    │
  │     if (s2 !== peg$FAILED) {             │
  │       s3 = peg$currPos;                  │
  │       s4 = peg$parse_INDENT();           │
  │       if (s4 !== peg$FAILED) {           │
  │         s5 = peg$parse_data();           │
  │         if (s5 !== peg$FAILED) {         │
  │           s6 = peg$parse_UNDENT();       │
  │           if (s6 !== peg$FAILED) {       │
  │             s3 = s5;                     │
  │           } else {                       │
  │             peg$currPos = s3;            │
  │             s3 = peg$FAILED;             │
  │           }                              │
  │         } else {                         │
  │           peg$currPos = s3;              │
  │           s3 = peg$FAILED;               │
  │         }                                │
  │       } else {                           │
  │         peg$currPos = s3;                │
  │         s3 = peg$FAILED;                 │
  │       }                                  │
  │       if (s3 === peg$FAILED) {           │
  │         s3 = null;                       │
  │       }                                  │
  │       peg$savedPos = peg$currPos;        │
  │       s4 = peg$f5(s1, s3);               │
  │       if (s4) {                          │
  │         s4 = undefined;                  │
  │       } else {                           │
  │         s4 = peg$FAILED;                 │
  │       }                                  │
  │       if (s4 !== peg$FAILED) {           │
  │         peg$savedPos = s0;               │
  │         s0 = peg$f6(s1, s3);             │
  │       } else {                           │
  │         peg$currPos = s0;                │
  │         s0 = peg$FAILED;                 │
  │       }                                  │
  │     } else {                             │
  │       peg$currPos = s0;                  │
  │       s0 = peg$FAILED;                   │
  │     }                                    │
  │   } else {                               │
  │     peg$currPos = s0;                    │
  │     s0 = peg$FAILED;                     │
  │   }                                      │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘

┌───────────────────────────  desc CODE  ───────────────────────────┐
│ function peg$parse_desc() {                                       │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2, s3, s4, s5, s6;                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "desc",                                                 │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_expr();                                          │
│   if (s1 !== peg$FAILED) {                                        │
│     peg$savedPos = peg$currPos;                                   │
│     s2 = peg$f1(s1);                                              │
│     if (s2) {                                                     │
│       s2 = undefined;                                             │
│     } else {                                                      │
│       s2 = peg$FAILED;                                            │
│     }                                                             │
│     if (s2 !== peg$FAILED) {                                      │
│       s3 = peg$currPos;                                           │
│       s4 = peg$parse_INDENT();                                    │
│       if (s4 !== peg$FAILED) {                                    │
│         s5 = peg$parse_data();                                    │
│         if (s5 !== peg$FAILED) {                                  │
│           s6 = peg$parse_UNDENT();                                │
│           if (s6 !== peg$FAILED) {                                │
│             s3 = s5;                                              │
│           } else {                                                │
│             peg$currPos = s3;                                     │
│             s3 = peg$FAILED;                                      │
│           }                                                       │
│         } else {                                                  │
│           peg$currPos = s3;                                       │
│           s3 = peg$FAILED;                                        │
│         }                                                         │
│       } else {                                                    │
│         peg$currPos = s3;                                         │
│         s3 = peg$FAILED;                                          │
│       }                                                           │
│       if (s3 === peg$FAILED) {                                    │
│         s3 = null;                                                │
│       }                                                           │
│       peg$savedPos = peg$currPos;                                 │
│       s4 = peg$f2(s1, s3);                                        │
│       if (s4) {                                                   │
│         s4 = undefined;                                           │
│       } else {                                                    │
│         s4 = peg$FAILED;                                          │
│       }                                                           │
│       if (s4 !== peg$FAILED) {                                    │
│         peg$savedPos = s0;                                        │
│         s0 = peg$f3(s1, s3);                                      │
│       } else {                                                    │
│         peg$currPos = s0;                                         │
│         s0 = peg$FAILED;                                          │
│       }                                                           │
│     } else {                                                      │
│       peg$currPos = s0;                                           │
│       s0 = peg$FAILED;                                            │
│     }                                                             │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│   if (s0 === peg$FAILED) {                                        │
│     s0 = peg$currPos;                                             │
│     s1 = peg$parse_listexpr();                                    │
│     if (s1 !== peg$FAILED) {                                      │
│       peg$savedPos = peg$currPos;                                 │
│       s2 = peg$f4(s1);                                            │
│       if (s2) {                                                   │
│         s2 = undefined;                                           │
│       } else {                                                    │
│         s2 = peg$FAILED;                                          │
│       }                                                           │
│       if (s2 !== peg$FAILED) {                                    │
│         s3 = peg$currPos;                                         │
│         s4 = peg$parse_INDENT();                                  │
│         if (s4 !== peg$FAILED) {                                  │
│           s5 = peg$parse_data();                                  │
│           if (s5 !== peg$FAILED) {                                │
│             s6 = peg$parse_UNDENT();                              │
│             if (s6 !== peg$FAILED) {                              │
│               s3 = s5;                                            │
│             } else {                                              │
│               peg$currPos = s3;                                   │
│               s3 = peg$FAILED;                                    │
│             }                                                     │
│           } else {                                                │
│             peg$currPos = s3;                                     │
│             s3 = peg$FAILED;                                      │
│           }                                                       │
│         } else {                                                  │
│           peg$currPos = s3;                                       │
│           s3 = peg$FAILED;                                        │
│         }                                                         │
│         if (s3 === peg$FAILED) {                                  │
│           s3 = null;                                              │
│         }                                                         │
│         peg$savedPos = peg$currPos;                               │
│         s4 = peg$f5(s1, s3);                                      │
│         if (s4) {                                                 │
│           s4 = undefined;                                         │
│         } else {                                                  │
│           s4 = peg$FAILED;                                        │
│         }                                                         │
│         if (s4 !== peg$FAILED) {                                  │
│           peg$savedPos = s0;                                      │
│           s0 = peg$f6(s1, s3);                                    │
│         } else {                                                  │
│           peg$currPos = s0;                                       │
│           s0 = peg$FAILED;                                        │
│         }                                                         │
│       } else {                                                    │
│         peg$currPos = s0;                                         │
│         s0 = peg$FAILED;                                          │
│       }                                                           │
│     } else {                                                      │
│       peg$currPos = s0;                                           │
│       s0 = peg$FAILED;                                            │
│     }                                                             │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "desc",                                               │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "desc",                                               │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: expr
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[15]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c4;                             │
    │                                          │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s1 = peg$FAILED;                                 │
    │                                                  │
    │ if (peg$silentFails === 0) { peg$fail(peg$e1); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 33) {                        │
  │   s1 = peg$c4;                                                     │
  │                                                                    │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "expr",                                                  │
  │     result: "!",                                                   │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │                                                                    │
  │   if (peg$silentFails === 0) { peg$fail(peg$e1); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "expr",                                                  │
  │     details: "!",                                                  │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[24]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 1]:  2 PUSH_NULL
    ┌───────────────  New Code  ───────────────┐
    │ s1 = null;                               │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 === peg$FAILED) {                 │
  │   s1 = null;                             │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[45]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[48]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s3 = peg$parse__();                      │
  └──────────────────────────────────────────┘
  OP[53]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s4 = peg$c6;                             │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s4 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e2); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 63) {                        │
  │   s4 = peg$c6;                                                     │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "expr",                                                  │
  │     result: "?",                                                   │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s4 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e2); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "expr",                                                  │
  │     details: "?",                                                  │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[62]: 15 IF_NOT_ERROR
    OP[ 0]: 11 WRAP
    ┌───────────────  New Code  ───────────────┐
    │ s3 = [s3, s4];                           │
    └──────────────────────────────────────────┘
    OP[ 2]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s2 = s3;                                 │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s2;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s4 !== peg$FAILED) {                 │
  │   s3 = [s3, s4];                         │
  │   s2 = s3;                               │
  │                                          │
  │ } else {                                 │
  │   peg$currPos = s2;                      │
  │   s2 = peg$FAILED;                       │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[74]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 1]:  2 PUSH_NULL
    ┌───────────────  New Code  ───────────────┐
    │ s2 = null;                               │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 === peg$FAILED) {                 │
  │   s2 = null;                             │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[85]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s3 = peg$parse__();                      │
  └──────────────────────────────────────────┘
  OP[96]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s4 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[97]:  4 PUSH_EMPTY_ARRAY
  ┌───────────────  New Code  ───────────────┐
  │ s5 = [];                                 │
  └──────────────────────────────────────────┘
  OP[100]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s6 = peg$parse_ident();                  │
  └──────────────────────────────────────────┘
  OP[103]: 16 WHILE_NOT_ERROR
    OP[ 0]: 10 APPEND
    ┌───────────────  New Code  ───────────────┐
    │ s5.push(s6);                             │
    └──────────────────────────────────────────┘
    OP[ 1]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s6 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[ 4]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s7 = peg$c8;                             │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s7 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e3); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 46) {                        │
    │   s7 = peg$c8;                                                     │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "expr",                                                  │
    │     result: ".",                                                   │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s7 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e3); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "expr",                                                  │
    │     details: ".",                                                  │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[13]: 15 IF_NOT_ERROR
      OP[ 0]:  6 POP
      OP[ 3]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s7 = peg$parse_ident();                  │
      └──────────────────────────────────────────┘
      OP[ 6]: 14 IF_ERROR
        OP[ 0]:  6 POP
        OP[ 1]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s6;                        │
        └──────────────────────────────────────────┘
        OP[ 2]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s6 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
        OP[ 0]:  9 NIP
        ┌───────────────  New Code  ───────────────┐
        │ s6 = s7;                                 │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s7 === peg$FAILED) {                 │
      │   peg$currPos = s6;                      │
      │   s6 = peg$FAILED;                       │
      │ } else {                                 │
      │   s6 = s7;                               │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  9 NIP
      ┌───────────────  New Code  ───────────────┐
      │ s6 = s7;                                 │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s7 !== peg$FAILED) {                 │
    │   s7 = peg$parse_ident();                │
    │                                          │
    │   if (s7 === peg$FAILED) {               │
    │     peg$currPos = s6;                    │
    │     s6 = peg$FAILED;                     │
    │   } else {                               │
    │     s6 = s7;                             │
    │   }                                      │
    │ } else {                                 │
    │   s6 = s7;                               │
    │ }                                        │
    └──────────────────────────────────────────┘
  ┌─────────────────────────────  New Code  ─────────────────────────────┐
  │ while (s6 !== peg$FAILED) {                                          │
  │   s5.push(s6);                                                       │
  │   s6 = peg$currPos;                                                  │
  │   if (input.charCodeAt(peg$currPos) === 46) {                        │
  │     s7 = peg$c8;                                                     │
  │     peg$currPos++;                                                   │
  │     peg$tracer.trace({                                               │
  │       type: "string.match",                                          │
  │       rule: "expr",                                                  │
  │       result: ".",                                                   │
  │       location: peg$computeLocation(startPos, peg$currPos, true),    │
  │     });                                                              │
  │   } else {                                                           │
  │     s7 = peg$FAILED;                                                 │
  │     if (peg$silentFails === 0) { peg$fail(peg$e3); }                 │
  │     peg$tracer.trace({                                               │
  │       type: "string.fail",                                           │
  │       rule: "expr",                                                  │
  │       details: ".",                                                  │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │     });                                                              │
  │   }                                                                  │
  │                                                                      │
  │   if (s7 !== peg$FAILED) {                                           │
  │     s7 = peg$parse_ident();                                          │
  │                                                                      │
  │     if (s7 === peg$FAILED) {                                         │
  │       peg$currPos = s6;                                              │
  │       s6 = peg$FAILED;                                               │
  │     } else {                                                         │
  │       s6 = s7;                                                       │
  │     }                                                                │
  │   } else {                                                           │
  │     s6 = s7;                                                         │
  │   }                                                                  │
  │ }                                                                    │
  └──────────────────────────────────────────────────────────────────────┘
  OP[135]:  6 POP
  OP[136]: 30 IF_LT
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s4;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s4 = peg$FAILED;                         │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s4 = s5;                                 │
    │                                          │
    └──────────────────────────────────────────┘
  OP[148]: 15 IF_NOT_ERROR
    OP[12]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s5 = peg$currPos;                        │
    │                                          │
    └──────────────────────────────────────────┘
    OP[15]: 27 RULE
    ┌───────────────  New Code  ───────────────┐
    │ s6 = peg$parse__();                      │
    └──────────────────────────────────────────┘
    OP[20]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s7 = peg$c10;                            │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s7 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e4); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 61) {                        │
    │   s7 = peg$c10;                                                    │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "expr",                                                  │
    │     result: "=",                                                   │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s7 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e4); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "expr",                                                  │
    │     details: "=",                                                  │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[29]: 15 IF_NOT_ERROR
      OP[ 2]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s8 = peg$parse__();                      │
      └──────────────────────────────────────────┘
      OP[ 9]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s9 = peg$parse_string();                 │
      └──────────────────────────────────────────┘
      OP[13]: 15 IF_NOT_ERROR
        OP[ 0]: 36 PLUCK
        ┌───────────────  New Code  ───────────────┐
        │ s5 = s9;                                 │
        │                                          │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s5;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s5 = peg$FAILED;                         │
        │                                          │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s9 !== peg$FAILED) {                 │
      │   s5 = s9;                               │
      │                                          │
      │ } else {                                 │
      │   peg$currPos = s5;                      │
      │   s5 = peg$FAILED;                       │
      │                                          │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s5;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s5 = peg$FAILED;                         │
      │                                          │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s7 !== peg$FAILED) {                 │
    │   s8 = peg$parse__();                    │
    │                                          │
    │   s9 = peg$parse_string();               │
    │                                          │
    │   if (s9 !== peg$FAILED) {               │
    │     s5 = s9;                             │
    │                                          │
    │   } else {                               │
    │     peg$currPos = s5;                    │
    │     s5 = peg$FAILED;                     │
    │                                          │
    │   }                                      │
    │ } else {                                 │
    │   peg$currPos = s5;                      │
    │   s5 = peg$FAILED;                       │
    │                                          │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[62]: 14 IF_ERROR
      OP[ 0]:  6 POP
      OP[ 1]:  2 PUSH_NULL
      ┌───────────────  New Code  ───────────────┐
      │ s5 = null;                               │
      │                                          │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s5 === peg$FAILED) {                 │
    │   s5 = null;                             │
    │                                          │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[83]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s6 = peg$currPos;                        │
    │                                          │
    └──────────────────────────────────────────┘
    OP[86]: 27 RULE
    ┌───────────────  New Code  ───────────────┐
    │ s7 = peg$parse__();                      │
    └──────────────────────────────────────────┘
    OP[91]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s8 = peg$c12;                            │
      │ peg$currPos += 2;                        │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s8 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e5); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.substr(peg$currPos, 2) === peg$c12) {                    │
    │   s8 = peg$c12;                                                    │
    │   peg$currPos += 2;                                                │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "expr",                                                  │
    │     result: "as",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s8 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e5); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "expr",                                                  │
    │     details: "as",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[100]: 15 IF_NOT_ERROR
      OP[ 2]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s9 = peg$parse__();                      │
      └──────────────────────────────────────────┘
      OP[ 9]: 27 RULE
      ┌───────────────  New Code  ───────────────┐
      │ s10 = peg$parse_ident();                 │
      └──────────────────────────────────────────┘
      OP[13]: 15 IF_NOT_ERROR
        OP[ 0]: 36 PLUCK
        ┌───────────────  New Code  ───────────────┐
        │ s6 = s10;                                │
        │                                          │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s6;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s6 = peg$FAILED;                         │
        │                                          │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s10 !== peg$FAILED) {                │
      │   s6 = s10;                              │
      │                                          │
      │ } else {                                 │
      │   peg$currPos = s6;                      │
      │   s6 = peg$FAILED;                       │
      │                                          │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s6;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s6 = peg$FAILED;                         │
      │                                          │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s8 !== peg$FAILED) {                 │
    │   s9 = peg$parse__();                    │
    │                                          │
    │   s10 = peg$parse_ident();               │
    │                                          │
    │   if (s10 !== peg$FAILED) {              │
    │     s6 = s10;                            │
    │                                          │
    │   } else {                               │
    │     peg$currPos = s6;                    │
    │     s6 = peg$FAILED;                     │
    │                                          │
    │   }                                      │
    │ } else {                                 │
    │   peg$currPos = s6;                      │
    │   s6 = peg$FAILED;                       │
    │                                          │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[133]: 14 IF_ERROR
      OP[ 0]:  6 POP
      OP[ 1]:  2 PUSH_NULL
      ┌───────────────  New Code  ───────────────┐
      │ s6 = null;                               │
      │                                          │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s6 === peg$FAILED) {                 │
    │   s6 = null;                             │
    │                                          │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[142]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[144]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f7(s1, s2, s4, s5, s6);         │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌─────────────────────────────  New Code  ─────────────────────────────┐
  │ if (s4 !== peg$FAILED) {                                             │
  │   s5 = peg$currPos;                                                  │
  │   s6 = peg$parse__();                                                │
  │   if (input.charCodeAt(peg$currPos) === 61) {                        │
  │     s7 = peg$c10;                                                    │
  │     peg$currPos++;                                                   │
  │     peg$tracer.trace({                                               │
  │       type: "string.match",                                          │
  │       rule: "expr",                                                  │
  │       result: "=",                                                   │
  │       location: peg$computeLocation(startPos, peg$currPos, true),    │
  │     });                                                              │
  │   } else {                                                           │
  │     s7 = peg$FAILED;                                                 │
  │     if (peg$silentFails === 0) { peg$fail(peg$e4); }                 │
  │     peg$tracer.trace({                                               │
  │       type: "string.fail",                                           │
  │       rule: "expr",                                                  │
  │       details: "=",                                                  │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │     });                                                              │
  │   }                                                                  │
  │   if (s7 !== peg$FAILED) {                                           │
  │     s8 = peg$parse__();                                              │
  │     s9 = peg$parse_string();                                         │
  │     if (s9 !== peg$FAILED) {                                         │
  │       s5 = s9;                                                       │
  │     } else {                                                         │
  │       peg$currPos = s5;                                              │
  │       s5 = peg$FAILED;                                               │
  │     }                                                                │
  │   } else {                                                           │
  │     peg$currPos = s5;                                                │
  │     s5 = peg$FAILED;                                                 │
  │   }                                                                  │
  │   if (s5 === peg$FAILED) {                                           │
  │     s5 = null;                                                       │
  │   }                                                                  │
  │                                                                      │
  │   s6 = peg$currPos;                                                  │
  │   s7 = peg$parse__();                                                │
  │   if (input.substr(peg$currPos, 2) === peg$c12) {                    │
  │     s8 = peg$c12;                                                    │
  │     peg$currPos += 2;                                                │
  │     peg$tracer.trace({                                               │
  │       type: "string.match",                                          │
  │       rule: "expr",                                                  │
  │       result: "as",                                                  │
  │       location: peg$computeLocation(startPos, peg$currPos, true),    │
  │     });                                                              │
  │   } else {                                                           │
  │     s8 = peg$FAILED;                                                 │
  │     if (peg$silentFails === 0) { peg$fail(peg$e5); }                 │
  │     peg$tracer.trace({                                               │
  │       type: "string.fail",                                           │
  │       rule: "expr",                                                  │
  │       details: "as",                                                 │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │     });                                                              │
  │   }                                                                  │
  │   if (s8 !== peg$FAILED) {                                           │
  │     s9 = peg$parse__();                                              │
  │     s10 = peg$parse_ident();                                         │
  │     if (s10 !== peg$FAILED) {                                        │
  │       s6 = s10;                                                      │
  │     } else {                                                         │
  │       peg$currPos = s6;                                              │
  │       s6 = peg$FAILED;                                               │
  │     }                                                                │
  │   } else {                                                           │
  │     peg$currPos = s6;                                                │
  │     s6 = peg$FAILED;                                                 │
  │   }                                                                  │
  │   if (s6 === peg$FAILED) {                                           │
  │     s6 = null;                                                       │
  │   }                                                                  │
  │                                                                      │
  │   peg$savedPos = s0;                                                 │
  │   s0 = peg$f7(s1, s2, s4, s5, s6);                                   │
  │ } else {                                                             │
  │   peg$currPos = s0;                                                  │
  │   s0 = peg$FAILED;                                                   │
  │ }                                                                    │
  └──────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────  expr CODE  ──────────────────────────────┐
│ function peg$parse_expr() {                                            │
│                                                                        │
│   var startPos = peg$currPos;                                          │
│   var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;                     │
│                                                                        │
│   peg$tracer.trace({                                                   │
│     type: "rule.enter",                                                │
│     rule: "expr",                                                      │
│     location: peg$computeLocation(startPos, startPos, true),           │
│   });                                                                  │
│                                                                        │
│   s0 = peg$currPos;                                                    │
│   if (input.charCodeAt(peg$currPos) === 33) {                          │
│     s1 = peg$c4;                                                       │
│     peg$currPos++;                                                     │
│     peg$tracer.trace({                                                 │
│       type: "string.match",                                            │
│       rule: "expr",                                                    │
│       result: "!",                                                     │
│       location: peg$computeLocation(startPos, peg$currPos, true),      │
│     });                                                                │
│   } else {                                                             │
│     s1 = peg$FAILED;                                                   │
│     if (peg$silentFails === 0) { peg$fail(peg$e1); }                   │
│     peg$tracer.trace({                                                 │
│       type: "string.fail",                                             │
│       rule: "expr",                                                    │
│       details: "!",                                                    │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│     });                                                                │
│   }                                                                    │
│   if (s1 === peg$FAILED) {                                             │
│     s1 = null;                                                         │
│   }                                                                    │
│   s2 = peg$currPos;                                                    │
│   s3 = peg$parse__();                                                  │
│   if (input.charCodeAt(peg$currPos) === 63) {                          │
│     s4 = peg$c6;                                                       │
│     peg$currPos++;                                                     │
│     peg$tracer.trace({                                                 │
│       type: "string.match",                                            │
│       rule: "expr",                                                    │
│       result: "?",                                                     │
│       location: peg$computeLocation(startPos, peg$currPos, true),      │
│     });                                                                │
│   } else {                                                             │
│     s4 = peg$FAILED;                                                   │
│     if (peg$silentFails === 0) { peg$fail(peg$e2); }                   │
│     peg$tracer.trace({                                                 │
│       type: "string.fail",                                             │
│       rule: "expr",                                                    │
│       details: "?",                                                    │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│     });                                                                │
│   }                                                                    │
│   if (s4 !== peg$FAILED) {                                             │
│     s3 = [s3, s4];                                                     │
│     s2 = s3;                                                           │
│   } else {                                                             │
│     peg$currPos = s2;                                                  │
│     s2 = peg$FAILED;                                                   │
│   }                                                                    │
│   if (s2 === peg$FAILED) {                                             │
│     s2 = null;                                                         │
│   }                                                                    │
│   s3 = peg$parse__();                                                  │
│   s4 = peg$currPos;                                                    │
│   s5 = [];                                                             │
│   s6 = peg$parse_ident();                                              │
│   while (s6 !== peg$FAILED) {                                          │
│     s5.push(s6);                                                       │
│     s6 = peg$currPos;                                                  │
│     if (input.charCodeAt(peg$currPos) === 46) {                        │
│       s7 = peg$c8;                                                     │
│       peg$currPos++;                                                   │
│       peg$tracer.trace({                                               │
│         type: "string.match",                                          │
│         rule: "expr",                                                  │
│         result: ".",                                                   │
│         location: peg$computeLocation(startPos, peg$currPos, true),    │
│       });                                                              │
│     } else {                                                           │
│       s7 = peg$FAILED;                                                 │
│       if (peg$silentFails === 0) { peg$fail(peg$e3); }                 │
│       peg$tracer.trace({                                               │
│         type: "string.fail",                                           │
│         rule: "expr",                                                  │
│         details: ".",                                                  │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│       });                                                              │
│     }                                                                  │
│     if (s7 !== peg$FAILED) {                                           │
│       s7 = peg$parse_ident();                                          │
│       if (s7 === peg$FAILED) {                                         │
│         peg$currPos = s6;                                              │
│         s6 = peg$FAILED;                                               │
│       } else {                                                         │
│         s6 = s7;                                                       │
│       }                                                                │
│     } else {                                                           │
│       s6 = s7;                                                         │
│     }                                                                  │
│   }                                                                    │
│   if (s5.length < 1) {                                                 │
│     peg$currPos = s4;                                                  │
│     s4 = peg$FAILED;                                                   │
│   } else {                                                             │
│     s4 = s5;                                                           │
│   }                                                                    │
│   if (s4 !== peg$FAILED) {                                             │
│     s5 = peg$currPos;                                                  │
│     s6 = peg$parse__();                                                │
│     if (input.charCodeAt(peg$currPos) === 61) {                        │
│       s7 = peg$c10;                                                    │
│       peg$currPos++;                                                   │
│       peg$tracer.trace({                                               │
│         type: "string.match",                                          │
│         rule: "expr",                                                  │
│         result: "=",                                                   │
│         location: peg$computeLocation(startPos, peg$currPos, true),    │
│       });                                                              │
│     } else {                                                           │
│       s7 = peg$FAILED;                                                 │
│       if (peg$silentFails === 0) { peg$fail(peg$e4); }                 │
│       peg$tracer.trace({                                               │
│         type: "string.fail",                                           │
│         rule: "expr",                                                  │
│         details: "=",                                                  │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│       });                                                              │
│     }                                                                  │
│     if (s7 !== peg$FAILED) {                                           │
│       s8 = peg$parse__();                                              │
│       s9 = peg$parse_string();                                         │
│       if (s9 !== peg$FAILED) {                                         │
│         s5 = s9;                                                       │
│       } else {                                                         │
│         peg$currPos = s5;                                              │
│         s5 = peg$FAILED;                                               │
│       }                                                                │
│     } else {                                                           │
│       peg$currPos = s5;                                                │
│       s5 = peg$FAILED;                                                 │
│     }                                                                  │
│     if (s5 === peg$FAILED) {                                           │
│       s5 = null;                                                       │
│     }                                                                  │
│     s6 = peg$currPos;                                                  │
│     s7 = peg$parse__();                                                │
│     if (input.substr(peg$currPos, 2) === peg$c12) {                    │
│       s8 = peg$c12;                                                    │
│       peg$currPos += 2;                                                │
│       peg$tracer.trace({                                               │
│         type: "string.match",                                          │
│         rule: "expr",                                                  │
│         result: "as",                                                  │
│         location: peg$computeLocation(startPos, peg$currPos, true),    │
│       });                                                              │
│     } else {                                                           │
│       s8 = peg$FAILED;                                                 │
│       if (peg$silentFails === 0) { peg$fail(peg$e5); }                 │
│       peg$tracer.trace({                                               │
│         type: "string.fail",                                           │
│         rule: "expr",                                                  │
│         details: "as",                                                 │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│       });                                                              │
│     }                                                                  │
│     if (s8 !== peg$FAILED) {                                           │
│       s9 = peg$parse__();                                              │
│       s10 = peg$parse_ident();                                         │
│       if (s10 !== peg$FAILED) {                                        │
│         s6 = s10;                                                      │
│       } else {                                                         │
│         peg$currPos = s6;                                              │
│         s6 = peg$FAILED;                                               │
│       }                                                                │
│     } else {                                                           │
│       peg$currPos = s6;                                                │
│       s6 = peg$FAILED;                                                 │
│     }                                                                  │
│     if (s6 === peg$FAILED) {                                           │
│       s6 = null;                                                       │
│     }                                                                  │
│     peg$savedPos = s0;                                                 │
│     s0 = peg$f7(s1, s2, s4, s5, s6);                                   │
│   } else {                                                             │
│     peg$currPos = s0;                                                  │
│     s0 = peg$FAILED;                                                   │
│   }                                                                    │
│                                                                        │
│                                                                        │
│   if (s0 !== peg$FAILED) {                                             │
│     peg$tracer.trace({                                                 │
│       type: "rule.match",                                              │
│       rule: "expr",                                                    │
│       result: s0,                                                      │
│       location: peg$computeLocation(startPos, peg$currPos, true),      │
│     });                                                                │
│   } else {                                                             │
│     peg$tracer.trace({                                                 │
│       type: "rule.fail",                                               │
│       rule: "expr",                                                    │
│       location: peg$computeLocation(startPos, startPos, true),         │
│     });                                                                │
│   }                                                                    │
│                                                                        │
│   return s0;                                                           │
│ }                                                                      │
└────────────────────────────────────────────────────────────────────────┘
========================================
RULE: listexpr
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[ 7]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c13;                            │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s1 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e6); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 91) {                        │
  │   s1 = peg$c13;                                                    │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "listexpr",                                              │
  │     result: "[",                                                   │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e6); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "listexpr",                                              │
  │     details: "[",                                                  │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[16]: 15 IF_NOT_ERROR
    OP[ 8]: 27 RULE
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$parse_expr();                   │
    │                                          │
    └──────────────────────────────────────────┘
    OP[14]: 15 IF_NOT_ERROR
      OP[ 2]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s3 = peg$c14;                            │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s3 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e7); } │
        └──────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 93) {                        │
      │   s3 = peg$c14;                                                    │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "listexpr",                                              │
      │     result: "]",                                                   │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s3 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e7); }                 │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "listexpr",                                              │
      │     details: "]",                                                  │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
      OP[11]: 15 IF_NOT_ERROR
        OP[ 0]: 24 LOAD_SAVED_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$savedPos = s0;                       │
        └──────────────────────────────────────────┘
        OP[ 2]: 26 CALL
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$f8(s2);                         │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s0;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s0 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s3 !== peg$FAILED) {                 │
      │   peg$savedPos = s0;                     │
      │   s0 = peg$f8(s2);                       │
      │ } else {                                 │
      │   peg$currPos = s0;                      │
      │   s0 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s0;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ if (s2 !== peg$FAILED) {                                             │
    │   if (input.charCodeAt(peg$currPos) === 93) {                        │
    │     s3 = peg$c14;                                                    │
    │     peg$currPos++;                                                   │
    │     peg$tracer.trace({                                               │
    │       type: "string.match",                                          │
    │       rule: "listexpr",                                              │
    │       result: "]",                                                   │
    │       location: peg$computeLocation(startPos, peg$currPos, true),    │
    │     });                                                              │
    │   } else {                                                           │
    │     s3 = peg$FAILED;                                                 │
    │     if (peg$silentFails === 0) { peg$fail(peg$e7); }                 │
    │     peg$tracer.trace({                                               │
    │       type: "string.fail",                                           │
    │       rule: "listexpr",                                              │
    │       details: "]",                                                  │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │     });                                                              │
    │   }                                                                  │
    │                                                                      │
    │   if (s3 !== peg$FAILED) {                                           │
    │     peg$savedPos = s0;                                               │
    │     s0 = peg$f8(s2);                                                 │
    │   } else {                                                           │
    │     peg$currPos = s0;                                                │
    │     s0 = peg$FAILED;                                                 │
    │   }                                                                  │
    │ } else {                                                             │
    │   peg$currPos = s0;                                                  │
    │   s0 = peg$FAILED;                                                   │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌──────────────────────────────  New Code  ──────────────────────────────┐
  │ if (s1 !== peg$FAILED) {                                               │
  │   s2 = peg$parse_expr();                                               │
  │                                                                        │
  │   if (s2 !== peg$FAILED) {                                             │
  │     if (input.charCodeAt(peg$currPos) === 93) {                        │
  │       s3 = peg$c14;                                                    │
  │       peg$currPos++;                                                   │
  │       peg$tracer.trace({                                               │
  │         type: "string.match",                                          │
  │         rule: "listexpr",                                              │
  │         result: "]",                                                   │
  │         location: peg$computeLocation(startPos, peg$currPos, true),    │
  │       });                                                              │
  │     } else {                                                           │
  │       s3 = peg$FAILED;                                                 │
  │       if (peg$silentFails === 0) { peg$fail(peg$e7); }                 │
  │       peg$tracer.trace({                                               │
  │         type: "string.fail",                                           │
  │         rule: "listexpr",                                              │
  │         details: "]",                                                  │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │       });                                                              │
  │     }                                                                  │
  │                                                                        │
  │     if (s3 !== peg$FAILED) {                                           │
  │       peg$savedPos = s0;                                               │
  │       s0 = peg$f8(s2);                                                 │
  │     } else {                                                           │
  │       peg$currPos = s0;                                                │
  │       s0 = peg$FAILED;                                                 │
  │     }                                                                  │
  │   } else {                                                             │
  │     peg$currPos = s0;                                                  │
  │     s0 = peg$FAILED;                                                   │
  │   }                                                                    │
  │ } else {                                                               │
  │   peg$currPos = s0;                                                    │
  │   s0 = peg$FAILED;                                                     │
  │ }                                                                      │
  └────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────  listexpr CODE  ─────────────────────────────┐
│ function peg$parse_listexpr() {                                          │
│                                                                          │
│   var startPos = peg$currPos;                                            │
│   var s0, s1, s2, s3;                                                    │
│                                                                          │
│   peg$tracer.trace({                                                     │
│     type: "rule.enter",                                                  │
│     rule: "listexpr",                                                    │
│     location: peg$computeLocation(startPos, startPos, true),             │
│   });                                                                    │
│                                                                          │
│   s0 = peg$currPos;                                                      │
│   if (input.charCodeAt(peg$currPos) === 91) {                            │
│     s1 = peg$c13;                                                        │
│     peg$currPos++;                                                       │
│     peg$tracer.trace({                                                   │
│       type: "string.match",                                              │
│       rule: "listexpr",                                                  │
│       result: "[",                                                       │
│       location: peg$computeLocation(startPos, peg$currPos, true),        │
│     });                                                                  │
│   } else {                                                               │
│     s1 = peg$FAILED;                                                     │
│     if (peg$silentFails === 0) { peg$fail(peg$e6); }                     │
│     peg$tracer.trace({                                                   │
│       type: "string.fail",                                               │
│       rule: "listexpr",                                                  │
│       details: "[",                                                      │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│     });                                                                  │
│   }                                                                      │
│   if (s1 !== peg$FAILED) {                                               │
│     s2 = peg$parse_expr();                                               │
│     if (s2 !== peg$FAILED) {                                             │
│       if (input.charCodeAt(peg$currPos) === 93) {                        │
│         s3 = peg$c14;                                                    │
│         peg$currPos++;                                                   │
│         peg$tracer.trace({                                               │
│           type: "string.match",                                          │
│           rule: "listexpr",                                              │
│           result: "]",                                                   │
│           location: peg$computeLocation(startPos, peg$currPos, true),    │
│         });                                                              │
│       } else {                                                           │
│         s3 = peg$FAILED;                                                 │
│         if (peg$silentFails === 0) { peg$fail(peg$e7); }                 │
│         peg$tracer.trace({                                               │
│           type: "string.fail",                                           │
│           rule: "listexpr",                                              │
│           details: "]",                                                  │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│         });                                                              │
│       }                                                                  │
│       if (s3 !== peg$FAILED) {                                           │
│         peg$savedPos = s0;                                               │
│         s0 = peg$f8(s2);                                                 │
│       } else {                                                           │
│         peg$currPos = s0;                                                │
│         s0 = peg$FAILED;                                                 │
│       }                                                                  │
│     } else {                                                             │
│       peg$currPos = s0;                                                  │
│       s0 = peg$FAILED;                                                   │
│     }                                                                    │
│   } else {                                                               │
│     peg$currPos = s0;                                                    │
│     s0 = peg$FAILED;                                                     │
│   }                                                                      │
│                                                                          │
│                                                                          │
│   if (s0 !== peg$FAILED) {                                               │
│     peg$tracer.trace({                                                   │
│       type: "rule.match",                                                │
│       rule: "listexpr",                                                  │
│       result: s0,                                                        │
│       location: peg$computeLocation(startPos, peg$currPos, true),        │
│     });                                                                  │
│   } else {                                                               │
│     peg$tracer.trace({                                                   │
│       type: "rule.fail",                                                 │
│       rule: "listexpr",                                                  │
│       location: peg$computeLocation(startPos, startPos, true),           │
│     });                                                                  │
│   }                                                                      │
│                                                                          │
│   return s0;                                                             │
│ }                                                                        │
└──────────────────────────────────────────────────────────────────────────┘
========================================
RULE: ident
========================================
  OP[ 2]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[11]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[16]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[19]: 20 MATCH_CHAR_CLASS
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s3 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e8); } │
    └──────────────────────────────────────────────────┘
  ┌─────────────────────────────  New Code  ─────────────────────────────┐
  │ s3 = input.charAt(peg$currPos);                                      │
  │ if (peg$r0.test(s3)) {                                               │
  │   peg$currPos++;                                                     │
  │   peg$tracer.trace({                                                 │
  │     type: "class.match",                                             │
  │     rule: "ident",                                                   │
  │     result: input.charAt(peg$currPos-1),                             │
  │     details: peg$r0.toString(),                                      │
  │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │   });                                                                │
  │ } else {                                                             │
  │   s3 = peg$FAILED;                                                   │
  │   if (peg$silentFails === 0) { peg$fail(peg$e8); }                   │
  │   peg$tracer.trace({                                                 │
  │     type: "class.fail",                                              │
  │     rule: "ident",                                                   │
  │     details: peg$r0.toString(),                                      │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │   });                                                                │
  │ }                                                                    │
  └──────────────────────────────────────────────────────────────────────┘
  OP[28]: 15 IF_NOT_ERROR
    OP[ 2]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s4 = [];                                 │
    └──────────────────────────────────────────┘
    OP[ 5]: 20 MATCH_CHAR_CLASS
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s5 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e9); } │
      └──────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ s5 = input.charAt(peg$currPos);                                      │
    │ if (peg$r1.test(s5)) {                                               │
    │   peg$currPos++;                                                     │
    │   peg$tracer.trace({                                                 │
    │     type: "class.match",                                             │
    │     rule: "ident",                                                   │
    │     result: input.charAt(peg$currPos-1),                             │
    │     details: peg$r1.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │   });                                                                │
    │ } else {                                                             │
    │   s5 = peg$FAILED;                                                   │
    │   if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
    │   peg$tracer.trace({                                                 │
    │     type: "class.fail",                                              │
    │     rule: "ident",                                                   │
    │     details: peg$r1.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │   });                                                                │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[14]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s4.push(s5);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s5 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e9); } │
        └──────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s5 = input.charAt(peg$currPos);                                      │
      │ if (peg$r1.test(s5)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "ident",                                                   │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r1.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s5 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "ident",                                                   │
      │     details: peg$r1.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
    ┌──────────────────────────────  New Code  ──────────────────────────────┐
    │ while (s5 !== peg$FAILED) {                                            │
    │   s4.push(s5);                                                         │
    │   s5 = input.charAt(peg$currPos);                                      │
    │   if (peg$r1.test(s5)) {                                               │
    │     peg$currPos++;                                                     │
    │     peg$tracer.trace({                                                 │
    │       type: "class.match",                                             │
    │       rule: "ident",                                                   │
    │       result: input.charAt(peg$currPos-1),                             │
    │       details: peg$r1.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │     });                                                                │
    │   } else {                                                             │
    │     s5 = peg$FAILED;                                                   │
    │     if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
    │     peg$tracer.trace({                                                 │
    │       type: "class.fail",                                              │
    │       rule: "ident",                                                   │
    │       details: peg$r1.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │     });                                                                │
    │   }                                                                    │
    │                                                                        │
    │ }                                                                      │
    └────────────────────────────────────────────────────────────────────────┘
    OP[28]:  6 POP
    OP[30]: 11 WRAP
    ┌───────────────  New Code  ───────────────┐
    │ s3 = [s3, s4];                           │
    └──────────────────────────────────────────┘
    OP[32]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s2 = s3;                                 │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s2;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────────────────────  New Code  ───────────────────────────────┐
  │ if (s3 !== peg$FAILED) {                                                 │
  │   s4 = [];                                                               │
  │   s5 = input.charAt(peg$currPos);                                        │
  │   if (peg$r1.test(s5)) {                                                 │
  │     peg$currPos++;                                                       │
  │     peg$tracer.trace({                                                   │
  │       type: "class.match",                                               │
  │       rule: "ident",                                                     │
  │       result: input.charAt(peg$currPos-1),                               │
  │       details: peg$r1.toString(),                                        │
  │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │     });                                                                  │
  │   } else {                                                               │
  │     s5 = peg$FAILED;                                                     │
  │     if (peg$silentFails === 0) { peg$fail(peg$e9); }                     │
  │     peg$tracer.trace({                                                   │
  │       type: "class.fail",                                                │
  │       rule: "ident",                                                     │
  │       details: peg$r1.toString(),                                        │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │     });                                                                  │
  │   }                                                                      │
  │                                                                          │
  │   while (s5 !== peg$FAILED) {                                            │
  │     s4.push(s5);                                                         │
  │     s5 = input.charAt(peg$currPos);                                      │
  │     if (peg$r1.test(s5)) {                                               │
  │       peg$currPos++;                                                     │
  │       peg$tracer.trace({                                                 │
  │         type: "class.match",                                             │
  │         rule: "ident",                                                   │
  │         result: input.charAt(peg$currPos-1),                             │
  │         details: peg$r1.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │       });                                                                │
  │     } else {                                                             │
  │       s5 = peg$FAILED;                                                   │
  │       if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
  │       peg$tracer.trace({                                                 │
  │         type: "class.fail",                                              │
  │         rule: "ident",                                                   │
  │         details: peg$r1.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │       });                                                                │
  │     }                                                                    │
  │   }                                                                      │
  │                                                                          │
  │   s3 = [s3, s4];                                                         │
  │   s2 = s3;                                                               │
  │ } else {                                                                 │
  │   peg$currPos = s2;                                                      │
  │   s2 = peg$FAILED;                                                       │
  │ }                                                                        │
  └──────────────────────────────────────────────────────────────────────────┘
  OP[69]: 15 IF_NOT_ERROR
    OP[ 0]:  6 POP
    OP[ 1]: 12 TEXT
    ┌───────────────  New Code  ───────────────┐
    │ s1 = input.substring(s1, peg$currPos);   │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  9 NIP
    ┌───────────────  New Code  ───────────────┐
    │ s1 = s2;                                 │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   s1 = input.substring(s1, peg$currPos); │
  │                                          │
  │ } else {                                 │
  │   s1 = s2;                               │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[79]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$f9(s1);                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s1 = peg$f9(s1);                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[89]:  9 NIP
  ┌───────────────  New Code  ───────────────┐
  │ s0 = s1;                                 │
  └──────────────────────────────────────────┘

┌───────────────────────────────  ident CODE  ───────────────────────────────┐
│ function peg$parse_ident() {                                               │
│                                                                            │
│   var startPos = peg$currPos;                                              │
│   var s0, s1, s2, s3, s4, s5;                                              │
│                                                                            │
│   peg$tracer.trace({                                                       │
│     type: "rule.enter",                                                    │
│     rule: "ident",                                                         │
│     location: peg$computeLocation(startPos, startPos, true),               │
│   });                                                                      │
│                                                                            │
│   s0 = peg$currPos;                                                        │
│   s1 = peg$currPos;                                                        │
│   s2 = peg$currPos;                                                        │
│   s3 = input.charAt(peg$currPos);                                          │
│   if (peg$r0.test(s3)) {                                                   │
│     peg$currPos++;                                                         │
│     peg$tracer.trace({                                                     │
│       type: "class.match",                                                 │
│       rule: "ident",                                                       │
│       result: input.charAt(peg$currPos-1),                                 │
│       details: peg$r0.toString(),                                          │
│       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),     │
│     });                                                                    │
│   } else {                                                                 │
│     s3 = peg$FAILED;                                                       │
│     if (peg$silentFails === 0) { peg$fail(peg$e8); }                       │
│     peg$tracer.trace({                                                     │
│       type: "class.fail",                                                  │
│       rule: "ident",                                                       │
│       details: peg$r0.toString(),                                          │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│     });                                                                    │
│   }                                                                        │
│   if (s3 !== peg$FAILED) {                                                 │
│     s4 = [];                                                               │
│     s5 = input.charAt(peg$currPos);                                        │
│     if (peg$r1.test(s5)) {                                                 │
│       peg$currPos++;                                                       │
│       peg$tracer.trace({                                                   │
│         type: "class.match",                                               │
│         rule: "ident",                                                     │
│         result: input.charAt(peg$currPos-1),                               │
│         details: peg$r1.toString(),                                        │
│         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│       });                                                                  │
│     } else {                                                               │
│       s5 = peg$FAILED;                                                     │
│       if (peg$silentFails === 0) { peg$fail(peg$e9); }                     │
│       peg$tracer.trace({                                                   │
│         type: "class.fail",                                                │
│         rule: "ident",                                                     │
│         details: peg$r1.toString(),                                        │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│       });                                                                  │
│     }                                                                      │
│     while (s5 !== peg$FAILED) {                                            │
│       s4.push(s5);                                                         │
│       s5 = input.charAt(peg$currPos);                                      │
│       if (peg$r1.test(s5)) {                                               │
│         peg$currPos++;                                                     │
│         peg$tracer.trace({                                                 │
│           type: "class.match",                                             │
│           rule: "ident",                                                   │
│           result: input.charAt(peg$currPos-1),                             │
│           details: peg$r1.toString(),                                      │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
│         });                                                                │
│       } else {                                                             │
│         s5 = peg$FAILED;                                                   │
│         if (peg$silentFails === 0) { peg$fail(peg$e9); }                   │
│         peg$tracer.trace({                                                 │
│           type: "class.fail",                                              │
│           rule: "ident",                                                   │
│           details: peg$r1.toString(),                                      │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│         });                                                                │
│       }                                                                    │
│     }                                                                      │
│     s3 = [s3, s4];                                                         │
│     s2 = s3;                                                               │
│   } else {                                                                 │
│     peg$currPos = s2;                                                      │
│     s2 = peg$FAILED;                                                       │
│   }                                                                        │
│   if (s2 !== peg$FAILED) {                                                 │
│     s1 = input.substring(s1, peg$currPos);                                 │
│   } else {                                                                 │
│     s1 = s2;                                                               │
│   }                                                                        │
│                                                                            │
│   if (s1 !== peg$FAILED) {                                                 │
│     peg$savedPos = s0;                                                     │
│     s1 = peg$f9(s1);                                                       │
│   }                                                                        │
│   s0 = s1;                                                                 │
│                                                                            │
│                                                                            │
│   if (s0 !== peg$FAILED) {                                                 │
│     peg$tracer.trace({                                                     │
│       type: "rule.match",                                                  │
│       rule: "ident",                                                       │
│       result: s0,                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),          │
│     });                                                                    │
│   } else {                                                                 │
│     peg$tracer.trace({                                                     │
│       type: "rule.fail",                                                   │
│       rule: "ident",                                                       │
│       location: peg$computeLocation(startPos, startPos, true),             │
│     });                                                                    │
│   }                                                                        │
│                                                                            │
│   return s0;                                                               │
│ }                                                                          │
└────────────────────────────────────────────────────────────────────────────┘
========================================
RULE: string
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[ 7]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c16;                            │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ────────────────────┐
    │ s1 = peg$FAILED;                                  │
    │ if (peg$silentFails === 0) { peg$fail(peg$e10); } │
    └───────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 34) {                        │
  │   s1 = peg$c16;                                                    │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "string",                                                │
  │     result: "\"",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e10); }                │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "string",                                                │
  │     details: "\"",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[16]: 15 IF_NOT_ERROR
    OP[ 8]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s2 = [];                                 │
    │                                          │
    └──────────────────────────────────────────┘
    OP[11]: 20 MATCH_CHAR_CLASS
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ────────────────────┐
      │ s3 = peg$FAILED;                                  │
      │ if (peg$silentFails === 0) { peg$fail(peg$e11); } │
      └───────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ s3 = input.charAt(peg$currPos);                                      │
    │ if (peg$r2.test(s3)) {                                               │
    │   peg$currPos++;                                                     │
    │   peg$tracer.trace({                                                 │
    │     type: "class.match",                                             │
    │     rule: "string",                                                  │
    │     result: input.charAt(peg$currPos-1),                             │
    │     details: peg$r2.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │   });                                                                │
    │ } else {                                                             │
    │   s3 = peg$FAILED;                                                   │
    │   if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
    │   peg$tracer.trace({                                                 │
    │     type: "class.fail",                                              │
    │     rule: "string",                                                  │
    │     details: peg$r2.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │   });                                                                │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[20]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s2.push(s3);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s3 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e11); } │
        └───────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s3 = input.charAt(peg$currPos);                                      │
      │ if (peg$r2.test(s3)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "string",                                                  │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r2.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s3 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "string",                                                  │
      │     details: peg$r2.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
    ┌──────────────────────────────  New Code  ──────────────────────────────┐
    │ while (s3 !== peg$FAILED) {                                            │
    │   s2.push(s3);                                                         │
    │   s3 = input.charAt(peg$currPos);                                      │
    │   if (peg$r2.test(s3)) {                                               │
    │     peg$currPos++;                                                     │
    │     peg$tracer.trace({                                                 │
    │       type: "class.match",                                             │
    │       rule: "string",                                                  │
    │       result: input.charAt(peg$currPos-1),                             │
    │       details: peg$r2.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │     });                                                                │
    │   } else {                                                             │
    │     s3 = peg$FAILED;                                                   │
    │     if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
    │     peg$tracer.trace({                                                 │
    │       type: "class.fail",                                              │
    │       rule: "string",                                                  │
    │       details: peg$r2.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │     });                                                                │
    │   }                                                                    │
    │                                                                        │
    │ }                                                                      │
    └────────────────────────────────────────────────────────────────────────┘
    OP[34]:  6 POP
    OP[41]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s3 = peg$c16;                            │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ────────────────────┐
      │ s3 = peg$FAILED;                                  │
      │ if (peg$silentFails === 0) { peg$fail(peg$e10); } │
      └───────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 34) {                        │
    │   s3 = peg$c16;                                                    │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "string",                                                │
    │     result: "\"",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s3 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e10); }                │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "string",                                                │
    │     details: "\"",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[50]: 15 IF_NOT_ERROR
      OP[ 0]: 24 LOAD_SAVED_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$savedPos = s0;                       │
      └──────────────────────────────────────────┘
      OP[ 2]: 26 CALL
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$f10(s2);                        │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s0;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s0 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s3 !== peg$FAILED) {                 │
    │   peg$savedPos = s0;                     │
    │   s0 = peg$f10(s2);                      │
    │ } else {                                 │
    │   peg$currPos = s0;                      │
    │   s0 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 2]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────────────────────  New Code  ───────────────────────────────┐
  │ if (s1 !== peg$FAILED) {                                                 │
  │   s2 = [];                                                               │
  │   s3 = input.charAt(peg$currPos);                                        │
  │   if (peg$r2.test(s3)) {                                                 │
  │     peg$currPos++;                                                       │
  │     peg$tracer.trace({                                                   │
  │       type: "class.match",                                               │
  │       rule: "string",                                                    │
  │       result: input.charAt(peg$currPos-1),                               │
  │       details: peg$r2.toString(),                                        │
  │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │     });                                                                  │
  │   } else {                                                               │
  │     s3 = peg$FAILED;                                                     │
  │     if (peg$silentFails === 0) { peg$fail(peg$e11); }                    │
  │     peg$tracer.trace({                                                   │
  │       type: "class.fail",                                                │
  │       rule: "string",                                                    │
  │       details: peg$r2.toString(),                                        │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │     });                                                                  │
  │   }                                                                      │
  │   while (s3 !== peg$FAILED) {                                            │
  │     s2.push(s3);                                                         │
  │     s3 = input.charAt(peg$currPos);                                      │
  │     if (peg$r2.test(s3)) {                                               │
  │       peg$currPos++;                                                     │
  │       peg$tracer.trace({                                                 │
  │         type: "class.match",                                             │
  │         rule: "string",                                                  │
  │         result: input.charAt(peg$currPos-1),                             │
  │         details: peg$r2.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │       });                                                                │
  │     } else {                                                             │
  │       s3 = peg$FAILED;                                                   │
  │       if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
  │       peg$tracer.trace({                                                 │
  │         type: "class.fail",                                              │
  │         rule: "string",                                                  │
  │         details: peg$r2.toString(),                                      │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │       });                                                                │
  │     }                                                                    │
  │   }                                                                      │
  │                                                                          │
  │   if (input.charCodeAt(peg$currPos) === 34) {                            │
  │     s3 = peg$c16;                                                        │
  │     peg$currPos++;                                                       │
  │     peg$tracer.trace({                                                   │
  │       type: "string.match",                                              │
  │       rule: "string",                                                    │
  │       result: "\"",                                                      │
  │       location: peg$computeLocation(startPos, peg$currPos, true),        │
  │     });                                                                  │
  │   } else {                                                               │
  │     s3 = peg$FAILED;                                                     │
  │     if (peg$silentFails === 0) { peg$fail(peg$e10); }                    │
  │     peg$tracer.trace({                                                   │
  │       type: "string.fail",                                               │
  │       rule: "string",                                                    │
  │       details: "\"",                                                     │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │     });                                                                  │
  │   }                                                                      │
  │                                                                          │
  │   if (s3 !== peg$FAILED) {                                               │
  │     peg$savedPos = s0;                                                   │
  │     s0 = peg$f10(s2);                                                    │
  │   } else {                                                               │
  │     peg$currPos = s0;                                                    │
  │     s0 = peg$FAILED;                                                     │
  │   }                                                                      │
  │ } else {                                                                 │
  │   peg$currPos = s0;                                                      │
  │   s0 = peg$FAILED;                                                       │
  │ }                                                                        │
  └──────────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────  string CODE  ───────────────────────────────┐
│ function peg$parse_string() {                                              │
│                                                                            │
│   var startPos = peg$currPos;                                              │
│   var s0, s1, s2, s3;                                                      │
│                                                                            │
│   peg$tracer.trace({                                                       │
│     type: "rule.enter",                                                    │
│     rule: "string",                                                        │
│     location: peg$computeLocation(startPos, startPos, true),               │
│   });                                                                      │
│                                                                            │
│   s0 = peg$currPos;                                                        │
│   if (input.charCodeAt(peg$currPos) === 34) {                              │
│     s1 = peg$c16;                                                          │
│     peg$currPos++;                                                         │
│     peg$tracer.trace({                                                     │
│       type: "string.match",                                                │
│       rule: "string",                                                      │
│       result: "\"",                                                        │
│       location: peg$computeLocation(startPos, peg$currPos, true),          │
│     });                                                                    │
│   } else {                                                                 │
│     s1 = peg$FAILED;                                                       │
│     if (peg$silentFails === 0) { peg$fail(peg$e10); }                      │
│     peg$tracer.trace({                                                     │
│       type: "string.fail",                                                 │
│       rule: "string",                                                      │
│       details: "\"",                                                       │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│     });                                                                    │
│   }                                                                        │
│   if (s1 !== peg$FAILED) {                                                 │
│     s2 = [];                                                               │
│     s3 = input.charAt(peg$currPos);                                        │
│     if (peg$r2.test(s3)) {                                                 │
│       peg$currPos++;                                                       │
│       peg$tracer.trace({                                                   │
│         type: "class.match",                                               │
│         rule: "string",                                                    │
│         result: input.charAt(peg$currPos-1),                               │
│         details: peg$r2.toString(),                                        │
│         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│       });                                                                  │
│     } else {                                                               │
│       s3 = peg$FAILED;                                                     │
│       if (peg$silentFails === 0) { peg$fail(peg$e11); }                    │
│       peg$tracer.trace({                                                   │
│         type: "class.fail",                                                │
│         rule: "string",                                                    │
│         details: peg$r2.toString(),                                        │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│       });                                                                  │
│     }                                                                      │
│     while (s3 !== peg$FAILED) {                                            │
│       s2.push(s3);                                                         │
│       s3 = input.charAt(peg$currPos);                                      │
│       if (peg$r2.test(s3)) {                                               │
│         peg$currPos++;                                                     │
│         peg$tracer.trace({                                                 │
│           type: "class.match",                                             │
│           rule: "string",                                                  │
│           result: input.charAt(peg$currPos-1),                             │
│           details: peg$r2.toString(),                                      │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
│         });                                                                │
│       } else {                                                             │
│         s3 = peg$FAILED;                                                   │
│         if (peg$silentFails === 0) { peg$fail(peg$e11); }                  │
│         peg$tracer.trace({                                                 │
│           type: "class.fail",                                              │
│           rule: "string",                                                  │
│           details: peg$r2.toString(),                                      │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│         });                                                                │
│       }                                                                    │
│     }                                                                      │
│     if (input.charCodeAt(peg$currPos) === 34) {                            │
│       s3 = peg$c16;                                                        │
│       peg$currPos++;                                                       │
│       peg$tracer.trace({                                                   │
│         type: "string.match",                                              │
│         rule: "string",                                                    │
│         result: "\"",                                                      │
│         location: peg$computeLocation(startPos, peg$currPos, true),        │
│       });                                                                  │
│     } else {                                                               │
│       s3 = peg$FAILED;                                                     │
│       if (peg$silentFails === 0) { peg$fail(peg$e10); }                    │
│       peg$tracer.trace({                                                   │
│         type: "string.fail",                                               │
│         rule: "string",                                                    │
│         details: "\"",                                                     │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│       });                                                                  │
│     }                                                                      │
│     if (s3 !== peg$FAILED) {                                               │
│       peg$savedPos = s0;                                                   │
│       s0 = peg$f10(s2);                                                    │
│     } else {                                                               │
│       peg$currPos = s0;                                                    │
│       s0 = peg$FAILED;                                                     │
│     }                                                                      │
│   } else {                                                                 │
│     peg$currPos = s0;                                                      │
│     s0 = peg$FAILED;                                                       │
│   }                                                                        │
│                                                                            │
│                                                                            │
│   if (s0 !== peg$FAILED) {                                                 │
│     peg$tracer.trace({                                                     │
│       type: "rule.match",                                                  │
│       rule: "string",                                                      │
│       result: s0,                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),          │
│     });                                                                    │
│   } else {                                                                 │
│     peg$tracer.trace({                                                     │
│       type: "rule.fail",                                                   │
│       rule: "string",                                                      │
│       location: peg$computeLocation(startPos, startPos, true),             │
│     });                                                                    │
│   }                                                                        │
│                                                                            │
│   return s0;                                                               │
│ }                                                                          │
└────────────────────────────────────────────────────────────────────────────┘
========================================
RULE: _
========================================
  OP[ 2]:  4 PUSH_EMPTY_ARRAY
  ┌───────────────  New Code  ───────────────┐
  │ s0 = [];                                 │
  └──────────────────────────────────────────┘
  OP[ 5]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$c18;                            │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ────────────────────┐
    │ s1 = peg$FAILED;                                  │
    │ if (peg$silentFails === 0) { peg$fail(peg$e12); } │
    └───────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 32) {                        │
  │   s1 = peg$c18;                                                    │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "_",                                                     │
  │     result: " ",                                                   │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s1 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e12); }                │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "_",                                                     │
  │     details: " ",                                                  │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[14]: 16 WHILE_NOT_ERROR
    OP[ 0]: 10 APPEND
    ┌───────────────  New Code  ───────────────┐
    │ s0.push(s1);                             │
    └──────────────────────────────────────────┘
    OP[ 3]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s1 = peg$c18;                            │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ────────────────────┐
      │ s1 = peg$FAILED;                                  │
      │ if (peg$silentFails === 0) { peg$fail(peg$e12); } │
      └───────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 32) {                        │
    │   s1 = peg$c18;                                                    │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "_",                                                     │
    │     result: " ",                                                   │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s1 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e12); }                │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "_",                                                     │
    │     details: " ",                                                  │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
  ┌─────────────────────────────  New Code  ─────────────────────────────┐
  │ while (s1 !== peg$FAILED) {                                          │
  │   s0.push(s1);                                                       │
  │   if (input.charCodeAt(peg$currPos) === 32) {                        │
  │     s1 = peg$c18;                                                    │
  │     peg$currPos++;                                                   │
  │     peg$tracer.trace({                                               │
  │       type: "string.match",                                          │
  │       rule: "_",                                                     │
  │       result: " ",                                                   │
  │       location: peg$computeLocation(startPos, peg$currPos, true),    │
  │     });                                                              │
  │   } else {                                                           │
  │     s1 = peg$FAILED;                                                 │
  │     if (peg$silentFails === 0) { peg$fail(peg$e12); }                │
  │     peg$tracer.trace({                                               │
  │       type: "string.fail",                                           │
  │       rule: "_",                                                     │
  │       details: " ",                                                  │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │     });                                                              │
  │   }                                                                  │
  │                                                                      │
  │ }                                                                    │
  └──────────────────────────────────────────────────────────────────────┘
  OP[28]:  6 POP

┌───────────────────────────────    CODE  ───────────────────────────────┐
│ function peg$parse__() {                                               │
│                                                                        │
│   var startPos = peg$currPos;                                          │
│   var s0, s1;                                                          │
│                                                                        │
│   peg$tracer.trace({                                                   │
│     type: "rule.enter",                                                │
│     rule: "_",                                                         │
│     location: peg$computeLocation(startPos, startPos, true),           │
│   });                                                                  │
│                                                                        │
│   s0 = [];                                                             │
│   if (input.charCodeAt(peg$currPos) === 32) {                          │
│     s1 = peg$c18;                                                      │
│     peg$currPos++;                                                     │
│     peg$tracer.trace({                                                 │
│       type: "string.match",                                            │
│       rule: "_",                                                       │
│       result: " ",                                                     │
│       location: peg$computeLocation(startPos, peg$currPos, true),      │
│     });                                                                │
│   } else {                                                             │
│     s1 = peg$FAILED;                                                   │
│     if (peg$silentFails === 0) { peg$fail(peg$e12); }                  │
│     peg$tracer.trace({                                                 │
│       type: "string.fail",                                             │
│       rule: "_",                                                       │
│       details: " ",                                                    │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│     });                                                                │
│   }                                                                    │
│                                                                        │
│   while (s1 !== peg$FAILED) {                                          │
│     s0.push(s1);                                                       │
│     if (input.charCodeAt(peg$currPos) === 32) {                        │
│       s1 = peg$c18;                                                    │
│       peg$currPos++;                                                   │
│       peg$tracer.trace({                                               │
│         type: "string.match",                                          │
│         rule: "_",                                                     │
│         result: " ",                                                   │
│         location: peg$computeLocation(startPos, peg$currPos, true),    │
│       });                                                              │
│     } else {                                                           │
│       s1 = peg$FAILED;                                                 │
│       if (peg$silentFails === 0) { peg$fail(peg$e12); }                │
│       peg$tracer.trace({                                               │
│         type: "string.fail",                                           │
│         rule: "_",                                                     │
│         details: " ",                                                  │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true), │
│       });                                                              │
│     }                                                                  │
│   }                                                                    │
│                                                                        │
│                                                                        │
│   if (s0 !== peg$FAILED) {                                             │
│     peg$tracer.trace({                                                 │
│       type: "rule.match",                                              │
│       rule: "_",                                                       │
│       result: s0,                                                      │
│       location: peg$computeLocation(startPos, peg$currPos, true),      │
│     });                                                                │
│   } else {                                                             │
│     peg$tracer.trace({                                                 │
│       type: "rule.fail",                                               │
│       rule: "_",                                                       │
│       location: peg$computeLocation(startPos, startPos, true),         │
│     });                                                                │
│   }                                                                    │
│                                                                        │
│   return s0;                                                           │
│ }                                                                      │
└────────────────────────────────────────────────────────────────────────┘
========================================
RULE: SEP
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f11(s1);                        │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f12(s1);                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f12(s1);                      │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌───────────────────────────  SEP CODE  ────────────────────────────┐
│ function peg$parse_SEP() {                                        │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "SEP",                                                  │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f11(s1);                                               │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f12(s1);                                             │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "SEP",                                                │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "SEP",                                                │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: INDENT
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f13(s1);                        │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f14(s1);                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f14(s1);                      │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  INDENT CODE  ──────────────────────────┐
│ function peg$parse_INDENT() {                                     │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "INDENT",                                               │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f13(s1);                                               │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f14(s1);                                             │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "INDENT",                                             │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "INDENT",                                             │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: EXTEND
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f15(s1);                        │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f16(s1);                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f16(s1);                      │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  EXTEND CODE  ──────────────────────────┐
│ function peg$parse_EXTEND() {                                     │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "EXTEND",                                               │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f15(s1);                                               │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f16(s1);                                             │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "EXTEND",                                             │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "EXTEND",                                             │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: UNDENT
========================================
  OP[ 4]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[13]: 27 RULE
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$parse_INDENTATION();            │
  │                                          │
  └──────────────────────────────────────────┘
  OP[21]: 25 UPDATE_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = peg$currPos;              │
  └──────────────────────────────────────────┘
  OP[22]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s2 = peg$f17(s1);                        │
  └──────────────────────────────────────────┘
  OP[27]: 13 IF
    OP[ 0]:  6 POP
    OP[ 1]:  1 PUSH_UNDEFINED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = undefined;                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  6 POP
    OP[ 1]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2) {                                │
  │   s2 = undefined;                        │
  │ } else {                                 │
  │   s2 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[35]: 15 IF_NOT_ERROR
    OP[ 0]: 24 LOAD_SAVED_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$savedPos = s0;                       │
    └──────────────────────────────────────────┘
    OP[ 2]: 26 CALL
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$f18(s1);                        │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s0;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s0 = peg$FAILED;                         │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 !== peg$FAILED) {                 │
  │   peg$savedPos = s0;                     │
  │   s0 = peg$f18(s1);                      │
  │ } else {                                 │
  │   peg$currPos = s0;                      │
  │   s0 = peg$FAILED;                       │
  │ }                                        │
  └──────────────────────────────────────────┘

┌──────────────────────────  UNDENT CODE  ──────────────────────────┐
│ function peg$parse_UNDENT() {                                     │
│                                                                   │
│   var startPos = peg$currPos;                                     │
│   var s0, s1, s2;                                                 │
│                                                                   │
│   peg$tracer.trace({                                              │
│     type: "rule.enter",                                           │
│     rule: "UNDENT",                                               │
│     location: peg$computeLocation(startPos, startPos, true),      │
│   });                                                             │
│                                                                   │
│   s0 = peg$currPos;                                               │
│   s1 = peg$parse_INDENTATION();                                   │
│   peg$savedPos = peg$currPos;                                     │
│   s2 = peg$f17(s1);                                               │
│   if (s2) {                                                       │
│     s2 = undefined;                                               │
│   } else {                                                        │
│     s2 = peg$FAILED;                                              │
│   }                                                               │
│   if (s2 !== peg$FAILED) {                                        │
│     peg$savedPos = s0;                                            │
│     s0 = peg$f18(s1);                                             │
│   } else {                                                        │
│     peg$currPos = s0;                                             │
│     s0 = peg$FAILED;                                              │
│   }                                                               │
│                                                                   │
│                                                                   │
│   if (s0 !== peg$FAILED) {                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.match",                                         │
│       rule: "UNDENT",                                             │
│       result: s0,                                                 │
│       location: peg$computeLocation(startPos, peg$currPos, true), │
│     });                                                           │
│   } else {                                                        │
│     peg$tracer.trace({                                            │
│       type: "rule.fail",                                          │
│       rule: "UNDENT",                                             │
│       location: peg$computeLocation(startPos, startPos, true),    │
│     });                                                           │
│   }                                                               │
│                                                                   │
│   return s0;                                                      │
│ }                                                                 │
└───────────────────────────────────────────────────────────────────┘
========================================
RULE: INDENTATION
========================================
  OP[ 2]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s0 = peg$currPos;                        │
  └──────────────────────────────────────────┘
  OP[15]:  5 PUSH_CURR_POS
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$currPos;                        │
  │                                          │
  └──────────────────────────────────────────┘
  OP[20]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s2 = peg$c20;                            │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ────────────────────┐
    │ s2 = peg$FAILED;                                  │
    │ if (peg$silentFails === 0) { peg$fail(peg$e13); } │
    └───────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 13) {                        │
  │   s2 = peg$c20;                                                    │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "INDENTATION",                                           │
  │     result: "\r",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s2 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e13); }                │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "INDENTATION",                                           │
  │     details: "\r",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[29]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 1]:  2 PUSH_NULL
    ┌───────────────  New Code  ───────────────┐
    │ s2 = null;                               │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s2 === peg$FAILED) {                 │
  │   s2 = null;                             │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[37]: 18 MATCH_STRING
    OP[ 0]: 22 ACCEPT_STRING
    ┌───────────────  New Code  ───────────────┐
    │ s3 = peg$c1;                             │
    │ peg$currPos++;                           │
    └──────────────────────────────────────────┘
    OP[ 0]: 23 FAIL
    ┌───────────────────  New Code  ───────────────────┐
    │ s3 = peg$FAILED;                                 │
    │ if (peg$silentFails === 0) { peg$fail(peg$e0); } │
    └──────────────────────────────────────────────────┘
  ┌────────────────────────────  New Code  ────────────────────────────┐
  │ if (input.charCodeAt(peg$currPos) === 10) {                        │
  │   s3 = peg$c1;                                                     │
  │   peg$currPos++;                                                   │
  │   peg$tracer.trace({                                               │
  │     type: "string.match",                                          │
  │     rule: "INDENTATION",                                           │
  │     result: "\n",                                                  │
  │     location: peg$computeLocation(startPos, peg$currPos, true),    │
  │   });                                                              │
  │ } else {                                                           │
  │   s3 = peg$FAILED;                                                 │
  │   if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
  │   peg$tracer.trace({                                               │
  │     type: "string.fail",                                           │
  │     rule: "INDENTATION",                                           │
  │     details: "\n",                                                 │
  │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
  │   });                                                              │
  │ }                                                                  │
  └────────────────────────────────────────────────────────────────────┘
  OP[46]: 15 IF_NOT_ERROR
    OP[ 2]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s4 = [];                                 │
    └──────────────────────────────────────────┘
    OP[ 7]:  5 PUSH_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ s5 = peg$currPos;                        │
    └──────────────────────────────────────────┘
    OP[10]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s6 = [];                                 │
    └──────────────────────────────────────────┘
    OP[13]: 20 MATCH_CHAR_CLASS
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ────────────────────┐
      │ s7 = peg$FAILED;                                  │
      │ if (peg$silentFails === 0) { peg$fail(peg$e14); } │
      └───────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ s7 = input.charAt(peg$currPos);                                      │
    │ if (peg$r3.test(s7)) {                                               │
    │   peg$currPos++;                                                     │
    │   peg$tracer.trace({                                                 │
    │     type: "class.match",                                             │
    │     rule: "INDENTATION",                                             │
    │     result: input.charAt(peg$currPos-1),                             │
    │     details: peg$r3.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │   });                                                                │
    │ } else {                                                             │
    │   s7 = peg$FAILED;                                                   │
    │   if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
    │   peg$tracer.trace({                                                 │
    │     type: "class.fail",                                              │
    │     rule: "INDENTATION",                                             │
    │     details: peg$r3.toString(),                                      │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │   });                                                                │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[22]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s6.push(s7);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s7 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e14); } │
        └───────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s7 = input.charAt(peg$currPos);                                      │
      │ if (peg$r3.test(s7)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "INDENTATION",                                             │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r3.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s7 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "INDENTATION",                                             │
      │     details: peg$r3.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
    ┌──────────────────────────────  New Code  ──────────────────────────────┐
    │ while (s7 !== peg$FAILED) {                                            │
    │   s6.push(s7);                                                         │
    │   s7 = input.charAt(peg$currPos);                                      │
    │   if (peg$r3.test(s7)) {                                               │
    │     peg$currPos++;                                                     │
    │     peg$tracer.trace({                                                 │
    │       type: "class.match",                                             │
    │       rule: "INDENTATION",                                             │
    │       result: input.charAt(peg$currPos-1),                             │
    │       details: peg$r3.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │     });                                                                │
    │   } else {                                                             │
    │     s7 = peg$FAILED;                                                   │
    │     if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
    │     peg$tracer.trace({                                                 │
    │       type: "class.fail",                                              │
    │       rule: "INDENTATION",                                             │
    │       details: peg$r3.toString(),                                      │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │     });                                                                │
    │   }                                                                    │
    │                                                                        │
    │ }                                                                      │
    └────────────────────────────────────────────────────────────────────────┘
    OP[36]:  6 POP
    OP[40]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s7 = peg$c1;                             │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ───────────────────┐
      │ s7 = peg$FAILED;                                 │
      │ if (peg$silentFails === 0) { peg$fail(peg$e0); } │
      └──────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 10) {                        │
    │   s7 = peg$c1;                                                     │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "INDENTATION",                                           │
    │     result: "\n",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s7 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "INDENTATION",                                           │
    │     details: "\n",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[49]: 15 IF_NOT_ERROR
      OP[ 0]: 11 WRAP
      ┌───────────────  New Code  ───────────────┐
      │ s6 = [s6, s7];                           │
      └──────────────────────────────────────────┘
      OP[ 2]:  9 NIP
      ┌───────────────  New Code  ───────────────┐
      │ s5 = s6;                                 │
      └──────────────────────────────────────────┘
      OP[ 0]:  8 POP_N
      OP[ 2]:  7 POP_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ peg$currPos = s5;                        │
      └──────────────────────────────────────────┘
      OP[ 3]:  3 PUSH_FAILED
      ┌───────────────  New Code  ───────────────┐
      │ s5 = peg$FAILED;                         │
      └──────────────────────────────────────────┘
    ┌───────────────  New Code  ───────────────┐
    │ if (s7 !== peg$FAILED) {                 │
    │   s6 = [s6, s7];                         │
    │   s5 = s6;                               │
    │ } else {                                 │
    │   peg$currPos = s5;                      │
    │   s5 = peg$FAILED;                       │
    │ }                                        │
    └──────────────────────────────────────────┘
    OP[61]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s4.push(s5);                             │
      └──────────────────────────────────────────┘
      OP[ 5]:  5 PUSH_CURR_POS
      ┌───────────────  New Code  ───────────────┐
      │ s5 = peg$currPos;                        │
      └──────────────────────────────────────────┘
      OP[ 8]:  4 PUSH_EMPTY_ARRAY
      ┌───────────────  New Code  ───────────────┐
      │ s6 = [];                                 │
      └──────────────────────────────────────────┘
      OP[11]: 20 MATCH_CHAR_CLASS
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s7 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e14); } │
        └───────────────────────────────────────────────────┘
      ┌─────────────────────────────  New Code  ─────────────────────────────┐
      │ s7 = input.charAt(peg$currPos);                                      │
      │ if (peg$r3.test(s7)) {                                               │
      │   peg$currPos++;                                                     │
      │   peg$tracer.trace({                                                 │
      │     type: "class.match",                                             │
      │     rule: "INDENTATION",                                             │
      │     result: input.charAt(peg$currPos-1),                             │
      │     details: peg$r3.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │   });                                                                │
      │ } else {                                                             │
      │   s7 = peg$FAILED;                                                   │
      │   if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
      │   peg$tracer.trace({                                                 │
      │     type: "class.fail",                                              │
      │     rule: "INDENTATION",                                             │
      │     details: peg$r3.toString(),                                      │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │   });                                                                │
      │ }                                                                    │
      └──────────────────────────────────────────────────────────────────────┘
      OP[20]: 16 WHILE_NOT_ERROR
        OP[ 0]: 10 APPEND
        ┌───────────────  New Code  ───────────────┐
        │ s6.push(s7);                             │
        └──────────────────────────────────────────┘
        OP[ 3]: 20 MATCH_CHAR_CLASS
          OP[ 0]: 23 FAIL
          ┌───────────────────  New Code  ────────────────────┐
          │ s7 = peg$FAILED;                                  │
          │ if (peg$silentFails === 0) { peg$fail(peg$e14); } │
          └───────────────────────────────────────────────────┘
        ┌─────────────────────────────  New Code  ─────────────────────────────┐
        │ s7 = input.charAt(peg$currPos);                                      │
        │ if (peg$r3.test(s7)) {                                               │
        │   peg$currPos++;                                                     │
        │   peg$tracer.trace({                                                 │
        │     type: "class.match",                                             │
        │     rule: "INDENTATION",                                             │
        │     result: input.charAt(peg$currPos-1),                             │
        │     details: peg$r3.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
        │   });                                                                │
        │ } else {                                                             │
        │   s7 = peg$FAILED;                                                   │
        │   if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
        │   peg$tracer.trace({                                                 │
        │     type: "class.fail",                                              │
        │     rule: "INDENTATION",                                             │
        │     details: peg$r3.toString(),                                      │
        │     location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
        │   });                                                                │
        │ }                                                                    │
        └──────────────────────────────────────────────────────────────────────┘
      ┌──────────────────────────────  New Code  ──────────────────────────────┐
      │ while (s7 !== peg$FAILED) {                                            │
      │   s6.push(s7);                                                         │
      │   s7 = input.charAt(peg$currPos);                                      │
      │   if (peg$r3.test(s7)) {                                               │
      │     peg$currPos++;                                                     │
      │     peg$tracer.trace({                                                 │
      │       type: "class.match",                                             │
      │       rule: "INDENTATION",                                             │
      │       result: input.charAt(peg$currPos-1),                             │
      │       details: peg$r3.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
      │     });                                                                │
      │   } else {                                                             │
      │     s7 = peg$FAILED;                                                   │
      │     if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
      │     peg$tracer.trace({                                                 │
      │       type: "class.fail",                                              │
      │       rule: "INDENTATION",                                             │
      │       details: peg$r3.toString(),                                      │
      │       location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
      │     });                                                                │
      │   }                                                                    │
      │                                                                        │
      │ }                                                                      │
      └────────────────────────────────────────────────────────────────────────┘
      OP[34]:  6 POP
      OP[38]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s7 = peg$c1;                             │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ───────────────────┐
        │ s7 = peg$FAILED;                                 │
        │ if (peg$silentFails === 0) { peg$fail(peg$e0); } │
        └──────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 10) {                        │
      │   s7 = peg$c1;                                                     │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "INDENTATION",                                           │
      │     result: "\n",                                                  │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s7 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e0); }                 │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "INDENTATION",                                           │
      │     details: "\n",                                                 │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
      OP[47]: 15 IF_NOT_ERROR
        OP[ 0]: 11 WRAP
        ┌───────────────  New Code  ───────────────┐
        │ s6 = [s6, s7];                           │
        └──────────────────────────────────────────┘
        OP[ 2]:  9 NIP
        ┌───────────────  New Code  ───────────────┐
        │ s5 = s6;                                 │
        └──────────────────────────────────────────┘
        OP[ 0]:  8 POP_N
        OP[ 2]:  7 POP_CURR_POS
        ┌───────────────  New Code  ───────────────┐
        │ peg$currPos = s5;                        │
        └──────────────────────────────────────────┘
        OP[ 3]:  3 PUSH_FAILED
        ┌───────────────  New Code  ───────────────┐
        │ s5 = peg$FAILED;                         │
        └──────────────────────────────────────────┘
      ┌───────────────  New Code  ───────────────┐
      │ if (s7 !== peg$FAILED) {                 │
      │   s6 = [s6, s7];                         │
      │   s5 = s6;                               │
      │ } else {                                 │
      │   peg$currPos = s5;                      │
      │   s5 = peg$FAILED;                       │
      │ }                                        │
      └──────────────────────────────────────────┘
    ┌───────────────────────────────  New Code  ───────────────────────────────┐
    │ while (s5 !== peg$FAILED) {                                              │
    │   s4.push(s5);                                                           │
    │   s5 = peg$currPos;                                                      │
    │   s6 = [];                                                               │
    │   s7 = input.charAt(peg$currPos);                                        │
    │   if (peg$r3.test(s7)) {                                                 │
    │     peg$currPos++;                                                       │
    │     peg$tracer.trace({                                                   │
    │       type: "class.match",                                               │
    │       rule: "INDENTATION",                                               │
    │       result: input.charAt(peg$currPos-1),                               │
    │       details: peg$r3.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
    │     });                                                                  │
    │   } else {                                                               │
    │     s7 = peg$FAILED;                                                     │
    │     if (peg$silentFails === 0) { peg$fail(peg$e14); }                    │
    │     peg$tracer.trace({                                                   │
    │       type: "class.fail",                                                │
    │       rule: "INDENTATION",                                               │
    │       details: peg$r3.toString(),                                        │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
    │     });                                                                  │
    │   }                                                                      │
    │   while (s7 !== peg$FAILED) {                                            │
    │     s6.push(s7);                                                         │
    │     s7 = input.charAt(peg$currPos);                                      │
    │     if (peg$r3.test(s7)) {                                               │
    │       peg$currPos++;                                                     │
    │       peg$tracer.trace({                                                 │
    │         type: "class.match",                                             │
    │         rule: "INDENTATION",                                             │
    │         result: input.charAt(peg$currPos-1),                             │
    │         details: peg$r3.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
    │       });                                                                │
    │     } else {                                                             │
    │       s7 = peg$FAILED;                                                   │
    │       if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
    │       peg$tracer.trace({                                                 │
    │         type: "class.fail",                                              │
    │         rule: "INDENTATION",                                             │
    │         details: peg$r3.toString(),                                      │
    │         location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
    │       });                                                                │
    │     }                                                                    │
    │   }                                                                      │
    │   if (input.charCodeAt(peg$currPos) === 10) {                            │
    │     s7 = peg$c1;                                                         │
    │     peg$currPos++;                                                       │
    │     peg$tracer.trace({                                                   │
    │       type: "string.match",                                              │
    │       rule: "INDENTATION",                                               │
    │       result: "\n",                                                      │
    │       location: peg$computeLocation(startPos, peg$currPos, true),        │
    │     });                                                                  │
    │   } else {                                                               │
    │     s7 = peg$FAILED;                                                     │
    │     if (peg$silentFails === 0) { peg$fail(peg$e0); }                     │
    │     peg$tracer.trace({                                                   │
    │       type: "string.fail",                                               │
    │       rule: "INDENTATION",                                               │
    │       details: "\n",                                                     │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
    │     });                                                                  │
    │   }                                                                      │
    │   if (s7 !== peg$FAILED) {                                               │
    │     s6 = [s6, s7];                                                       │
    │     s5 = s6;                                                             │
    │   } else {                                                               │
    │     peg$currPos = s5;                                                    │
    │     s5 = peg$FAILED;                                                     │
    │   }                                                                      │
    │                                                                          │
    │ }                                                                        │
    └──────────────────────────────────────────────────────────────────────────┘
    OP[122]:  6 POP
    OP[128]:  4 PUSH_EMPTY_ARRAY
    ┌───────────────  New Code  ───────────────┐
    │ s5 = [];                                 │
    └──────────────────────────────────────────┘
    OP[131]: 18 MATCH_STRING
      OP[ 0]: 22 ACCEPT_STRING
      ┌───────────────  New Code  ───────────────┐
      │ s6 = peg$c21;                            │
      │ peg$currPos++;                           │
      └──────────────────────────────────────────┘
      OP[ 0]: 23 FAIL
      ┌───────────────────  New Code  ────────────────────┐
      │ s6 = peg$FAILED;                                  │
      │ if (peg$silentFails === 0) { peg$fail(peg$e15); } │
      └───────────────────────────────────────────────────┘
    ┌────────────────────────────  New Code  ────────────────────────────┐
    │ if (input.charCodeAt(peg$currPos) === 9) {                         │
    │   s6 = peg$c21;                                                    │
    │   peg$currPos++;                                                   │
    │   peg$tracer.trace({                                               │
    │     type: "string.match",                                          │
    │     rule: "INDENTATION",                                           │
    │     result: "\t",                                                  │
    │     location: peg$computeLocation(startPos, peg$currPos, true),    │
    │   });                                                              │
    │ } else {                                                           │
    │   s6 = peg$FAILED;                                                 │
    │   if (peg$silentFails === 0) { peg$fail(peg$e15); }                │
    │   peg$tracer.trace({                                               │
    │     type: "string.fail",                                           │
    │     rule: "INDENTATION",                                           │
    │     details: "\t",                                                 │
    │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │   });                                                              │
    │ }                                                                  │
    └────────────────────────────────────────────────────────────────────┘
    OP[140]: 16 WHILE_NOT_ERROR
      OP[ 0]: 10 APPEND
      ┌───────────────  New Code  ───────────────┐
      │ s5.push(s6);                             │
      └──────────────────────────────────────────┘
      OP[ 3]: 18 MATCH_STRING
        OP[ 0]: 22 ACCEPT_STRING
        ┌───────────────  New Code  ───────────────┐
        │ s6 = peg$c21;                            │
        │ peg$currPos++;                           │
        └──────────────────────────────────────────┘
        OP[ 0]: 23 FAIL
        ┌───────────────────  New Code  ────────────────────┐
        │ s6 = peg$FAILED;                                  │
        │ if (peg$silentFails === 0) { peg$fail(peg$e15); } │
        └───────────────────────────────────────────────────┘
      ┌────────────────────────────  New Code  ────────────────────────────┐
      │ if (input.charCodeAt(peg$currPos) === 9) {                         │
      │   s6 = peg$c21;                                                    │
      │   peg$currPos++;                                                   │
      │   peg$tracer.trace({                                               │
      │     type: "string.match",                                          │
      │     rule: "INDENTATION",                                           │
      │     result: "\t",                                                  │
      │     location: peg$computeLocation(startPos, peg$currPos, true),    │
      │   });                                                              │
      │ } else {                                                           │
      │   s6 = peg$FAILED;                                                 │
      │   if (peg$silentFails === 0) { peg$fail(peg$e15); }                │
      │   peg$tracer.trace({                                               │
      │     type: "string.fail",                                           │
      │     rule: "INDENTATION",                                           │
      │     details: "\t",                                                 │
      │     location: peg$computeLocation(peg$currPos, peg$currPos, true), │
      │   });                                                              │
      │ }                                                                  │
      └────────────────────────────────────────────────────────────────────┘
    ┌─────────────────────────────  New Code  ─────────────────────────────┐
    │ while (s6 !== peg$FAILED) {                                          │
    │   s5.push(s6);                                                       │
    │   if (input.charCodeAt(peg$currPos) === 9) {                         │
    │     s6 = peg$c21;                                                    │
    │     peg$currPos++;                                                   │
    │     peg$tracer.trace({                                               │
    │       type: "string.match",                                          │
    │       rule: "INDENTATION",                                           │
    │       result: "\t",                                                  │
    │       location: peg$computeLocation(startPos, peg$currPos, true),    │
    │     });                                                              │
    │   } else {                                                           │
    │     s6 = peg$FAILED;                                                 │
    │     if (peg$silentFails === 0) { peg$fail(peg$e15); }                │
    │     peg$tracer.trace({                                               │
    │       type: "string.fail",                                           │
    │       rule: "INDENTATION",                                           │
    │       details: "\t",                                                 │
    │       location: peg$computeLocation(peg$currPos, peg$currPos, true), │
    │     });                                                              │
    │   }                                                                  │
    │                                                                      │
    │ }                                                                    │
    └──────────────────────────────────────────────────────────────────────┘
    OP[154]:  6 POP
    OP[157]: 36 PLUCK
    ┌───────────────  New Code  ───────────────┐
    │ s1 = s5;                                 │
    │                                          │
    └──────────────────────────────────────────┘
    OP[ 0]:  8 POP_N
    OP[ 2]:  7 POP_CURR_POS
    ┌───────────────  New Code  ───────────────┐
    │ peg$currPos = s1;                        │
    └──────────────────────────────────────────┘
    OP[ 3]:  3 PUSH_FAILED
    ┌───────────────  New Code  ───────────────┐
    │ s1 = peg$FAILED;                         │
    │                                          │
    └──────────────────────────────────────────┘
  ┌────────────────────────────────  New Code  ────────────────────────────────┐
  │ if (s3 !== peg$FAILED) {                                                   │
  │   s4 = [];                                                                 │
  │   s5 = peg$currPos;                                                        │
  │   s6 = [];                                                                 │
  │   s7 = input.charAt(peg$currPos);                                          │
  │   if (peg$r3.test(s7)) {                                                   │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "class.match",                                                 │
  │       rule: "INDENTATION",                                                 │
  │       result: input.charAt(peg$currPos-1),                                 │
  │       details: peg$r3.toString(),                                          │
  │       location: peg$computeLocation(peg$currPos-1, peg$currPos, true),     │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s7 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e14); }                      │
  │     peg$tracer.trace({                                                     │
  │       type: "class.fail",                                                  │
  │       rule: "INDENTATION",                                                 │
  │       details: peg$r3.toString(),                                          │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   while (s7 !== peg$FAILED) {                                              │
  │     s6.push(s7);                                                           │
  │     s7 = input.charAt(peg$currPos);                                        │
  │     if (peg$r3.test(s7)) {                                                 │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "class.match",                                               │
  │         rule: "INDENTATION",                                               │
  │         result: input.charAt(peg$currPos-1),                               │
  │         details: peg$r3.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │       });                                                                  │
  │     } else {                                                               │
  │       s7 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e14); }                    │
  │       peg$tracer.trace({                                                   │
  │         type: "class.fail",                                                │
  │         rule: "INDENTATION",                                               │
  │         details: peg$r3.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │   }                                                                        │
  │   if (input.charCodeAt(peg$currPos) === 10) {                              │
  │     s7 = peg$c1;                                                           │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "string.match",                                                │
  │       rule: "INDENTATION",                                                 │
  │       result: "\n",                                                        │
  │       location: peg$computeLocation(startPos, peg$currPos, true),          │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s7 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e0); }                       │
  │     peg$tracer.trace({                                                     │
  │       type: "string.fail",                                                 │
  │       rule: "INDENTATION",                                                 │
  │       details: "\n",                                                       │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   if (s7 !== peg$FAILED) {                                                 │
  │     s6 = [s6, s7];                                                         │
  │     s5 = s6;                                                               │
  │   } else {                                                                 │
  │     peg$currPos = s5;                                                      │
  │     s5 = peg$FAILED;                                                       │
  │   }                                                                        │
  │                                                                            │
  │   while (s5 !== peg$FAILED) {                                              │
  │     s4.push(s5);                                                           │
  │     s5 = peg$currPos;                                                      │
  │     s6 = [];                                                               │
  │     s7 = input.charAt(peg$currPos);                                        │
  │     if (peg$r3.test(s7)) {                                                 │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "class.match",                                               │
  │         rule: "INDENTATION",                                               │
  │         result: input.charAt(peg$currPos-1),                               │
  │         details: peg$r3.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
  │       });                                                                  │
  │     } else {                                                               │
  │       s7 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e14); }                    │
  │       peg$tracer.trace({                                                   │
  │         type: "class.fail",                                                │
  │         rule: "INDENTATION",                                               │
  │         details: peg$r3.toString(),                                        │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │     while (s7 !== peg$FAILED) {                                            │
  │       s6.push(s7);                                                         │
  │       s7 = input.charAt(peg$currPos);                                      │
  │       if (peg$r3.test(s7)) {                                               │
  │         peg$currPos++;                                                     │
  │         peg$tracer.trace({                                                 │
  │           type: "class.match",                                             │
  │           rule: "INDENTATION",                                             │
  │           result: input.charAt(peg$currPos-1),                             │
  │           details: peg$r3.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
  │         });                                                                │
  │       } else {                                                             │
  │         s7 = peg$FAILED;                                                   │
  │         if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
  │         peg$tracer.trace({                                                 │
  │           type: "class.fail",                                              │
  │           rule: "INDENTATION",                                             │
  │           details: peg$r3.toString(),                                      │
  │           location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
  │         });                                                                │
  │       }                                                                    │
  │     }                                                                      │
  │     if (input.charCodeAt(peg$currPos) === 10) {                            │
  │       s7 = peg$c1;                                                         │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "string.match",                                              │
  │         rule: "INDENTATION",                                               │
  │         result: "\n",                                                      │
  │         location: peg$computeLocation(startPos, peg$currPos, true),        │
  │       });                                                                  │
  │     } else {                                                               │
  │       s7 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e0); }                     │
  │       peg$tracer.trace({                                                   │
  │         type: "string.fail",                                               │
  │         rule: "INDENTATION",                                               │
  │         details: "\n",                                                     │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │     if (s7 !== peg$FAILED) {                                               │
  │       s6 = [s6, s7];                                                       │
  │       s5 = s6;                                                             │
  │     } else {                                                               │
  │       peg$currPos = s5;                                                    │
  │       s5 = peg$FAILED;                                                     │
  │     }                                                                      │
  │   }                                                                        │
  │                                                                            │
  │   s5 = [];                                                                 │
  │   if (input.charCodeAt(peg$currPos) === 9) {                               │
  │     s6 = peg$c21;                                                          │
  │     peg$currPos++;                                                         │
  │     peg$tracer.trace({                                                     │
  │       type: "string.match",                                                │
  │       rule: "INDENTATION",                                                 │
  │       result: "\t",                                                        │
  │       location: peg$computeLocation(startPos, peg$currPos, true),          │
  │     });                                                                    │
  │   } else {                                                                 │
  │     s6 = peg$FAILED;                                                       │
  │     if (peg$silentFails === 0) { peg$fail(peg$e15); }                      │
  │     peg$tracer.trace({                                                     │
  │       type: "string.fail",                                                 │
  │       rule: "INDENTATION",                                                 │
  │       details: "\t",                                                       │
  │       location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
  │     });                                                                    │
  │   }                                                                        │
  │   while (s6 !== peg$FAILED) {                                              │
  │     s5.push(s6);                                                           │
  │     if (input.charCodeAt(peg$currPos) === 9) {                             │
  │       s6 = peg$c21;                                                        │
  │       peg$currPos++;                                                       │
  │       peg$tracer.trace({                                                   │
  │         type: "string.match",                                              │
  │         rule: "INDENTATION",                                               │
  │         result: "\t",                                                      │
  │         location: peg$computeLocation(startPos, peg$currPos, true),        │
  │       });                                                                  │
  │     } else {                                                               │
  │       s6 = peg$FAILED;                                                     │
  │       if (peg$silentFails === 0) { peg$fail(peg$e15); }                    │
  │       peg$tracer.trace({                                                   │
  │         type: "string.fail",                                               │
  │         rule: "INDENTATION",                                               │
  │         details: "\t",                                                     │
  │         location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
  │       });                                                                  │
  │     }                                                                      │
  │   }                                                                        │
  │                                                                            │
  │   s1 = s5;                                                                 │
  │                                                                            │
  │ } else {                                                                   │
  │   peg$currPos = s1;                                                        │
  │   s1 = peg$FAILED;                                                         │
  │                                                                            │
  │ }                                                                          │
  └────────────────────────────────────────────────────────────────────────────┘
  OP[216]: 14 IF_ERROR
    OP[ 0]:  6 POP
    OP[ 1]:  2 PUSH_NULL
    ┌───────────────  New Code  ───────────────┐
    │ s1 = null;                               │
    │                                          │
    └──────────────────────────────────────────┘
  ┌───────────────  New Code  ───────────────┐
  │ if (s1 === peg$FAILED) {                 │
  │   s1 = null;                             │
  │                                          │
  │ }                                        │
  └──────────────────────────────────────────┘
  OP[225]: 24 LOAD_SAVED_POS
  ┌───────────────  New Code  ───────────────┐
  │ peg$savedPos = s0;                       │
  └──────────────────────────────────────────┘
  OP[227]: 26 CALL
  ┌───────────────  New Code  ───────────────┐
  │ s1 = peg$f19(s1);                        │
  └──────────────────────────────────────────┘
  OP[232]:  9 NIP
  ┌───────────────  New Code  ───────────────┐
  │ s0 = s1;                                 │
  └──────────────────────────────────────────┘

┌─────────────────────────────  INDENTATION CODE  ─────────────────────────────┐
│ function peg$parse_INDENTATION() {                                           │
│                                                                              │
│   var startPos = peg$currPos;                                                │
│   var s0, s1, s2, s3, s4, s5, s6, s7;                                        │
│                                                                              │
│   peg$tracer.trace({                                                         │
│     type: "rule.enter",                                                      │
│     rule: "INDENTATION",                                                     │
│     location: peg$computeLocation(startPos, startPos, true),                 │
│   });                                                                        │
│                                                                              │
│   s0 = peg$currPos;                                                          │
│   s1 = peg$currPos;                                                          │
│   if (input.charCodeAt(peg$currPos) === 13) {                                │
│     s2 = peg$c20;                                                            │
│     peg$currPos++;                                                           │
│     peg$tracer.trace({                                                       │
│       type: "string.match",                                                  │
│       rule: "INDENTATION",                                                   │
│       result: "\r",                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     s2 = peg$FAILED;                                                         │
│     if (peg$silentFails === 0) { peg$fail(peg$e13); }                        │
│     peg$tracer.trace({                                                       │
│       type: "string.fail",                                                   │
│       rule: "INDENTATION",                                                   │
│       details: "\r",                                                         │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),         │
│     });                                                                      │
│   }                                                                          │
│   if (s2 === peg$FAILED) {                                                   │
│     s2 = null;                                                               │
│   }                                                                          │
│   if (input.charCodeAt(peg$currPos) === 10) {                                │
│     s3 = peg$c1;                                                             │
│     peg$currPos++;                                                           │
│     peg$tracer.trace({                                                       │
│       type: "string.match",                                                  │
│       rule: "INDENTATION",                                                   │
│       result: "\n",                                                          │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     s3 = peg$FAILED;                                                         │
│     if (peg$silentFails === 0) { peg$fail(peg$e0); }                         │
│     peg$tracer.trace({                                                       │
│       type: "string.fail",                                                   │
│       rule: "INDENTATION",                                                   │
│       details: "\n",                                                         │
│       location: peg$computeLocation(peg$currPos, peg$currPos, true),         │
│     });                                                                      │
│   }                                                                          │
│   if (s3 !== peg$FAILED) {                                                   │
│     s4 = [];                                                                 │
│     s5 = peg$currPos;                                                        │
│     s6 = [];                                                                 │
│     s7 = input.charAt(peg$currPos);                                          │
│     if (peg$r3.test(s7)) {                                                   │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "class.match",                                                 │
│         rule: "INDENTATION",                                                 │
│         result: input.charAt(peg$currPos-1),                                 │
│         details: peg$r3.toString(),                                          │
│         location: peg$computeLocation(peg$currPos-1, peg$currPos, true),     │
│       });                                                                    │
│     } else {                                                                 │
│       s7 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e14); }                      │
│       peg$tracer.trace({                                                     │
│         type: "class.fail",                                                  │
│         rule: "INDENTATION",                                                 │
│         details: peg$r3.toString(),                                          │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     while (s7 !== peg$FAILED) {                                              │
│       s6.push(s7);                                                           │
│       s7 = input.charAt(peg$currPos);                                        │
│       if (peg$r3.test(s7)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "INDENTATION",                                               │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r3.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s7 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e14); }                    │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "INDENTATION",                                               │
│           details: peg$r3.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│     }                                                                        │
│     if (input.charCodeAt(peg$currPos) === 10) {                              │
│       s7 = peg$c1;                                                           │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "string.match",                                                │
│         rule: "INDENTATION",                                                 │
│         result: "\n",                                                        │
│         location: peg$computeLocation(startPos, peg$currPos, true),          │
│       });                                                                    │
│     } else {                                                                 │
│       s7 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e0); }                       │
│       peg$tracer.trace({                                                     │
│         type: "string.fail",                                                 │
│         rule: "INDENTATION",                                                 │
│         details: "\n",                                                       │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     if (s7 !== peg$FAILED) {                                                 │
│       s6 = [s6, s7];                                                         │
│       s5 = s6;                                                               │
│     } else {                                                                 │
│       peg$currPos = s5;                                                      │
│       s5 = peg$FAILED;                                                       │
│     }                                                                        │
│     while (s5 !== peg$FAILED) {                                              │
│       s4.push(s5);                                                           │
│       s5 = peg$currPos;                                                      │
│       s6 = [];                                                               │
│       s7 = input.charAt(peg$currPos);                                        │
│       if (peg$r3.test(s7)) {                                                 │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "class.match",                                               │
│           rule: "INDENTATION",                                               │
│           result: input.charAt(peg$currPos-1),                               │
│           details: peg$r3.toString(),                                        │
│           location: peg$computeLocation(peg$currPos-1, peg$currPos, true),   │
│         });                                                                  │
│       } else {                                                               │
│         s7 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e14); }                    │
│         peg$tracer.trace({                                                   │
│           type: "class.fail",                                                │
│           rule: "INDENTATION",                                               │
│           details: peg$r3.toString(),                                        │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│       while (s7 !== peg$FAILED) {                                            │
│         s6.push(s7);                                                         │
│         s7 = input.charAt(peg$currPos);                                      │
│         if (peg$r3.test(s7)) {                                               │
│           peg$currPos++;                                                     │
│           peg$tracer.trace({                                                 │
│             type: "class.match",                                             │
│             rule: "INDENTATION",                                             │
│             result: input.charAt(peg$currPos-1),                             │
│             details: peg$r3.toString(),                                      │
│             location: peg$computeLocation(peg$currPos-1, peg$currPos, true), │
│           });                                                                │
│         } else {                                                             │
│           s7 = peg$FAILED;                                                   │
│           if (peg$silentFails === 0) { peg$fail(peg$e14); }                  │
│           peg$tracer.trace({                                                 │
│             type: "class.fail",                                              │
│             rule: "INDENTATION",                                             │
│             details: peg$r3.toString(),                                      │
│             location: peg$computeLocation(peg$currPos, peg$currPos, true),   │
│           });                                                                │
│         }                                                                    │
│       }                                                                      │
│       if (input.charCodeAt(peg$currPos) === 10) {                            │
│         s7 = peg$c1;                                                         │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "string.match",                                              │
│           rule: "INDENTATION",                                               │
│           result: "\n",                                                      │
│           location: peg$computeLocation(startPos, peg$currPos, true),        │
│         });                                                                  │
│       } else {                                                               │
│         s7 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e0); }                     │
│         peg$tracer.trace({                                                   │
│           type: "string.fail",                                               │
│           rule: "INDENTATION",                                               │
│           details: "\n",                                                     │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│       if (s7 !== peg$FAILED) {                                               │
│         s6 = [s6, s7];                                                       │
│         s5 = s6;                                                             │
│       } else {                                                               │
│         peg$currPos = s5;                                                    │
│         s5 = peg$FAILED;                                                     │
│       }                                                                      │
│     }                                                                        │
│     s5 = [];                                                                 │
│     if (input.charCodeAt(peg$currPos) === 9) {                               │
│       s6 = peg$c21;                                                          │
│       peg$currPos++;                                                         │
│       peg$tracer.trace({                                                     │
│         type: "string.match",                                                │
│         rule: "INDENTATION",                                                 │
│         result: "\t",                                                        │
│         location: peg$computeLocation(startPos, peg$currPos, true),          │
│       });                                                                    │
│     } else {                                                                 │
│       s6 = peg$FAILED;                                                       │
│       if (peg$silentFails === 0) { peg$fail(peg$e15); }                      │
│       peg$tracer.trace({                                                     │
│         type: "string.fail",                                                 │
│         rule: "INDENTATION",                                                 │
│         details: "\t",                                                       │
│         location: peg$computeLocation(peg$currPos, peg$currPos, true),       │
│       });                                                                    │
│     }                                                                        │
│     while (s6 !== peg$FAILED) {                                              │
│       s5.push(s6);                                                           │
│       if (input.charCodeAt(peg$currPos) === 9) {                             │
│         s6 = peg$c21;                                                        │
│         peg$currPos++;                                                       │
│         peg$tracer.trace({                                                   │
│           type: "string.match",                                              │
│           rule: "INDENTATION",                                               │
│           result: "\t",                                                      │
│           location: peg$computeLocation(startPos, peg$currPos, true),        │
│         });                                                                  │
│       } else {                                                               │
│         s6 = peg$FAILED;                                                     │
│         if (peg$silentFails === 0) { peg$fail(peg$e15); }                    │
│         peg$tracer.trace({                                                   │
│           type: "string.fail",                                               │
│           rule: "INDENTATION",                                               │
│           details: "\t",                                                     │
│           location: peg$computeLocation(peg$currPos, peg$currPos, true),     │
│         });                                                                  │
│       }                                                                      │
│     }                                                                        │
│     s1 = s5;                                                                 │
│   } else {                                                                   │
│     peg$currPos = s1;                                                        │
│     s1 = peg$FAILED;                                                         │
│   }                                                                          │
│   if (s1 === peg$FAILED) {                                                   │
│     s1 = null;                                                               │
│   }                                                                          │
│                                                                              │
│   peg$savedPos = s0;                                                         │
│   s1 = peg$f19(s1);                                                          │
│   s0 = s1;                                                                   │
│                                                                              │
│                                                                              │
│   if (s0 !== peg$FAILED) {                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.match",                                                    │
│       rule: "INDENTATION",                                                   │
│       result: s0,                                                            │
│       location: peg$computeLocation(startPos, peg$currPos, true),            │
│     });                                                                      │
│   } else {                                                                   │
│     peg$tracer.trace({                                                       │
│       type: "rule.fail",                                                     │
│       rule: "INDENTATION",                                                   │
│       location: peg$computeLocation(startPos, startPos, true),               │
│     });                                                                      │
│   }                                                                          │
│                                                                              │
│   return s0;                                                                 │
│ }                                                                            │
└──────────────────────────────────────────────────────────────────────────────┘