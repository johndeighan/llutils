{
  "version": 3,
  "file": "coffee.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\coffee.coffee"
  ],
  "names": [],
  "mappings": "AAAe;AAEf,OAAO,EAAP,MAAA;;AACA,OAAA;EAAQ,OAAA,iBAAR;CAAA,MAAA;;AAEA,OAAA;EACC,IADD;EACO,KADP;EACc,OADd;EACuB,UADvB;EACmC,SADnC;EAC8C,KAD9C;EAEC,MAFD;EAES,KAFT;EAEgB,EAFhB;EAEoB,MAFpB;EAE4B,UAF5B;EAEwC,QAFxC;EAGC,QAHD;EAGW,OAHX;EAGoB,MAHpB;EAG4B,UAH5B;EAGwC,IAHxC;EAG8C,UAH9C;EAIC,QAJD;EAIW,SAJX;CAAA,MAAA;;AAMA,OAAA;EAAQ,QAAR;EAAkB,SAAlB;CAAA,MAAA;;AACA,OAAA;EAAQ,IAAR;CAAA,MAAA;;AACA,OAAA;EACC,IADD;EACO,OADP;EACgB,MADhB;CAAA,MAAA;;AAGA,OAAA;EAAQ,WAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,eAAR;CAAA,MAAA;;AACA,OAAA;EACC,UADD;EACa,KADb;EACoB,SADpB;CAAA,MAAA;;AAGA,OAAA;EAAQ,SAAR;CAAA,MAAA;;AAEA,OAAA;EAAQ,UAAR;EAAoB,KAApB;EAA2B,SAA3B;EAvBe;;;;;;AA8Bf,OAAA,IAAO,UAAA,GAAa,CAAC,IAAD,EAAO,WAAS,CAAA,CAAhB,CAAA,GAAA;AAEpB,MAAA;EAAC,IAAG,QAAA,CAAS,IAAT,CAAH;IACC,IAAA,GAAO,KAAA,CAAM,IAAN,EADR;;EAEA,MAAA,GAAS,IAAI,SAAJ,CAAA;EACT,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,QAAlB;AAEA,SAAO;IACN,IADM;IAEN,QAAA,EAAU,MAAM,CAAC,UAAP,CAAkB,kBAAlB,CAFJ;IAGN,QAAA,EAAU,MAAM,CAAC,UAAP,CAAkB,SAAlB,CAHJ;IAIN,QAAA,EAAU,MAAM,CAAC,UAAP,CAAkB,SAAlB,CAJJ;IAKN,OAAA,EAAU,MAAM,CAAC,UAAP,CAAkB,QAAlB,CALJ;IAMN,SAAA,EAAW,MAAM,CAAC,UAAP,CAAkB,UAAlB;EANL;AAPY,EA9BL;;;AAgDf,OAAA,IAAO,SAAA,GAAY,CAAC,IAAD,EAAO,WAAS,CAAA,CAAhB,CAAA,GAAA;AAEnB,MAAA,KAAA,EAAA,gBAAA,EAAA;EAAC,IAAG,QAAA,CAAS,IAAT,CAAH;IACC,IAAA,GAAO,KAAA,CAAM,IAAN,EADR;;EAEA,MAAA,GAAS,IAAI,SAAJ,CAAA;EACT,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,QAAlB;EACA,gBAAA,GAAmB,MAAM,CAAC,kBAAP,CAAA;EAEnB,KAAA,GAAQ;IACP,QAAA,EAAW,MAAM,CAAC,UAAP,CAAkB,kBAAlB,CADJ;IAEP,QAAA,EAAW,MAAM,CAAC,UAAP,CAAkB,SAAlB,CAFJ;IAGP,QAAA,EAAW,MAAM,CAAC,UAAP,CAAkB,SAAlB,CAHJ;IAIP,OAAA,EAAW,MAAM,CAAC,UAAP,CAAkB,QAAlB,CAJJ;IAKP,SAAA,EAAW,MAAM,CAAC,UAAP,CAAkB,UAAlB;EALJ;AAOR,SAAO,SAAA,CAAU,KAAV;AAfW",
  "sourcesContent": [
    "# coffee.coffee\r\n\r\nimport fs from 'fs'\r\nimport {compile as compileCoffee} from 'coffeescript'\r\n\r\nimport {\r\n\tpass, undef, defined, notdefined, gen2block, words,\r\n\tassert, croak, OL, dclone, getOptions, listdiff,\r\n\tisString, isArray, isHash, isFunction, keys, removeKeys,\r\n\tnonEmpty, cleanHash,\r\n\t} from '@jdeighan/llutils'\r\nimport {indented, splitLine} from '@jdeighan/llutils/indent'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {\r\n\tbarf, withExt, isFile,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {LineFetcher} from '@jdeighan/llutils/fetcher'\r\nimport {replaceHereDocs} from '@jdeighan/llutils/heredoc'\r\nimport {\r\n\tprocCoffee, toAST, toASTFile,\r\n\t} from '@jdeighan/llutils/llcoffee'\r\nimport {ASTWalker} from '@jdeighan/llutils/ast-walker'\r\n\r\nexport {procCoffee, toAST, toASTFile}\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Valid options:\r\n#        debug - extensive debugging\r\n#        hDumpNode - { <nodeType>: true, ... }\r\n\r\nexport coffeeInfo = (hAST, hOptions={}) =>\r\n\r\n\tif isString(hAST)\r\n\t\thAST = toAST(hAST)\r\n\twalker = new ASTWalker()\r\n\twalker.walk(hAST, hOptions)\r\n\r\n\treturn {\r\n\t\thAST\r\n\t\thImports: walker.getSymbols('detailed-imports')\r\n\t\tlExports: walker.getSymbols('exports')\r\n\t\tlMissing: walker.getSymbols('missing')\r\n\t\tlUnused:  walker.getSymbols('unused')\r\n\t\tlTopLevel: walker.getSymbols('toplevel')\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport basicInfo = (hAST, hOptions={}) =>\r\n\r\n\tif isString(hAST)\r\n\t\thAST = toAST(hAST)\r\n\twalker = new ASTWalker()\r\n\twalker.walk(hAST, hOptions)\r\n\tlTopLevelSymbols = walker.getTopLevelSymbols()\r\n\r\n\thInfo = {\r\n\t\thImports:  walker.getSymbols('detailed-imports')\r\n\t\tlExports:  walker.getSymbols('exports')\r\n\t\tlMissing:  walker.getSymbols('missing')\r\n\t\tlUnused:   walker.getSymbols('unused')\r\n\t\tlTopLevel: walker.getSymbols('toplevel')\r\n\t\t}\r\n\treturn cleanHash(hInfo)\r\n"
  ]
}