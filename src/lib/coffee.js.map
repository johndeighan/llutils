{
  "version": 3,
  "file": "coffee.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\coffee.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# coffee.coffee\r\n\r\nimport fs from 'fs'\r\nimport {compile} from 'coffeescript'\r\n\r\nimport {\r\n\tpass, undef, defined, notdefined, gen2block, words,\r\n\tassert, croak, OL, dclone, getOptions, listdiff,\r\n\tisString, isArray, isHash, isFunction, keys, removeKeys,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {indented, splitLine} from '@jdeighan/llutils/indent'\r\nimport {\r\n\treadTextFile, barf, withExt, isFile,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {LineFetcher} from '@jdeighan/llutils/fetcher'\r\nimport {\r\n\tASTWalker, removeExtraASTKeys,\r\n\t} from '@jdeighan/llutils/ast-walker'\r\nimport {replaceHereDocs} from '@jdeighan/llutils/heredoc'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport brew = (code, hMetaData={}, hOptions={}) ->\r\n\r\n\t# --- metadata can be used to add a shebang line\r\n\t#     if true, use \"#!/usr/bin/env node\"\r\n\t#     else use value of shebang key\r\n\r\n\t# --- filePath is used to check for a source map\r\n\t#     without it, no source map is produced\r\n\t# --- if key preprocess is set, it must be a function\r\n\t#     that converts one block of code to another\r\n\t#     block of code\r\n\r\n\tassert isString(code), \"code: #{OL(code)}\"\r\n\t{filePath, preprocess, debug} = getOptions hOptions, {\r\n\t\tfilePath: undef\r\n\t\tpreprocess: undef\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tif defined(preprocess)\r\n\t\tassert isFunction(preprocess),\r\n\t\t\t\t\"Not a function: #{OL(preprocess)}\"\r\n\t\tif debug\r\n\t\t\tconsole.log \"pre-processing code\"\r\n\t\tpreprocCode = preprocess(code, {debug})\r\n\t\tif debug\r\n\t\t\tDUMP preprocCode, 'PreProcessed code'\r\n\r\n\tif defined(filePath)\r\n\t\t{js, v3SourceMap} = compile (preprocCode || code), {\r\n\t\t\tsourceMap: true\r\n\t\t\tbare: true\r\n\t\t\theader: false\r\n\t\t\tfilename: filePath\r\n\t\t\t}\r\n\telse\r\n\t\tjs = compile (preprocCode || code), {\r\n\t\t\tbare: true\r\n\t\t\theader: false\r\n\t\t\t}\r\n\t\tv3SourceMap = undef\r\n\r\n\tassert defined(js), \"No JS code generated\"\r\n\r\n\tshebang = getShebang(hMetaData)\r\n\tif defined(shebang)\r\n\t\tjs = shebang + \"\\n\" + js.trim()\r\n\telse\r\n\t\tjs = js.trim()\r\n\treturn {\r\n\t\torgCode: code\r\n\t\tpreprocCode\r\n\t\tjs\r\n\t\tsourceMap: v3SourceMap\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport brewFile = (filePath) ->\r\n\r\n\tassert isFile(filePath), \"No such file: #{filePath}\"\r\n\t{hMetaData, reader} = readTextFile(filePath)\r\n\tcode = gen2block(reader)\r\n\t{js, sourceMap} = brew code, hMetaData, {filePath}\r\n\tbarf js, withExt(filePath, '.js')\r\n\tbarf sourceMap, withExt(filePath, '.js.map')\r\n\treturn {js, sourceMap}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getShebang = (hMetaData) =>\r\n\r\n\tshebang = hMetaData.shebang\r\n\tif defined(shebang)\r\n\t\tif isString(shebang)\r\n\t\t\treturn shebang\r\n\t\telse if shebang\r\n\t\t\treturn \"#!/usr/bin/env node\"\r\n\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toAST = (coffeeCode, hOptions={}) =>\r\n\r\n\t{minimal} = getOptions hOptions, {\r\n\t\tminimal: false\r\n\t\t}\r\n\r\n\thAST = compile(coffeeCode, {ast: true})\r\n\tif minimal\r\n\t\tremoveExtraASTKeys hAST\r\n\treturn hAST\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toASTFile = (code, filePath, hOptions={}) ->\r\n\r\n\thAST = toAST(code, hOptions)\r\n\tbarfAST hAST, filePath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Valid options:\r\n#        debug - extensive debugging\r\n#        hDumpNode - { <nodeType>: true, ... }\r\n\r\nexport coffeeInfo = (hAST, hOptions={}) =>\r\n\r\n\tif isString(hAST)\r\n\t\thAST = toAST(hAST)\r\n\twalker = new ASTWalker(hOptions).walk(hAST)\r\n\r\n\t# --- Convert sets to arrays\r\n\thImports = {}\r\n\tfor src in keys(walker.hImports)\r\n\t\thImports[src] = Array.from(walker.hImports[src].values())\r\n\r\n\treturn {\r\n\t\thAST\r\n\t\ttrace: walker.getTrace()\r\n\t\thImports\r\n\t\tlExports: Array.from(walker.setExports.values())\r\n\t\tlUsed: Array.from(walker.setUsed.values())\r\n\t\tlMissing: Array.from(walker.getMissing().values())\r\n\t\t}\r\n"
  ]
}