{
  "version": 3,
  "file": "section.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\section.coffee"
  ],
  "names": [],
  "mappings": "AAAgB;AAEhB,OAAA;EACC,KADD;EACQ,OADR;EACiB,OADjB;EAC0B,MAD1B;EACkC,KADlC;EACyC,EADzC;EAEC,OAFD;EAEU,OAFV;EAEmB,UAFnB;EAE+B,SAF/B;CAAA,MAAA;;AAIA,OAAA;EAAQ,QAAR;CAAA,MAAA,2BANgB;;;AAUhB,OAAA,IAAa,UAAN,MAAA,QAAA;EAEN,WAAa,KAAA,cAAmB,KAAnB,CAAA;IAAC,IAAC,CAAA;IAAM,IAAC,CAAA,sBACvB;;IAEE,IAAC,CAAA,MAAD,GAAU;IACV,IAAG,OAAA,CAAQ,IAAC,CAAA,SAAT,CAAH;MACC,MAAA,CAAO,UAAA,CAAW,IAAC,CAAA,SAAZ,CAAP,EACE,CAAA,yBAAA,CAAA,CAA4B,EAAA,CAAG,IAAC,CAAA,IAAJ,CAA5B,CAAA,CADF,EADD;;EAJY,CAAd;;;EAUC,OAAS,CAAA,CAAA;AAER,WAAQ,IAAC,CAAA,MAAM,CAAC,MAAR,KAAkB;EAFlB,CAVV;;;EAgBC,QAAU,CAAA,CAAA;AAET,WAAQ,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB;EAFhB,CAhBX;;;EAsBC,GAAK,CAAA,GAAC,MAAD,CAAA;AAEN,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA;IAAE,IAAG,SAAA,CAAU,MAAM,CAAC,CAAD,CAAhB,CAAH;MACC,KAAA,GAAQ,MAAM,CAAC,CAAD;MACd,KAAA,gDAAA;;QACC,IAAI,CAAA,GAAI,CAAR;UACC,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,QAAA,CAAS,IAAT,EAAe,KAAf,CAAb,EADD;;MADD,CAFD;KAAA,MAAA;MAMC,KAAA,0CAAA;;QACC,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,IAAb;MADD,CAND;;EAFI,CAtBN;;;EAoCC,OAAS,CAAA,GAAC,MAAD,CAAA;AAEV,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAE,IAAG,SAAA,CAAU,MAAM,CAAC,CAAD,CAAhB,CAAH;MACC,KAAA,GAAQ,MAAM,CAAC,CAAD;AACd;MAAA,KAAA,6CAAA;;QACC,IAAI,CAAA,GAAI,MAAM,CAAC,MAAP,GAAc,CAAtB;UACC,IAAC,CAAA,MAAM,CAAC,OAAR,CAAgB,QAAA,CAAS,IAAT,EAAe,KAAf,CAAhB,EADD;;MADD,CAFD;KAAA,MAAA;AAMC;MAAA,KAAA,wCAAA;;QACC,IAAC,CAAA,MAAM,CAAC,OAAR,CAAgB,IAAhB;MADD,CAND;;EAFQ,CApCV;;;EAkDC,QAAU,CAAA,CAAA;AAET,WAAO,IAAC,CAAA;EAFC,CAlDX;;;EAwDC,QAAU,CAAA,CAAA;AAEX,QAAA;IAAE,IAAI,IAAC,CAAA,MAAM,CAAC,MAAR,KAAkB,CAAtB;AACC,aAAO,MADR;;IAEA,KAAA,GAAQ,OAAA,CAAQ,IAAC,CAAA,MAAT;IACR,IAAG,OAAA,CAAQ,IAAC,CAAA,SAAT,CAAH;MACC,KAAA,GAAQ,IAAC,CAAA,SAAD,CAAW,KAAX,EADT;;AAEA,WAAO;EAPE;;AA1DJ",
  "sourcesContent": [
    "# Section.coffee\r\n\r\nimport {\r\n\tundef, defined, toBlock, assert, croak, OL,\r\n\tisArray, isEmpty, isFunction, isInteger,\r\n\t} from '@jdeighan/llutils'\r\nimport {indented} from '@jdeighan/llutils/indent'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class Section\r\n\r\n\tconstructor: (@name, @converter=undef) ->\r\n\t\t# --- name can be undef or empty\r\n\r\n\t\t@lLines = []\r\n\t\tif defined(@converter)\r\n\t\t\tassert isFunction(@converter),\r\n\t\t\t\t\t\"bad converter in section #{OL(@name)}\"\r\n\r\n\t# ..........................................................\r\n\r\n\tisEmpty: () ->\r\n\r\n\t\treturn (@lLines.length == 0)\r\n\r\n\t# ..........................................................\r\n\r\n\tnonEmpty: () ->\r\n\r\n\t\treturn (@lLines.length > 0)\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (lLines...) ->\r\n\r\n\t\tif isInteger(lLines[0])\r\n\t\t\tlevel = lLines[0]\r\n\t\t\tfor line,i in lLines\r\n\t\t\t\tif (i > 0)\r\n\t\t\t\t\t@lLines.push indented(line, level)\r\n\t\telse\r\n\t\t\tfor line in lLines\r\n\t\t\t\t@lLines.push line\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tprepend: (lLines...) ->\r\n\r\n\t\tif isInteger(lLines[0])\r\n\t\t\tlevel = lLines[0]\r\n\t\t\tfor line,i in lLines.toReversed()\r\n\t\t\t\tif (i < lLines.length-1)\r\n\t\t\t\t\t@lLines.unshift indented(line, level)\r\n\t\telse\r\n\t\t\tfor line in lLines.toReversed()\r\n\t\t\t\t@lLines.unshift line\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetParts: () ->\r\n\r\n\t\treturn @lLines\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: () ->\r\n\r\n\t\tif (@lLines.length == 0)\r\n\t\t\treturn undef\r\n\t\tblock = toBlock(@lLines)\r\n\t\tif defined(@converter)\r\n\t\t\tblock = @converter block\r\n\t\treturn block\r\n"
  ]
}