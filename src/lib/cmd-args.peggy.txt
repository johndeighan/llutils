{{
	var check, hOptions, parse__arg__1, parse__arg__2, parse__cmdArgs__1, parse__stringVal__1, parse__stringVal__2, parse__stringVal__3, showHelp;

	import {
	  undef,
	  defined,
	  notdefined,
	  pass,
	  isEmpty,
	  hasKey,
	  keys,
	  OL,
	  words,
	  add_s,
	  assert,
	  croak,
	  getOptions,
	  cmdScriptName,
	  cmdArgStr,
	  isString,
	  isFunction,
	  isBoolean,
	  isArray,
	  isHash,
	  isRegExp
	} from '@jdeighan/llutils';

	import {
	  DUMP
	} from '@jdeighan/llutils/dump';

	import {
	  getTracer
	} from '@jdeighan/llutils/peggy';

	hOptions = {};

	export var getArgs = (hDesc = undef, hOptions = {}) => {
	  var argStr, args, err, hResult, tracer;
	  ({args, tracer} = getOptions(hOptions, {
	    args: undef,
	    tracer: 'none'
	  }));
	  argStr = cmdArgStr(args);
	  hOptions.tracer = getTracer(tracer);
	  try {
	    hResult = peg$parse(argStr, hOptions);
	  } catch (error) {
	    err = error;
	    console.log(`ERROR parsing ${OL(argStr)}: ${err.message}`);
	    process.exit();
	  }
	  if (hResult.h === true) {
	    showHelp(hDesc);
	    process.exit();
	  }
	  if (defined(hDesc)) {
	    check(hResult, hDesc);
	  }
	  return hResult;
	};

	check = (hResult, hDesc) => {
	  var desc, err, h, i, key, lNonOptions, len, max, min, msg, n, ref, type, value;
	  assert(isHash(hResult), `check(): hResult not a hash: ${OL(hResult)}`);
	  assert(isHash(hDesc), `check(): hDesc not a hash: ${OL(hDesc)}`);
	  ref = keys(hResult).filter((x) => {
	    return x !== '_';
	  });
	  for (i = 0, len = ref.length; i < len; i++) {
	    key = ref[i];
	    ({type, desc, msg} = hDesc[key]);
	    if (isString(type)) {
	      value = hResult[key];
	      switch (type) {
	        case 'string':
	          pass();
	          break;
	        case 'boolean':
	          assert(isBoolean(value), `Bad boolean: ${OL(value)}, key = ${OL(key)}`);
	          break;
	        case 'number':
	          try {
	            hResult[key] = parseFloat(value);
	          } catch (error) {
	            err = error;
	            croak(`Bad number: ${OL(value)}, key = ${OL(key)}`);
	          }
	          break;
	        case 'integer':
	          try {
	            hResult[key] = parseInt(value, 10);
	          } catch (error) {
	            err = error;
	            croak(`Bad integer: ${OL(value)}, key = ${OL(key)}`);
	          }
	          break;
	        default:
	          croak(`Invalid type: ${OL(desc)}, key = ${OL(key)}`);
	      }
	    } else if (isRegExp(type)) {
	      value = hResult[key];
	      assert(isString(value), `value not a string: ${OL(value)}`);
	      assert(value.match(type), `value ${OL(value)} does not match regexp`);
	    } else if (isFunction(type)) {
	      type(); // --- call the function
	    } else if (defined(type)) {
	      croak(`Bad type: ${OL(type)}`);
	    }
	  }
	  if (defined(h = hDesc._)) {
	    min = h.min || h.exactly || 0;
	    max = h.max || h.exactly || 2e308;
	    lNonOptions = hResult._;
	    if (defined(lNonOptions)) {
	      assert(isArray(lNonOptions), `Not an array: ${OL(lNonOptions)}`);
	      n = lNonOptions.length;
	    } else {
	      n = 0;
	    }
	    assert(n >= min, `There must be at least ${min} non-option${add_s(min)}`);
	    assert(n <= max, `There can be at most ${max} non-option${add_s(max)}`);
	  }
	};

	showHelp = (hDesc) => {
	  var _, desc, exactly, i, j, key, l, lFlags, lNonFlags, label, len, len1, len2, max, min, msg, ref, ref1, strIter, type, usageStr;
	  assert(isHash(hDesc), `showHelp(): not a hash: ${OL(hDesc)}`);
	  usageStr = cmdScriptName();
	  lFlags = [];
	  lNonFlags = [];
	  ref = keys(hDesc).filter((k) => {
	    return k !== '_';
	  });
	  for (i = 0, len = ref.length; i < len; i++) {
	    key = ref[i];
	    if ((key.length === 1) && (hDesc[key].type === 'boolean')) {
	      lFlags.push(key);
	    } else {
	      lNonFlags.push(key);
	    }
	  }
	  if (lFlags.length > 0) {
	    usageStr += ` -${lFlags.join('')}`;
	  }
	  for (j = 0, len1 = lNonFlags.length; j < len1; j++) {
	    key = lNonFlags[j];
	    ({type, desc} = hDesc[key]);
	    label = desc || 'type';
	    usageStr += ` -${key}=<${desc || type}>`;
	  }
	  if (defined(_ = hDesc._)) {
	    ({exactly, min, max, desc} = _);
	    if (defined(desc)) {
	      usageStr += ` ${desc}`;
	    } else {
	      if (defined(exactly)) {
	        strIter = `{${exactly}}`;
	      } else {
	        strIter = "{";
	        if (defined(min)) {
	          strIter += min;
	        }
	        strIter += ',';
	        if (defined(max) && (max < 1000)) {
	          strIter += max;
	        }
	        strIter += '}';
	      }
	      usageStr += ` <string>${strIter}`;
	    }
	  }
	  console.log(`USAGE: ${usageStr}`);
	  ref1 = keys(hDesc).filter((k) => {
	    return k !== '_';
	  });
	  for (l = 0, len2 = ref1.length; l < len2; l++) {
	    key = ref1[l];
	    ({msg} = hDesc[key]);
	    if (msg) {
	      console.log(`   -${key} - ${msg}`);
	    }
	  }
	};

	// --------------------------------------------------------------
	parse__cmdArgs__1 = (lArgs) => {
	  var arg, i, lNonOptions, len;
	  hOptions = {};
	  lNonOptions = [];
	  for (i = 0, len = lArgs.length; i < len; i++) {
	    arg = lArgs[i];
	    if (isHash(arg)) {
	      Object.assign(hOptions, arg);
	    } else if (isArray(arg)) {
	      lNonOptions.push(...arg);
	    } else {
	      croak(`Bad return from arg: ${OL(arg)}`);
	    }
	  }
	  hOptions._ = lNonOptions;
	  return hOptions;
	};

	// --------------------------------------------------------------
	parse__arg__1 = (lChars, value) => {
	  var ch, i, key, len;
	  if (isEmpty(value)) {
	    hOptions = {};
	    for (i = 0, len = lChars.length; i < len; i++) {
	      ch = lChars[i];
	      hOptions[ch] = true;
	    }
	    return hOptions;
	  } else {
	    key = lChars.join('');
	    return {
	      [key]: value
	    };
	  }
	};

	// --------------------------------------------------------------
	parse__arg__2 = (val) => {
	  return [val];
	};

	// --------------------------------------------------------------
	parse__stringVal__1 = (str) => {
	  return str;
	};

	// --------------------------------------------------------------
	parse__stringVal__2 = (str) => {
	  return str;
	};

	// --------------------------------------------------------------
	parse__stringVal__3 = (str) => {
	  return str;
	};
}}

cmdArgs

	= lArgs: arg |.., _|
		{ return parse__cmdArgs__1(lArgs); }

arg

	= '-' lChars:[A-Za-z]+ value:('=' @stringVal)?
		{ return parse__arg__1(lChars, value); }

	/ val:stringVal
		{ return parse__arg__2(val); }

stringVal

	= '"'  str: $ [^"]*  '"'
		{ return parse__stringVal__1(str); }

	/ "'"  str: $ [^']*  "'"
		{ return parse__stringVal__2(str); }

	/ !'-' str: $ [^ \t]+
		{ return parse__stringVal__3(str); }

_

	= [ \t]+