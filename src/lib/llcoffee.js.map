{
  "version": 3,
  "file": "llcoffee.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\llcoffee.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# llcoffee.coffee\r\n\r\nimport {compile} from 'coffeescript'\r\n\r\nimport {\r\n\tundef, defined, OL, isString, getOptions, removeKeys, words,\r\n\tassert, croak, isEmpty, nonEmpty, blockToArray,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tisFile, readTextFile,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {NodeWalker} from '@jdeighan/llutils/node-walker'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport analyzeCoffee = (code, hMetaData) ->\r\n\r\n\treturn {\r\n\t\thMetaData\r\n\t\tcontents: code\r\n\t\tlDependencies: getCoffeeDependencies(code)\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport analyzeCoffeeFile = (filePath) ->\r\n\r\n\t# --- get file contents, including meta data\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\treturn analyzeCoffee(contents, hMetaData)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getCoffeeDependencies = (code) =>\r\n\r\n\tlDependencies = []\r\n\r\n\tclass ImportWalker extends NodeWalker\r\n\t\tvisit: (hNode) ->\r\n\t\t\tsuper hNode\r\n\t\t\tif (hNode.type == 'ImportDeclaration')\r\n\t\t\t\tsource = hNode.source.value\r\n\t\t\t\tlDependencies.push source\r\n\r\n\twalker = new ImportWalker()\r\n\twalker.walk(toAST(code))\r\n\r\n\treturn lDependencies\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport procCoffee = (contents, hMetaData={}, filePath=undef, hOptions={}) ->\r\n\r\n\t# --- meta data can be used to add a shebang line\r\n\t#     if true, use \"#!/usr/bin/env node\"\r\n\t#     else use value of shebang key\r\n\r\n\t# --- filePath is used to check for a source map\r\n\t#     without it, no source map is produced\r\n\r\n\tassert isString(contents), \"Not a string: #{OL(contents)}\"\r\n\tassert nonEmpty(contents), \"Empty contents: #{OL(contents)}\"\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\t{shebang} = getOptions hMetaData, {\r\n\t\tshebang: undef\r\n\t\t}\r\n\r\n\tif defined(filePath)\r\n\t\t{js: code, v3SourceMap} = compile contents, {\r\n\t\t\tsourceMap: true\r\n\t\t\tbare: true\r\n\t\t\theader: false\r\n\t\t\tfilename: filePath\r\n\t\t\t}\r\n\telse\r\n\t\tcode = compile contents, {\r\n\t\t\tbare: true\r\n\t\t\theader: false\r\n\t\t\t}\r\n\t\tv3SourceMap = undef\r\n\r\n\tassert defined(code), \"No JS generated\"\r\n\tcode = code.trim()\r\n\r\n\tif defined(shebang)\r\n\t\tif isString(shebang)\r\n\t\t\tcode = \"#{shebang}\\n#{code}\"\r\n\t\telse\r\n\t\t\tcode = \"#!/usr/bin/env node\\n#{code}\"\r\n\r\n\treturn {\r\n\t\tcode\r\n\t\tsourceMap: v3SourceMap\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport procCoffeeFile = (filePath, hOptions={}) ->\r\n\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\treturn procCoffee(contents, hMetaData, filePath, hOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toAST = (code, hOptions={}) =>\r\n\r\n\t{minimal} = getOptions hOptions, {\r\n\t\tminimal: false\r\n\t\t}\r\n\r\n\thAST = compile(code, {ast: true})\r\n\tif minimal\r\n\t\tremoveExtraASTKeys hAST\r\n\treturn hAST\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toASTFile = (code, filePath, hOptions={}) ->\r\n\r\n\thAST = toAST(code, hOptions)\r\n\tbarf JSON.stringify(hAST, null, \"\\t\"), filePath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport removeExtraASTKeys = (hAST) =>\r\n\r\n\tremoveKeys hAST, words(\r\n\t\t'loc range extra start end',\r\n\t\t'directives comments tokens',\r\n\t\t)\r\n\treturn hAST\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}