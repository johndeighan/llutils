{
  "version": 3,
  "file": "heredoc.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\heredoc.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# heredoc.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, CWS, arrayToBlock,\r\n\tassert, croak, behead, fromTAML,\r\n\tisString, isClassInstance,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tindented, undented, splitLine,\r\n\t} from '@jdeighan/llutils/indent'\r\nimport {LineFetcher} from '@jdeighan/llutils/fetcher'\r\n\r\nlHereDocs = []   # checked in this order - list of type names\r\nhHereDocs = {}   # {type: obj}\r\n\r\n# ---------------------------------------------------------------------------\r\n# Returns a string or undef\r\n\r\nexport mapHereDoc = (block) ->\r\n\r\n\tassert isString(block), \"not a string: #{OL(block)}\"\r\n\tfor type in lHereDocs\r\n\t\theredocObj = hHereDocs[type]\r\n\t\tresult = heredocObj.map(block)\r\n\t\tif defined(result)\r\n\t\t\tassert isString(result), \"result not a string\"\r\n\t\t\treturn result\r\n\r\n\tresult = JSON.stringify(block)    # can directly replace <<<\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- fetcher is a PLLFetcher, i.e. it has methods\r\n#        moreLines()\r\n#        peek()\r\n#        peekLevel()\r\n#        fetch()\r\n#        skip()\r\n#        getBlock(level)\r\n\r\nexport replaceHereDocs = (level, line, src) =>\r\n\r\n\tassert isString(line), \"not a string\"\r\n\tassert (src instanceof LineFetcher), \"not a LineFetcher\"\r\n\r\n\tlParts = lineToParts(line)\r\n\tlNewParts = for part in lParts\r\n\t\tif part == '<<<'\r\n\r\n\t\t\tlLines = while src.moreLines()\r\n\t\t\t\t[level, str] = splitLine(src.fetch())\r\n\t\t\t\tif (level == 0) && (str == '')\r\n\t\t\t\t\tbreak\r\n\t\t\t\tindented(str, level)\r\n\r\n\t\t\tblock = undented(arrayToBlock(lLines))\r\n\r\n\t\t\tstr = mapHereDoc(block)\r\n\t\t\tassert isString(str), \"Not a string: #{OL(str)}\"\r\n\t\t\tstr\r\n\t\telse\r\n\t\t\tpart    # keep as is\r\n\r\n\tresult = lNewParts.join('')\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport lineToParts = (line) ->\r\n\t# --- Always returns an odd number of parts\r\n\t#     Odd numbered parts are '<<<', Even numbered parts are not '<<<'\r\n\r\n\tlParts = []\r\n\tpos = 0\r\n\twhile ((start = line.indexOf('<<<', pos)) != -1)\r\n\t\tlParts.push line.substring(pos, start)\r\n\t\tlParts.push '<<<'\r\n\t\tpos = start + 3\r\n\tlParts.push line.substring(pos)\r\n\treturn lParts\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport addHereDocType = (type, obj) ->\r\n\r\n\tassert isString(type, {nonempty: true}), \"type is #{OL(type)}\"\r\n\tassert isClassInstance(obj, 'map'), \"Bad input object: #{OL(obj)}\"\r\n\tassert (obj instanceof BaseHereDoc), \"not a BaseHereDoc\"\r\n\tassert notdefined(hHereDocs[type]), \"Heredoc type #{type} already installed\"\r\n\tlHereDocs.push type\r\n\thHereDocs[type] = obj\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# ---------------------------------------------------------------------------\r\n# --- To extend,\r\n#        define map(block) that:\r\n#           returns undef if it's not your HEREDOC type\r\n#           else returns a CieloScript expression\r\n\r\nexport class BaseHereDoc\r\n\r\n\tmap: (block) ->\r\n\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ExplicitBlockHereDoc extends BaseHereDoc\r\n\t# --- First line must be '==='\r\n\t#     Return value is quoted string of remaining lines\r\n\r\n\tmap: (block) ->\r\n\r\n\t\t[head, rest] = behead(block)\r\n\t\tif (head != '===')\r\n\t\t\treturn undef\r\n\t\treturn JSON.stringify(rest)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class OneLineHereDoc extends BaseHereDoc\r\n\t# --- First line must begin with '...'\r\n\t#     Return value is single line string after '...' with\r\n\t#        runs of whitespace replaced with a single space char\r\n\r\n\tmap: (block) ->\r\n\r\n\t\t[head, rest] = behead(block)\r\n\t\tif (head.indexOf('...') != 0)\r\n\t\t\treturn undef\r\n\t\treturn JSON.stringify(CWS(block.substring(3)))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class TAMLHereDoc extends BaseHereDoc\r\n\t# --- First line must be '---'\r\n\r\n\tmap: (block) ->\r\n\r\n\t\t[head, rest] = behead(block)\r\n\t\tif (head != '---')\r\n\t\t\treturn undef\r\n\t\tobj = fromTAML(block)\r\n\t\tresult = JSON.stringify(obj)\r\n\t\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n# --- Add the standard HEREDOC types\r\naddHereDocType 'one line', new OneLineHereDoc()\r\naddHereDocType 'block', new ExplicitBlockHereDoc()\r\naddHereDocType 'taml', new TAMLHereDoc()\r\n"
  ]
}