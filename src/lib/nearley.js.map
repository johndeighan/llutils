{
  "version": 3,
  "file": "nearley.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\nearley.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# nearley.coffee\r\n\r\nimport nearley  from 'nearley'\r\nimport compile  from \"nearley/lib/compile.js\"\r\nimport generate from \"nearley/lib/generate.js\"\r\nimport nearleyGrammar from \"nearley/lib/nearley-language-bootstrapped.js\"\r\nimport {pathToFileURL} from 'node:url'\r\nimport {temporaryFile as tempFile} from 'tempy'\r\n\r\nimport {procCoffee} from '@jdeighan/llutils/llcoffee'\r\nimport {\r\n\tundef, defined, notdefined, nonEmpty, OL, LOG, getOptions,\r\n\tisString, isArray, isFunction, isHash,\r\n\tassert, croak, untabify, tabify, escapeStr,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tisFile, fileExt, withExt, readTextFile,\r\n\tslurp, barf, barfDebugFile, mkpath,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {checkJSFile} from '@jdeighan/llutils/exec-utils'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fixNearlyJs = (jsCode) =>\r\n\r\n\t# --- remove the function wrapper and lame attempt to export\r\n\tjsCode = jsCode.replace(/\\(\\s*function\\s*\\(\\s*\\)\\s*{/, '')\r\n\tifpos = jsCode.indexOf('if (typeof module')\r\n\tassert (ifpos > 10), \"pos not found\"\r\n\tjsCode = jsCode.substring(0, ifpos).trim()\r\n\r\n\t# --- Next, add export statement\r\n\treturn jsCode + \"\\nexport {grammar};\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ngetParserObj = (grammar=nearleyGrammar) =>\r\n\r\n\treturn new nearley.Parser(grammar)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parseInput = (parserObj, code, filePath=undef, hOptions={}) =>\r\n\r\n\t{debug, allowAmbiguous} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\tallowAmbiguous: false\r\n\t\t}\r\n\r\n\tassert isString(code), \"Not a string: #{OL(code)}\"\r\n\tparserObj.feed(code)\r\n\tlResults = parserObj.results\r\n\tif defined(filePath)\r\n\t\tfrom = OL(filePath)\r\n\telse\r\n\t\tfrom = escapeStr(code).substring(0, 24) + '...'\r\n\tassert nonEmpty(lResults), \"Error in grammar: #{from}\"\r\n\tif !allowAmbiguous\r\n\t\tassert (lResults.length == 1), \"Ambiguous grammar in #{from}\"\r\n\treturn lResults[0]\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC !\r\n\r\nexport getNearleyParser = (code, filePath=undef, hOptions={}) =>\r\n\r\n\t{debug, streaming} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\tstreaming: false\r\n\t\t}\r\n\r\n\tif defined(filePath)\r\n\t\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\t\tassert (fileExt(filePath)=='.ne'), \"Not a nearley file: #{OL(filePath)}\"\r\n\r\n\tif notdefined(code)\r\n\t\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\t\tcode = slurp filePath\r\n\tcoreParserObj = new nearley.Parser(nearleyGrammar)\r\n\tast = parseInput(coreParserObj, code, filePath, 'allowAmbiguous')\r\n\r\n\t# --- Compile the AST into a set of rules\r\n\tsetOfRules = compile(ast, {})\r\n\r\n\t# --- Generate JavaScript code from the rules\r\n\tjs = generate(setOfRules, \"grammar\")\r\n\r\n\tif defined(filePath)\r\n\t\tjsPath = withExt(filePath, '.js')\r\n\telse\r\n\t\tjsPath = tempFile {extension: '.js'}\r\n\tif debug\r\n\t\tLOG \"Writing JS to #{OL(jsPath)}\"\r\n\tbarf js, jsPath\r\n\tgrammar = await import(pathToFileURL(jsPath))\r\n\tparserObj = new nearley.Parser(grammar.default)\r\n\tif streaming\r\n\t\treturn parserObj\r\n\treturn ((input) =>\r\n\t\treturn parseInput parserObj, input, filePath, hOptions\r\n\t\t)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isNearleyBuiltin = (path) =>\r\n\r\n\tassert isString(path), \"not a string: #{OL(path)}\"\r\n\treturn (path.indexOf('/') == -1)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Only creates the parser as JavaScript code\r\n#     Returns { code, sourceMap, hOtherFiles, lUses }\r\n\r\nexport procNearley = (contents, hMetaData={}, filePath=undef, hOptions={}) =>\r\n\r\n\tnearleyParser = getParserObj()\r\n\tassert isString(contents), \"contents not a string: #{OL(contents)}\"\r\n\tassert nonEmpty(contents), \"empty contents: #{OL(contents)}\"\r\n\r\n\t# --- nearley's CoffeeScript processing doesn't play well\r\n\t#     with TAB characters, even though CoffeeScript allows them\r\n\tcontents = untabify(contents)\r\n\r\n\t{type, include} = getOptions hMetaData, {\r\n\t\ttype: undef     # --- undef, 'js' or 'coffee'\r\n\t\tinclude: undef  #     include file(s)\r\n\t\t}\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\t# --- set lUses to an array of included files\r\n\tif isString(include)\r\n\t\tlUses = [include]\r\n\telse if isArray(include)\r\n\t\tlUses = include\r\n\telse\r\n\t\tlUses = []\r\n\r\n\tlParts = []\r\n\tfor path in lUses\r\n\t\tif isNearleyBuiltin(path)\r\n\t\t\tlParts.push \"@builtin \\\"#{path}\\\"\"\r\n\t\telse\r\n\t\t\tlParts.push \"@include \\\"#{path}\\\"\"\r\n\r\n\tif (type == 'coffee')\r\n\t\tlParts.push \"@preprocessor coffee\"\r\n\tlParts.push contents\r\n\tnearleyCode = lParts.join(\"\\n\")\r\n\tif debug\r\n\t\tbarfDebugFile nearleyCode, filePath, 'patched'\r\n\r\n\t# --- Parse the grammar source into an AST\r\n\t#     NOTE: nearlyGrammar is imported\r\n\tnearleyParser.feed(nearleyCode)\r\n\tlResults = nearleyParser.results\r\n\tif (lResults.length == 0)\r\n\t\tcroak \"Bad grammar: #{OL(contents)}\"\r\n\telse if (lResults.length > 1)\r\n\t\tcroak \"Ambiguous grammar: #{OL(contents)}\"\r\n\tlAST = lResults[0]\r\n\tif debug\r\n\t\ttext = JSON.stringify(lAST, null, 3)\r\n\t\tbarfDebugFile text, filePath, 'ast'\r\n\r\n\t# --- Compile the AST into a set of rules\r\n\tgrammarObj = compile(lAST, {})\r\n\r\n\tif (type == 'coffee') || defined(contents.match(/\\@preprocessor\\s+coffee/))\r\n\t\ttry\r\n\t\t\t# --- Generate CoffeeScript code from the rules\r\n\t\t\tcoffeeCode = generate(grammarObj, \"grammar\")\r\n\t\t\tif debug\r\n\t\t\t\tbarfDebugFile coffeeCode, filePath, 'coffee'\r\n\t\t\tjsCode = procCoffee(coffeeCode).code\r\n\t\tcatch err\r\n\t\t\tif defined(filePath)\r\n\t\t\t\tLOG \"ERROR in #{OL(filePath)}: #{err.message}\"\r\n\t\t\telse\r\n\t\t\t\tLOG \"ERROR in string: #{err.message}\"\r\n\telse\r\n\t\t# --- Generate JavaScript code from the rules\r\n\t\tjsCode = generate(grammarObj, \"grammar\")\r\n\r\n\tif debug\r\n\t\tbarfDebugFile jsCode, filePath, 'unfixed'\r\n\tjsCode = fixNearlyJs(jsCode)\r\n\tif defined(filePath)\r\n\t\tjsFilePath = withExt(filePath, '.js')\r\n\telse\r\n\t\tjsFilePath = tempFile {extension: '.js'}\r\n\tbarf jsCode, jsFilePath\r\n#\tcheckJSFile jsFilePath\r\n\treturn {\r\n\t\tcode: jsCode\r\n\t\tlUses\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport procNearleyFile = (filePath, hOptions={}) =>\r\n\r\n\tassert (fileExt(filePath) == '.ne'), \"Not a nearley file\"\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\treturn procNearley contents, hMetaData, filePath, hOptions\r\n"
  ]
}