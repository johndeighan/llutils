{
  "version": 3,
  "file": "fetcher.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\fetcher.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fetcher.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, escapeStr,\r\n\tblockToArray, arrayToBlock, getOptions,\r\n\tassert, croak, isEmpty, nonEmpty,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {\r\n\tindentLevel, indented, undented, splitLine,\r\n\t} from '@jdeighan/llutils/indent'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- extract string => transform string => filter => return\r\n\r\nexport class LineFetcher\r\n\r\n\tconstructor: (@block, hOptions={}) ->\r\n\r\n\t\t{debug: @debug} = getOptions hOptions, {\r\n\t\t\tdebug: false\r\n\t\t\t}\r\n\t\t@curPos = 0\r\n\t\t@buffer = undef\r\n\r\n\t# ..........................................................\r\n\r\n\tEOF: () ->\r\n\r\n\t\tif (@curPos == -1)\r\n\t\t\treturn true\r\n\t\t@fillBuffer()\r\n\t\treturn (@curPos == -1) && notdefined(@buffer)\r\n\r\n\t# ..........................................................\r\n\r\n\tmoreLines: () ->\r\n\r\n\t\treturn defined(@peek())\r\n\r\n\t# ..........................................................\r\n\r\n\ttransform: (str) ->\r\n\r\n\t\treturn str.replaceAll(\"\\r\", \"\")\r\n\r\n\t# ..........................................................\r\n\r\n\tfilter: (str) ->\r\n\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\t# --- extract the next string, advancing @curPos\r\n\t#     transform string and return result\r\n\r\n\textract: () ->\r\n\r\n\t\tassert (@curPos >= 0), \"extract() when EOF\"\r\n\t\tnlPos = @block.indexOf(\"\\n\", @curPos)\r\n\t\tif (nlPos == -1)\r\n\t\t\tstr = @block.substring(@curPos)\r\n\t\t\t@curPos = -1\r\n\t\telse\r\n\t\t\tstr = @block.substring(@curPos, nlPos)\r\n\t\t\t@curPos = nlPos + 1\r\n\t\treturn @transform(str)\r\n\r\n\t# ..........................................................\r\n\r\n\tfillBuffer: () ->\r\n\r\n\t\twhile (@curPos >= 0) && notdefined(@buffer)\r\n\t\t\tstr = @extract()\r\n\t\t\tif @filter(str)\r\n\t\t\t\t@buffer = str\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tpeek: () ->\r\n\r\n\t\tif notdefined(@buffer)\r\n\t\t\t@fillBuffer()\r\n\t\treturn @buffer     # will be undef if at EOF\r\n\r\n\t# ..........................................................\r\n\r\n\tfetch: () ->\r\n\r\n\t\titem = @peek()\r\n\t\t@buffer = undef\r\n\t\treturn item\r\n\r\n\t# ..........................................................\r\n\r\n\tskip: () ->\r\n\r\n\t\t@fetch()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tdbg: (str, block=undef) ->\r\n\r\n\t\tif !@debug then return\r\n\t\tconsole.log str\r\n\t\tif defined(block)\r\n\t\t\tconsole.log block\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tdump: (label='BLOCK') ->\r\n\r\n\t\tDUMP @block, label\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Returns pairs, e.g. [3, 'abc']\r\n\r\nexport class PLLFetcher extends LineFetcher\r\n\r\n\ttransform: (line) ->\r\n\r\n\t\treturn splitLine(line)\r\n\r\n\t# ..........................................................\r\n\r\n\tfilter: ([level, str]) ->\r\n\r\n\t\treturn (level > 0) || nonEmpty(str)\r\n\r\n\t# ..........................................................\r\n\r\n\tpeekLevel: () ->\r\n\r\n\t\tresult = @peek()\r\n\t\tif notdefined(result)\r\n\t\t\treturn -1\r\n\t\treturn result[0]\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: (level) ->\r\n\r\n\t\tlLines = []\r\n\t\twhile (@peekLevel() >= level)\r\n\t\t\t[lvl, str] = @fetch()\r\n\t\t\tlLines.push indented(str, lvl-level)\r\n\t\treturn lLines.join(\"\\n\")\r\n"
  ]
}