{
  "version": 3,
  "file": "ast-walker.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ast-walker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ast-walker.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, listdiff, hasKey, words,\r\n\tassert, croak, dclone, keys, OL, removeKeys,\r\n\tisString, nonEmpty, setsAreEqual,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {extract} from '@jdeighan/llutils/data-extractor'\r\nimport {\r\n\tNodeWalker, stackMatches,\r\n\t} from '@jdeighan/llutils/node-walker'\r\nimport {EnvNodeStack} from '@jdeighan/llutils/env-stack'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport removeExtraASTKeys = (hAST) =>\r\n\r\n\tremoveKeys hAST, words(\r\n\t\t'loc range extra start end',\r\n\t\t'directives comments tokens',\r\n\t\t)\r\n\treturn hAST\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ASTWalker extends NodeWalker\r\n\r\n\tinit: () ->\r\n\r\n\t\t# --- clone AST, remove extra keys\r\n\t\t@hAST = removeExtraASTKeys(dclone(@hAST))\r\n\r\n\t\t@envStack = new EnvNodeStack()\r\n\r\n\t\t@hImports = {}      # --- {<src>: <Set>, ...}\r\n\t\t@importsSet = new Set()\r\n\t\t@exportsSet = new Set()\r\n\t\t@missingSet = new Set()\r\n\t\t@missingFuncSet = new Set()   # missing only if never defined\r\n\t\t                              # at top level\r\n\t\t@usedSet = new Set()\r\n\r\n\t\t@dbgMissingSet = new Set()\r\n\t\t@dbgMissingFuncSet = new Set()\r\n\r\n\t# ..........................................................\r\n\r\n\tgetTopLevelSymbols: () ->\r\n\r\n\t\treturn Array.from(@envStack.topLevelSet)\r\n\r\n\t# ..........................................................\r\n\r\n\tgetSymbols: (type) ->\r\n\r\n\t\tswitch type\r\n\t\t\twhen 'exports'\r\n\t\t\t\treturn Array.from(@exportsSet.values())\r\n\t\t\twhen 'imports'\r\n\t\t\t\treturn Array.from(@importsSet.values())\r\n\t\t\twhen 'detailed-imports'\r\n\t\t\t\th = {}\r\n\t\t\t\tfor lib in keys(@hImports)\r\n\t\t\t\t\th[lib] = Array.from(@hImports[lib])\r\n\t\t\t\treturn h\r\n\t\t\twhen 'missing'\r\n\t\t\t\treturn Array.from(@missingSet.values())\r\n\t\t\twhen 'used'\r\n\t\t\t\treturn Array.from(@usedSet.values())\r\n\t\t\twhen 'unused'\r\n\t\t\t\tsetUnused = @importsSet.difference(@usedSet)\r\n\t\t\t\treturn Array.from(setUnused)\r\n\t\t\twhen 'toplevel'\r\n\t\t\t\treturn Array.from(@envStack.topLevelSet)\r\n\t\t\telse\r\n\t\t\t\tcroak \"getSymbols(): Bad type #{OL(type)}\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddDefined: (name) ->\r\n\r\n\t\t@dbg \"DEFINED: #{OL(name)}\", 1\r\n\t\t@envStack.add name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddUsed: (name) ->\r\n\r\n\t\t@usedSet.add name\r\n\t\tif ! @envStack.inCurEnv(name)\r\n\t\t\t@dbg \"USED: #{OL(name)} - missing\", 1\r\n\t\t\t@missingSet.add name\r\n\t\telse\r\n\t\t\t@dbg \"USED: #{OL(name)}\", 1\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddUsedFunc: (name) ->\r\n\r\n\t\t@usedSet.add name\r\n\t\tif ! @envStack.inCurEnv(name)\r\n\t\t\t@dbg \"USED: #{OL(name)} - missing func\", 1\r\n\t\t\t@missingFuncSet.add name\r\n\t\telse\r\n\t\t\t@dbg \"USED: #{OL(name)}\", 1\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddImport: (src, name) ->\r\n\r\n\t\tassert isString(name), \"Not a string: #{OL(name)}\"\r\n\t\tassert nonEmpty(name), \"Not empty: #{OL(name)}\"\r\n\t\t@importsSet.add name\r\n\t\tif hasKey(@hImports, src)\r\n\t\t\t@hImports[src].add name\r\n\t\telse\r\n\t\t\t@hImports[src] = new Set([name])\r\n\t\t@addDefined name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddExport: (name) ->\r\n\r\n\t\tassert ! @exportsSet.has(name),\r\n\t\t\t\t\"Export already declared: #{OL(name)}\"\r\n\t\t@exportsSet.add name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddMissing: (name) ->\r\n\r\n\t\t@missingSet.add name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddMissingFunc: (name) ->\r\n\r\n\t\t@missingFuncSet.add name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddMissingFunc: (name) ->\r\n\r\n\t\t@missingFuncSet.add name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttraceDetail: (hNode) ->\r\n\r\n\t\tswitch hNode.type\r\n\t\t\twhen 'Identifier'\r\n\t\t\t\treturn hNode.name\r\n\t\t\telse\r\n\t\t\t\treturn undef\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetChildKeys: (hNode) ->\r\n\r\n\t\t{type} = hNode\r\n\t\tif (type == 'AssignmentExpression')\r\n\t\t\treturn ['right','left']\r\n\t\telse\r\n\t\t\treturn super(hNode)\r\n\r\n\t# ..........................................................\r\n\r\n\tdbgChanges: (which, type) ->\r\n\r\n\t\tif !setsAreEqual(@dbgMissingSet, @missingSet)\r\n\t\t\t@dbg \"(lMissing = #{OL([@missingSet...])})\"\r\n\t\t\t@dbgMissingSet.clear()\r\n\t\t\tfor item from @missingSet.values()\r\n\t\t\t\t@dbgMissingSet.add item\r\n\r\n\t\tif !setsAreEqual(@dbgMissingFuncSet, @missingFuncSet)\r\n\t\t\t@dbg \"(lMissingFuncs = #{OL([@missingFuncSet...])})\"\r\n\t\t\t@dbgMissingFuncSet.clear()\r\n\t\t\tfor item from @missingFuncSet.values()\r\n\t\t\t\t@dbgMissingFuncSet.add item\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tend: (hNode) ->\r\n\r\n\t\t{type} = hNode\r\n\t\tswitch type\r\n\r\n\t\t\twhen 'FunctionExpression', 'ArrowFunctionExpression'\r\n\t\t\t\tdebugger\r\n\t\t\t\t@envStack.endEnv()\r\n\r\n\t\t\twhen 'File'\r\n\t\t\t\tfor name from @missingFuncSet\r\n\t\t\t\t\tif ! @envStack.inCurEnv(name)\r\n\t\t\t\t\t\t@dbg \"FINALLY: #{OL(name)} still missing\"\r\n\t\t\t\t\t\t@missingSet.add name\r\n\t\t\t\t@envStack.endEnv()\r\n\r\n\t\t\twhen 'AssignmentExpression'\r\n\t\t\t\t{left, operator, right} = hNode\r\n\t\t\t\tif (left.type == 'Identifier') && left.declaration\r\n\t\t\t\t\t@addDefined left.name\r\n\r\n\t\t@dbgChanges 'END', type\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t#    @level() gives you the level\r\n\t#    @lStack is stack of {key, hNode} to get parents\r\n\r\n\tvisit: (hNode) ->\r\n\r\n\t\tsuper hNode\r\n\t\t{type} = hNode\r\n\t\tswitch type\r\n\r\n\t\t\twhen 'ImportDeclaration'\r\n\t\t\t\t{src, specifiers} = extract(hNode, \"\"\"\r\n\t\t\t\t\timportKind=\"value\"\r\n\t\t\t\t\t!source\r\n\t\t\t\t\t\ttype=\"StringLiteral\"\r\n\t\t\t\t\t\tvalue as src\r\n\t\t\t\t\tspecifiers\r\n\t\t\t\t\t\"\"\")\r\n\r\n\t\t\t\tfor h in specifiers\r\n\t\t\t\t\tassert (h.type == 'ImportSpecifier'), \"Bad\"\r\n\t\t\t\t\tname = h.imported.name\r\n\t\t\t\t\t@addImport src, name\r\n\r\n\t\t\twhen 'ExportNamedDeclaration'\r\n\t\t\t\t{name} = extract(hNode, \"\"\"\r\n\t\t\t\t\texportKind=\"value\"\r\n\t\t\t\t\tdeclaration\r\n\t\t\t\t\t\ttype=\"AssignmentExpression\"\r\n\t\t\t\t\t\tleft.type=\"Identifier\"\r\n\t\t\t\t\t\tleft.name\r\n\t\t\t\t\t\"\"\")\r\n\r\n\t\t\t\t@addExport name\r\n\r\n\t\t\twhen 'AssignmentExpression'\r\n\t\t\t\t{right} = hNode\r\n\t\t\t\tif (right.type == 'Identifier')\r\n\t\t\t\t\t@addUsed right.name\r\n\r\n\t\t\twhen 'BinaryExpression'\r\n\t\t\t\t{left, operator, right} = hNode\r\n\t\t\t\tif (left.type == 'Identifier')\r\n\t\t\t\t\t@addUsed left.name\r\n\t\t\t\tif (right.type == 'Identifier')\r\n\t\t\t\t\t@addUsed right.name\r\n\r\n\t\t\twhen 'CallExpression','NewExpression'\r\n\t\t\t\tdebugger\r\n\t\t\t\th = extract(hNode, \"\"\"\r\n\t\t\t\t\tcallee\r\n\t\t\t\t\t\ttype as calleeType\r\n\t\t\t\t\t\t?name as calleeName\r\n\t\t\t\t\t[arguments as lArgs]\r\n\t\t\t\t\t\ttype\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\"\"\")\r\n\r\n\t\t\t\t{callee, calleeType, calleeName, lArgs} = h\r\n\r\n\t\t\t\tif (calleeType == 'Identifier')\r\n\t\t\t\t\t@addUsedFunc calleeName, true\r\n\t\t\t\telse if (calleeType == 'MemberExpression') \\\r\n\t\t\t\t\t\t&& (callee.object.type == 'Identifier')\r\n\t\t\t\t\t@addUsed callee.object.name\r\n\r\n\t\t\t\tfor {type, name} in lArgs\r\n\t\t\t\t\tif (type == 'Identifier')\r\n\t\t\t\t\t\t@addUsed name\r\n\r\n\t\t\twhen 'FunctionExpression','ArrowFunctionExpression'\r\n\t\t\t\t@envStack.addEnv()\r\n\t\t\t\t@dbg \"ADD ENV\"\r\n\t\t\t\t{params} = hNode\r\n\t\t\t\tif defined(params)\r\n\t\t\t\t\tfor parm in params\r\n\t\t\t\t\t\tif (parm.type == 'Identifier')\r\n\t\t\t\t\t\t\t@addDefined parm.name\r\n\r\n\t\t@dbgChanges 'VISIT', type\r\n"
  ]
}