{
  "version": 3,
  "file": "ast-walker.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ast-walker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ast-walker.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, listdiff, hasKey,\r\n\tassert, croak, DUMP, dclone, keys, OL,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tNodeWalker, stackMatches,\r\n\t} from '@jdeighan/llutils/node-walker'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ASTWalker extends NodeWalker\r\n\r\n\tinit: () ->\r\n\r\n\t\tsuper()\r\n\t\t@hImports = {}    # --- {<src>: [<ident>,...], ...}\r\n\t\t@lExports = []\r\n\t\t@lUsed = []\r\n\r\n\t# ..........................................................\r\n\r\n\taddImport: (src, ident) ->\r\n\r\n\t\tif hasKey(@hImports, src)\r\n\t\t\tassert !@hImports[src].includes(ident),\r\n\t\t\t\t\t\"Import already declared: #{OL(ident)}\"\r\n\t\t\t@hImports[src].push ident\r\n\t\telse\r\n\t\t\t@hImports[src] = [ident]\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddExport: (ident) ->\r\n\r\n\t\tassert !@lExports.includes(ident),\r\n\t\t\t\t\"Export already declared: #{OL(ident)}\"\r\n\t\t@lExports.push ident\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddUsed: (ident) ->\r\n\r\n\t\tassert !@lUsed.includes(ident),\r\n\t\t\t\t\"Used symbol already declared: #{OL(ident)}\"\r\n\t\t@lUsed.push ident\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetNeeded: () ->\r\n\r\n\t\tlNeeded = dclone(@lUsed)\r\n\t\tfor src in keys(@hImports)\r\n\t\t\tlNeeded = listdiff(lNeeded, @hImports[src])\r\n\t\treturn lNeeded\r\n\r\n\t# ..........................................................\r\n\t#    @level() gives you the level\r\n\t#    @lStack is stack of {key, hNode} to get parents\r\n\r\n\tvisit: (type, hNode) ->\r\n\r\n\t\tsuper type, hNode\r\n\t\tswitch type\r\n\t\t\twhen 'Identifier'\r\n\t\t\t\tassert hasKey(hNode, 'name'), \"No name key: #{OL(hNode)}\"\r\n\t\t\t\t{name} = hNode\r\n\r\n\t\t\t\tif @debug\r\n\t\t\t\t\tconsole.log \"Identifier: #{OL(name)}\"\r\n\t\t\t\t\t@dumpStack()\r\n\r\n\t\t\t\tif @stackMatches \"\"\"\r\n\t\t\t\t\t\timported: ImportSpecifier\r\n\t\t\t\t\t\tspecifiers: ImportDeclaration\r\n\t\t\t\t\t\t\"\"\"\r\n\t\t\t\t\tsrc = @lStack.at(-2).hNode.source.value\r\n\t\t\t\t\t@addImport src, name\r\n\r\n\t\t\t\tif @stackMatches \"\"\"\r\n\t\t\t\t\t\tright: AssignmentExpression\r\n\t\t\t\t\t\tdeclaration: ExportNamedDeclaration\r\n\t\t\t\t\t\t\"\"\"\r\n\t\t\t\t\t@addUsed name\r\n\r\n\t\t\t\tif @stackMatches \"\"\"\r\n\t\t\t\t\t\tleft: AssignmentExpression\r\n\t\t\t\t\t\tdeclaration: ExportNamedDeclaration\r\n\t\t\t\t\t\t\"\"\"\r\n\t\t\t\t\t@addExport name\r\n\r\n"
  ]
}