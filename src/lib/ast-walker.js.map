{
  "version": 3,
  "file": "ast-walker.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\ast-walker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# ast-walker.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, listdiff, hasKey,\r\n\tassert, croak, dclone, keys, OL,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {\r\n\tNodeWalker, stackMatches,\r\n\t} from '@jdeighan/llutils/node-walker'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ASTWalker extends NodeWalker\r\n\r\n\tinit: () ->\r\n\r\n\t\tsuper()\r\n\t\t@lEnvironments = [] # --- stack of Set objects\r\n\r\n\t\t@hImports = {}      # --- {<src>: <Set obj>, ...}\r\n\t\t@setExports = new Set()\r\n\t\t@setUsed = new Set()\r\n\r\n\t# ..........................................................\r\n\r\n\tpushEnv: (set) ->\r\n\r\n\t\t@lEnvironments.push set\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tpopEnv: () ->\r\n\r\n\t\treturn @lEnvironments.pop()\r\n\r\n\t# ..........................................................\r\n\r\n\tinEnv: (name) ->\r\n\r\n\t\tfor set in @lEnvironments\r\n\t\t\tif set.has(name)\r\n\t\t\t\treturn true\r\n\t\treturn false\r\n\r\n\t# ..........................................................\r\n\r\n\taddUsed: (name) ->\r\n\r\n\t\tif ! @inEnv(name)\r\n\t\t\t@setUsed.add(name)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddImport: (src, name) ->\r\n\r\n\t\tif hasKey(@hImports, src)\r\n\t\t\t@hImports[src].add name\r\n\t\telse\r\n\t\t\t@hImports[src] = new Set([name])\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddExport: (name) ->\r\n\r\n\t\tassert ! @setExports.has(name),\r\n\t\t\t\t\"Export already declared: #{OL(name)}\"\r\n\t\t@setExports.add name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetMissing: () ->\r\n\r\n\t\tsetMissing = new Set()\r\n\t\tfor val from @setUsed.values()\r\n\t\t\tsetMissing.add val\r\n\t\tfor src in keys(@hImports)\r\n\t\t\tfor val from @hImports[src].values()\r\n\t\t\t\tsetMissing.delete val\r\n\t\treturn setMissing\r\n\r\n\t# ..........................................................\r\n\r\n\tanalyzeExpr: (type, hNode) ->\r\n\r\n\t\t# --- Add all identifiers used in this expression\r\n\t\tswitch type\r\n\t\t\twhen 'AssignmentExpression'\r\n\t\t\t\t{left, operator, right} = hNode\r\n\t\t\t\tif (right.type == 'Identifier')\r\n\t\t\t\t\t@addUsed right.name\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tend: (type, hNode) ->\r\n\r\n\t\tswitch type\r\n\t\t\twhen 'ArrowFunctionExpression'\r\n\t\t\t\t@popEnv()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t#    @level() gives you the level\r\n\t#    @lStack is stack of {key, hNode} to get parents\r\n\r\n\tvisit: (type, hNode) ->\r\n\r\n\t\tsuper type, hNode\r\n\t\tswitch type\r\n\r\n\t\t\twhen 'ImportDeclaration'\r\n\t\t\t\t{importKind, specifiers, source} = hNode\r\n\t\t\t\tif (importKind != 'value')\r\n\t\t\t\t\treturn\r\n\t\t\t\tif (source.type != 'StringLiteral')\r\n\t\t\t\t\treturn\r\n\t\t\t\tsrc = source.value\r\n\t\t\t\tfor spec in specifiers\r\n\t\t\t\t\t{type, imported} = spec\r\n\t\t\t\t\tif (type != 'ImportSpecifier')\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\tif (imported?.type == 'Identifier')\r\n\t\t\t\t\t\t@addImport src, imported.name\r\n\r\n\t\t\twhen 'ExportNamedDeclaration'\r\n\t\t\t\t{exportKind, declaration} = hNode\r\n\t\t\t\tif (exportKind != 'value')\r\n\t\t\t\t\treturn\r\n\t\t\t\tif notdefined(declaration)\r\n\t\t\t\t\treturn\r\n\t\t\t\t{type, left, right} = declaration\r\n\t\t\t\tif (left.type == 'Identifier')\r\n\t\t\t\t\t@addExport left.name\r\n\r\n\t\t\twhen 'ExpressionStatement'\r\n\t\t\t\t{expression} = hNode\r\n\t\t\t\t@analyzeExpr expression.type, expression\r\n\r\n\t\t\twhen 'BinaryExpression'\r\n\t\t\t\t{left, operator, right} = hNode\r\n\t\t\t\tif (left.type == 'Identifier')\r\n\t\t\t\t\t@addUsed left.name\r\n\t\t\t\tif (right.type == 'Identifier')\r\n\t\t\t\t\t@addUsed right.name\r\n\r\n\t\t\twhen 'ArrowFunctionExpression'\r\n\t\t\t\t{params} = hNode\r\n\t\t\t\tset = new Set()\r\n\t\t\t\tif defined(params)\r\n\t\t\t\t\tfor parm in params\r\n\t\t\t\t\t\tif (parm.type == 'Identifier')\r\n\t\t\t\t\t\t\tset.add(parm.name)\r\n\t\t\t\t@pushEnv set\r\n"
  ]
}