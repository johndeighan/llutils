{{
	var ExtractError, assert, context, croak, getObj, mergeKeys, parse__data__1, parse__desc__1, parse__desc__2, parse__expr__1, parse__ident__1, parse__string__1;

	import {
	  undef,
	  defined,
	  notdefined,
	  getOptions,
	  OL,
	  hasKey,
	  keys,
	  isEmpty,
	  isString,
	  isHash,
	  isFunction
	} from '@jdeighan/llutils';

	import {
	  DUMP
	} from '@jdeighan/llutils/dump';

	import {
	  getTracer
	} from '@jdeighan/llutils/tracer';

	import {
	  Context
	} from '@jdeighan/llutils/context';

	context = undef;

	ExtractError = class ExtractError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = "ExtractError";
	  }

	};

	getObj = (lSelectors, optional) => {
	  var i, ident, len, obj;
	  obj = context.current();
	// --- there's at least 1 selector
	  for (i = 0, len = lSelectors.length; i < len; i++) {
	    ident = lSelectors[i];
	    obj = obj[ident];
	    if (notdefined(obj)) {
	      if (optional) {
	        return undef;
	      } else {
	        croak(`Missing key ${OL(ident)}`);
	      }
	    }
	  }
	  return obj;
	};

	croak = (errmsg) => {
	  throw new ExtractError(errmsg);
	};

	assert = (cond, errmsg) => {
	  if (!cond) {
	    throw new ExtractError(errmsg);
	  }
	};

	mergeKeys = (hObj, ...lMore) => {
	  var h, i, j, key, len, len1, ref;
	  assert(isHash(hObj), `hObj not a hash: ${OL(hObj)}`);
	  for (i = 0, len = lMore.length; i < len; i++) {
	    h = lMore[i];
	    if (isEmpty(h)) {
	      continue;
	    }
	    assert(isHash(h), `Not a hash: ${OL(h)}`);
	    ref = keys(h);
	    for (j = 0, len1 = ref.length; j < len1; j++) {
	      key = ref[j];
	      assert(!hasKey(hObj, key), `key ${key} already in hObj`);
	      hObj[key] = h[key];
	    }
	  }
	  return hObj;
	};

	export var extract = (obj, desc, hOptions = {}) => {
	  debugger;
	  var tracer;
	  ({tracer} = getOptions(hOptions, {
	    tracer: 'none'
	  }));
	  assert(isHash(obj), `Not a hash: ${OL(obj)}`);
	  assert(isString(desc), `Not a string: ${OL(desc)}`);
	  context = new Context(obj);
	  return peg$parse(desc, {
	    tracer: getTracer(tracer, desc)
	  });
	};

	// --------------------------------------------------------------
	parse__data__1 = (lDesc) => {
	  return mergeKeys({}, ...lDesc);
	};

	// --------------------------------------------------------------
	parse__desc__1 = (result, h) => {
	  return mergeKeys(result[0] || {}, h);
	};

	// --------------------------------------------------------------
	parse__desc__2 = (result, h) => {
	  return mergeKeys(result[0], h);
	};

	// --------------------------------------------------------------
	parse__expr__1 = (lParen, optional, lSelectors, expect, as, rParen) => {
	  var name, obj, store;
	  assert(!(expect && as), "Can't use 'as' with expected value");
	  if (context.isUndef()) {
	    return [{}, undef];
	  }
	  name = as || lSelectors.at(-1);
	  if (defined(lParen, rParen)) {
	    store = false;
	  } else {
	    assert(notdefined(lParen, rParen), 'Mismatched parens');
	    store = notdefined(expect);
	  }
	  obj = getObj(lSelectors, optional);
	  if (notdefined(obj)) {
	    return [undef, undef];
	  }
	  if (defined(expect)) {
	    assert(obj === expect, `Expected ${OL(expect)}, found ${OL(obj)}`);
	    return [{}, undef];
	  }
	  return [
	    store ? {
	      [name]: obj
	    } : {},
	    isHash(obj) ? obj : undef
	  ];
	};

	// --------------------------------------------------------------
	parse__ident__1 = (str) => {
	  return str;
	};

	// --------------------------------------------------------------
	parse__string__1 = (lChars) => {
	  return lChars.join('');
	};
}}

data

	= lDesc: desc |1.., SEP| "\n"*
		{ return parse__data__1(lDesc); }

desc

	= result: expr & { context.add(result[1]) ;return true;} h: ( INDENT @data UNDENT) ? & { context.pop() ;return true;}
		{ return parse__desc__1(result, h); }

	/ '[' _ result: expr _ ']' & { context.add(result[1]) ;return true;} h: ( INDENT @data UNDENT) ? & { context.pop() ;return true;}
		{ return parse__desc__2(result, h); }

expr

	= lParen: "("? optional: ("?" _)? _ lSelectors: ident|1.., "."| expect: (_ "=" _ @string)? as: (_ "as" _ @ident)? rParen: ")"?
		{ return parse__expr__1(lParen, optional, lSelectors, expect, as, rParen); }

ident

	= str: $ ([A-Za-z_][A-Za-z0-9_]*)
		{ return parse__ident__1(str); }

string

	= '"' lChars:[^"]* '"'
		{ return parse__string__1(lChars); }

_

	= " "*