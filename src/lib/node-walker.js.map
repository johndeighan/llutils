{
  "version": 3,
  "file": "node-walker.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\node-walker.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# node-walker.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, getOptions,\r\n\tassert, croak, dclone, range, rev_range, centered, leftAligned,\r\n\tisString, isArray, isHash, isEmpty,\r\n\thasKey, keys, untabify,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {indented, undented} from '@jdeighan/llutils/indent'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stackMatches = (lStack, str) =>\r\n\r\n\tlPath = parsePath(str)\r\n\tif (lStack.length < lPath.length)\r\n\t\treturn false\r\n\tpos = lStack.length\r\n\tfor i from range(lPath.length)\r\n\t\tpos -= 1\r\n\t\titem = lStack[pos]\r\n\t\tif !itemMatches(item, lPath[i])\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parsePath = (str) =>\r\n\r\n\tassert isString(str), \"Not a string: #{OL(str)}\"\r\n\tsplitter = (substr) =>\r\n\t\t[key, type] = substr.split(':')\r\n\t\tif isEmpty(key) then key = ''\r\n\t\tif isEmpty(type) then type = ''\r\n\t\treturn [key.trim(), type.trim()]\r\n\tre = /[\\r\\n\\/]+/\r\n\treturn str.split(re).map(splitter)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport itemMatches = (hStackItem, [key, type]) ->\r\n\r\n\tif key && (hStackItem.key != key.trim())\r\n\t\treturn false\r\n\tif type && (hStackItem.hNode.type != type.trim())\r\n\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- anything named 'item'\r\n#     can always be a node or array of nodes\r\n\r\nexport class NodeWalker\r\n\r\n\twalk: (hAST, hOptions={}) ->\r\n\r\n\t\tassert @isNode(hAST), \"Not a node: #{OL(hAST)}\"\r\n\t\t@hAST = hAST\r\n\r\n\t\t{\r\n\t\t\ttrace: @trace,\r\n\t\t\tdebug: @debug,\r\n\t\t\thDumpNode: @hDumpNode,\r\n\t\t\t} = getOptions hOptions, {\r\n\t\t\t\ttrace: false\r\n\t\t\t\tdebug: false\r\n\t\t\t\thDumpNode: {}\r\n\t\t\t\t}\r\n\t\tif @debug\r\n\t\t\t@trace = true    # always trace when debugging\r\n\r\n\t\t@init()   # --- init() can modify the AST\r\n\r\n\t\t@lStack = []   # --- Array of {key, hNode}\r\n\t\t@lTrace = []\r\n\t\t@visit @hAST\r\n\t\t@visitChildren @hAST\r\n\t\t@end @hAST\r\n\t\treturn this    # allow chaining\r\n\r\n\t# ..........................................................\r\n\r\n\tdumpStack: () ->\r\n\r\n\t\tconsole.log centered('STACK', 40, 'char=-')\r\n\t\tpos = @lStack.length\r\n\t\tfor i from range(pos)\r\n\t\t\tpos -= 1\r\n\t\t\titem = @lStack[pos]\r\n\t\t\tconsole.log \"{key: #{leftAligned(item.key, 12)}, hNode: {type: #{item.hNode.type}}}\"\r\n\t\tconsole.log '-'.repeat(40)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tstackMatches: (str) ->\r\n\r\n\t\treturn stackMatches @lStack, str\r\n\r\n\t# ..........................................................\r\n\r\n\tisNode: (item) ->\r\n\r\n\t\treturn isHash(item) && hasKey(item, 'type')\r\n\r\n\t# ..........................................................\r\n\r\n\tisArrayOfNodes: (item) ->\r\n\r\n\t\tif ! isArray(item)\r\n\t\t\treturn false\r\n\t\tfor x in item\r\n\t\t\tif !@isNode(x)\r\n\t\t\t\treturn false\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\r\n\tlevel: () ->\r\n\r\n\t\treturn @lStack.length\r\n\r\n\t# ..........................................................\r\n\r\n\tdbg: (str, addLevel=0) ->\r\n\r\n\t\tif @trace\r\n\t\t\tlevel = @level() + addLevel\r\n\t\t\tstr = '  '.repeat(level) + str\r\n\t\t\tconsole.log str\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- By default, children are visited in normal order\r\n\t#     to change, override this\r\n\r\n\tgetChildKeys: (hNode) ->\r\n\r\n\t\treturn keys(hNode)\r\n\r\n\t# ..........................................................\r\n\r\n\tvisitChildren: (hNode) ->\r\n\r\n\t\tfor key in @getChildKeys(hNode)\r\n\t\t\tvalue = hNode[key]\r\n\t\t\t@lStack.push {key, hNode}\r\n\t\t\tif @isNode(value)\r\n\t\t\t\t@visit value\r\n\t\t\t\t@visitChildren value\r\n\t\t\t\t@end value\r\n\t\t\telse if @isArrayOfNodes(value)\r\n\t\t\t\tfor h in value\r\n\t\t\t\t\t@visit h\r\n\t\t\t\t\t@visitChildren h\r\n\t\t\t\t\t@end h\r\n\t\t\t@lStack.pop()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- Override these\r\n\r\n\tinit: (hAST=undef) ->\r\n\t\t# --- ADVICE: if you modify the AST,\r\n\t\t#             pass in a cloned version\r\n\r\n\t\tif defined(hAST)\r\n\t\t\t@hAST = hAST\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- override to add details to a traced node\r\n\r\n\ttraceDetail: (hNode) ->\r\n\r\n\t\treturn undef\r\n\r\n\t# ..........................................................\r\n\r\n\tvisit: (hNode) ->\r\n\r\n\t\t{type} = hNode\r\n\t\tif details = @traceDetail(hNode)\r\n\t\t\t@dbg \"VISIT #{@stringifyNode(hNode)} #{details}\"\r\n\t\telse\r\n\t\t\t@dbg \"VISIT #{@stringifyNode(hNode)}\"\r\n\t\tif @hDumpNode[type]\r\n\t\t\tDUMP hNode, type\r\n\t\tstr = @stringifyNode(hNode)\r\n\t\t@lTrace.push indented(str, @level())\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tstringifyNode: (hNode) ->\r\n\r\n\t\tif (@lStack.length == 0)\r\n\t\t\treturn hNode.type\r\n\t\telse\r\n\t\t\t{key} = @lStack.at(-1)\r\n\t\t\treturn \"#{key}: #{hNode.type}\"\r\n\r\n\t# ..........................................................\r\n\r\n\tend: (hNode) ->\r\n\r\n\t\t@dbg indented(\"END   #{hNode.type}\")\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetTrace: () ->\r\n\r\n\t\treturn @lTrace.join(\"\\n\")\r\n"
  ]
}