{
  "version": 3,
  "file": "digraph.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\digraph.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# digraph.coffee\r\n\r\nimport Graph from 'graphology'\r\nimport {\r\n\thasCycle, topologicalSort,\r\n\t} from 'graphology-dag';\r\n\r\nimport {\r\n\tundef, defined, notdefined, isEmpty, nonEmpty,\r\n\tkeys, hasKey, OL, LOG, identityFunc,\r\n\tisString, isArray, isHash,\r\n\tassert, croak, getOptions,\r\n\t} from '@jdeighan/llutils'\r\nimport {execCmd} from '@jdeighan/llutils/exec-utils'\r\nimport {fileExt, withExt, barf} from '@jdeighan/llutils/fs'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class DiGraph\r\n\r\n\tconstructor: (hOptions={}) ->\r\n\r\n\t\t{\r\n\t\t\tnormalize: @normalize,\r\n\t\t\tfilterDep: @filterDep,\r\n\t\t\tdebug: @debug,\r\n\t\t\thStyles: @hStyles\r\n\t\t\t} = getOptions hOptions, {\r\n\t\t\t\tnormalize: identityFunc\r\n\t\t\t\tfilterDep: ((dep) => return true)\r\n\t\t\t\tdebug: false\r\n\t\t\t\thStyles: {}\r\n\t\t\t\t}\r\n\r\n\t\t# --- convert all styles to strings\r\n\t\tfor type in keys(@hStyles)\r\n\t\t\tstyle = @hStyles[type]\r\n\t\t\tif isHash(style)\r\n\t\t\t\t@hStyles[type] = @attrStr style\r\n\r\n\t\t@graph = new Graph({\r\n\t\t\tallowSelfLoops: false\r\n\t\t\tmulti: false\r\n\t\t\ttype: 'directed'\r\n\t\t\t})\r\n\r\n\t# ..........................................................\r\n\r\n\tattrStr: (h) ->\r\n\r\n\t\tlParts = keys(h).map((key) => \"#{key}=#{h[key]}\")\r\n\t\treturn \" [#{lParts.join(', ')}]\"\r\n\r\n\t# ..........................................................\r\n\t# --- filePath is the file that should be output,\r\n\t#        e.g. \"myfile.svg\" or \"myfile.png\"\r\n\t#     the file extension is the type of image file desired\r\n\r\n\trender: (filePath, layout=undef) ->\r\n\r\n\t\ttype = fileExt(filePath).substring(1)\r\n\t\tLOG \"type = #{OL(type)}\"\r\n\t\tif defined(layout)\r\n\t\t\tLOG \"layout = #{OL(layout)}\"\r\n\t\tdotPath = withExt(filePath, '.dot')\r\n\t\t@barfDotProgram dotPath\r\n\t\tif defined(layout)\r\n\t\t\texecCmd \"dot -T#{type} -K#{layout} #{dotPath} > #{filePath}\"\r\n\t\telse\r\n\t\t\texecCmd \"dot -T#{type} #{dotPath} > #{filePath}\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (item, lDeps=[], hAttr={}) ->\r\n\t\t# --- 2nd parameter may be a simple string\r\n\t\t#     if there's only one dependency\r\n\r\n\t\tnode = @normalize(item, 'key')\r\n\t\tassert isString(node), \"node not a string: #{OL(node)}\"\r\n\t\tif isString(lDeps)\r\n\t\t\tlDeps = [lDeps]\r\n\t\telse\r\n\t\t\tassert isArray(lDeps), \"not an array: #{OL(lDeps)}\"\r\n\r\n\t\t@graph.mergeNode node, hAttr\r\n\t\tfor dep in lDeps\r\n\t\t\tif @filterDep(dep)\r\n\t\t\t\tndep = @normalize(dep, 'dep')\r\n\t\t\t\t@graph.mergeNode ndep, {nodeType: 'lib'}\r\n\t\t\t\t@graph.mergeEdge node, ndep\r\n\r\n\t\tif @debug\r\n\t\t\t@dump()\r\n\t\treturn this    # allow chaining\r\n\r\n\t# ..........................................................\r\n\r\n\thasCycle: () ->\r\n\r\n\t\treturn hasCycle(@graph)\r\n\r\n\t# ..........................................................\r\n\r\n\tnumNodes: () ->\r\n\r\n\t\treturn @graph.order\r\n\r\n\t# ..........................................................\r\n\r\n\tnumEdges: () ->\r\n\r\n\t\treturn @graph.size\r\n\r\n\t# ..........................................................\r\n\t# --- callback gets (node, nodeType, lDeps)\r\n\r\n\tforEachNode: (func, hOptions={}) ->\r\n\r\n\t\t{sortKeys, sortDeps, noTrans} =\r\n\t\t\tgetOptions hOptions, {\r\n\t\t\t\tsortKeys: true\r\n\t\t\t\tsortDeps: false\r\n\t\t\t\tnoTrans: false   # --- else only non-transitive\r\n\t\t\t\t}\r\n\r\n\t\tlNodes = @graph.nodes()\r\n\t\tif sortKeys\r\n\t\t\tlNodes.sort()\r\n\r\n\t\tfor node in lNodes\r\n\t\t\tif noTrans\r\n\t\t\t\tlDeps = @follows(node)\r\n\t\t\telse\r\n\t\t\t\tlDeps = @getOutNodes(node)\r\n\t\t\tif sortDeps\r\n\t\t\t\tlDeps.sort()\r\n\t\t\tfunc node, @graph.getNodeAttributes(node), lDeps\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tdump: (hOptions={}) ->\r\n\r\n\t\t{maxWidth} = getOptions hOptions, {\r\n\t\t\tmaxWidth: 64\r\n\t\t\t}\r\n\r\n\t\tLOG \"DEPENDENCIES:\"\r\n\t\t@forEachNode ((node, hAttr, lDeps) =>\r\n\t\t\tnodeType = hAttr.nodeType\r\n\t\t\tif isEmpty(lDeps)\r\n\t\t\t\tLOG \"\\t#{node}: {}\"\r\n\t\t\telse\r\n\t\t\t\ttotLen = 0\r\n\t\t\t\tfor dep in lDeps\r\n\t\t\t\t\ttotLen += dep.length\r\n\t\t\t\tif (totLen < maxWidth)\r\n\t\t\t\t\tLOG \"\\t#{node} { #{lDeps.join(', ')} }\"\r\n\t\t\t\telse\r\n\t\t\t\t\tLOG \"\\t#{node} \\n\\t#{lDeps.join('\\n\\t')}\\n\"\r\n\t\t\t)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBuildOrder: (hOptions={}) ->\r\n\r\n\t\t{noTrans} = getOptions hOptions, {\r\n\t\t\tnoTrans: false\r\n\t\t\t}\r\n\r\n\t\tif noTrans\r\n\t\t\tlDeps = []\r\n\t\t\t@forEachNode ((node, hAttr) =>\r\n\t\t\t\tnodeType = hAttr.nodeType\r\n\t\t\t\tlDeps.push node\r\n\t\t\t\t), 'notrans'\r\n\t\t\treturn lDeps\r\n\t\telse\r\n\t\t\t# --- returns an array\r\n\t\t\treturn topologicalSort(@graph).reverse()\r\n\r\n\t# ..........................................................\r\n\r\n\tdotProgram: () ->\r\n\r\n\t\tlLines = [\"digraph {\"]\r\n\t\t@forEachNode ((node, hAttr) =>\r\n\t\t\t{nodeType} = hAttr\r\n\t\t\tstyle = @hStyles[nodeType]\r\n\t\t\tif nonEmpty(style)\r\n\t\t\t\tlLines.push \"\\t\\\"#{node}\\\"#{style}\"\r\n\t\t\tlFollows = @follows(node)\r\n\t\t\tif (lFollows.length == 1)\r\n\t\t\t\tlLines.push \"\\t\\\"#{node}\\\" -> \\\"#{lFollows[0]}\\\"\"\r\n\t\t\telse if (lFollows.length > 1)\r\n\t\t\t\tfor node2 in lFollows\r\n\t\t\t\t\tlLines.push \"\\t\\\"#{node}\\\" -> \\\"#{node2}\\\"\"\r\n\t\t\t)\r\n\t\tlLines.push \"\\t}\"\r\n\t\treturn lLines.join(\"\\n\")\r\n\r\n\t# ..........................................................\r\n\r\n\tbarfDotProgram: (filePath) ->\r\n\r\n\t\tassert defined(filePath), \"Missing filePath\"\r\n\t\tprogram = @dotProgram()\r\n\t\tbarf program, filePath\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tisLeafNode: (node) ->\r\n\r\n\t\treturn (@graph.outDegree(node) == 0)\r\n\r\n\t# ..........................................................\r\n\r\n\tgetOutNodes: (node) ->\r\n\r\n\t\treturn @graph.mapOutEdges(node,\r\n\t\t\t(edge, attr, src, dest) =>\r\n\t\t\t\treturn dest\r\n\t\t\t\t)\r\n\r\n\t# ..........................................................\r\n\r\n\tfollows: (node) ->\r\n\r\n\t\tlFullPaths = @getFullPathsFor(node)\r\n\t\tsetFollows = new Set()\r\n\t\tfor lPath in lFullPaths\r\n\t\t\tsetFollows.add lPath[1]\r\n\t\tfor lPath in lFullPaths\r\n\t\t\tpos = 2\r\n\t\t\twhile (pos < lPath.length)\r\n\t\t\t\tsetFollows.delete lPath[pos]\r\n\t\t\t\tpos += 1\r\n\t\treturn Array.from setFollows\r\n\r\n\t# ..........................................................\r\n\r\n\tgetFullPathsFor: (node) ->\r\n\r\n\t\tassert @graph.hasNode(node), \"Not a node: #{OL(node)}\"\r\n\r\n\t\tlDeps = @getOutNodes(node)\r\n\t\tlPathList = lDeps.map((s) => [node, s])\r\n\t\t@extendPaths lPathList\r\n\t\treturn lPathList\r\n\r\n\t# ..........................................................\r\n\r\n\textendPaths: (lPathList) ->\r\n\r\n\t\tpos = 0\r\n\t\twhile (pos < lPathList.length)\r\n\t\t\tlPath = lPathList[pos]\r\n\t\t\tend = lPath.at(-1)\r\n\t\t\tif @isLeafNode(end)\r\n\t\t\t\tpos += 1\r\n\t\t\telse\r\n\t\t\t\tlDeps = @getOutNodes(end)\r\n\t\t\t\tlExtended = lDeps.map((node) => lPath.concat([node]))\r\n\t\t\t\tlPathList.splice pos, 1, lExtended...\r\n\t\t\t\tpos += lDeps.length\r\n\t\treturn\r\n"
  ]
}