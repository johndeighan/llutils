{
  "version": 3,
  "file": "section-map.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\section-map.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# section-map.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, isEmpty, nonEmpty,\r\n\tisString, isHash, isArray, isFunction, toBlock,\r\n\tassert, croak,\r\n\t} from '@jdeighan/llutils'\r\n\r\nimport {Section} from '@jdeighan/llutils/section'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- NOTE: section names begin with a lower case letter\r\n#           set names begin with an upper case letter\r\n\r\nexport class SectionMap\r\n\r\n\tconstructor: (tree, @hReplacers={}) ->\r\n\t\t# --- tree is a tree of section/set names\r\n\t\t# --- hReplacers are callbacks that are called\r\n\t\t#        when a set or section is processed\r\n\t\t#        should be <name> -> <function>\r\n\t\t#     <name> can be a section name or a set name\r\n\t\t#     <function> should be <block> -> <block>\r\n\r\n\t\t@checkTree tree\r\n\t\t@checkReplacers @hReplacers\r\n\r\n\t\t@hSections = {}            # --- {section name: Section Object}\r\n\t\t@hSets = {ALL: @lFullTree} # --- {set name: array of parts}\r\n\r\n\t\t@init @lFullTree\r\n\r\n\t# ..........................................................\r\n\r\n\tdump: () ->\r\n\r\n\t\tconsole.log JSON.stringify(@hSections, null, 3)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tinit: (lTree) ->\r\n\r\n\t\tassert isArray(lTree), \"not an array\"\r\n\t\tassert nonEmpty(lTree), \"empty array\"\r\n\r\n\t\tfirstItem = lTree[0]\r\n\t\tif isSetName(firstItem)\r\n\t\t\tlTree = lTree.slice(1)\r\n\t\t\t@mkSet firstItem, lTree\r\n\r\n\t\tfor item in lTree\r\n\t\t\tif isArray(item)\r\n\t\t\t\t@init item\r\n\t\t\telse if isSectionName(item)\r\n\t\t\t\t@mkSection item\r\n\t\t\telse\r\n\t\t\t\tassert isString(item), \"Bad item in tree: #{OL(item)}\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tsetReplacer: (name, func) ->\r\n\r\n\t\t@section('name').converter = func\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tmkSet: (name, lTree) ->\r\n\r\n\t\tassert isArray(lTree), \"tree is not an array\"\r\n\t\tassert nonEmpty(lTree), \"set without sections\"\r\n\t\tassert notdefined(@hSets[name]), \"set #{OL(name)} already exists\"\r\n\t\t@hSets[name] = lTree\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tmkSection: (name) ->\r\n\r\n\t\tassert notdefined(@hSections[name]), \"duplicate section name\"\r\n\t\t@hSections[name] = new Section(name, @hReplacers[name])\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: (desc='ALL') ->\r\n\t\t# ..........................................................\r\n\t\t# --- desc can be:\r\n\t\t#        a section name\r\n\t\t#        a set name\r\n\t\t#        an array of section or set names or literal strings\r\n\t\t#     i.e. it should NOT contain sub-arrays\r\n\r\n\t\tif ! isString(desc) && ! isArray(desc, 'allStrings')\r\n\t\t\tcroak \"Bad desc: #{OL(desc)}\"\r\n\r\n\t\tif isSectionName(desc)\r\n\t\t\t# --- a section's getBlock() applies any replacer\r\n\t\t\tblock = @section(desc).getBlock()\r\n\t\telse if isSetName(desc)\r\n\t\t\tdebugger\r\n\t\t\tlBlocks = for item in @hSets[desc]\r\n\t\t\t\tif isArray(item)\r\n\t\t\t\t\t@getBlock item[0]\r\n\t\t\t\telse if isString(item)\r\n\t\t\t\t\t@getBlock item\r\n\t\t\t\telse\r\n\t\t\t\t\tcroak \"Item in set #{desc} is not a string or array\"\r\n\r\n\t\t\t# --- Remove undef blocks\r\n\t\t\tlBlocks = lBlocks.filter((block) => defined(block))\r\n\r\n\t\t\tblock = toBlock(lBlocks)\r\n\t\t\treplacer = @hReplacers[desc]\r\n\t\t\tif defined(replacer)\r\n\t\t\t\tblock = replacer(block)\r\n\t\telse if isString(desc)\r\n\t\t\t# --- a literal string\r\n\t\t\tblock = desc\r\n\t\telse if isArray(desc)\r\n\t\t\tlBlocks = for item in desc\r\n\t\t\t\t@getBlock(item)\r\n\t\t\tblock = toBlock(lBlocks)\r\n\t\telse\r\n\t\t\tcroak \"Bad arg: #{OL(desc)}\"\r\n\r\n\t\treturn block\r\n\r\n\t# ..........................................................\r\n\t# --- does NOT call any replacers, and skips literal strings\r\n\t#     so only useful for isEmpty() and nonEmpty()\r\n\r\n\tallSections: (desc=undef) ->\r\n\r\n\t\tif notdefined(desc)\r\n\t\t\tdesc = @lFullTree\r\n\r\n\t\tif isSectionName(desc)\r\n\t\t\tyield @section(desc)\r\n\t\telse if isSetName(desc)\r\n\t\t\tfor name in @hSets[desc]\r\n\t\t\t\tyield from @allSections(name)\r\n\t\telse if isArray(desc)\r\n\t\t\tfor item in desc\r\n\t\t\t\tyield from @allSections(item)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tisEmpty: (desc=undef) ->\r\n\r\n\t\tfor sect from @allSections(desc)\r\n\t\t\tif sect.nonEmpty()\r\n\t\t\t\treturn false\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\r\n\tnonEmpty: (desc=undef) ->\r\n\r\n\t\tfor sect from @allSections(desc)\r\n\t\t\tif sect.nonEmpty()\r\n\t\t\t\treturn true\r\n\t\treturn false\r\n\r\n\t# ..........................................................\r\n\r\n\tsection: (name) ->\r\n\r\n\t\tsect = @hSections[name]\r\n\t\tassert defined(sect), \"No section named #{OL(name)}\"\r\n\t\treturn sect\r\n\r\n\t# ..........................................................\r\n\r\n\tfirstSection: (name) ->\r\n\r\n\t\tassert isSetName(name), \"bad set name #{OL(name)}\"\r\n\t\tlSubTree = @hSets[name]\r\n\t\tassert defined(lSubTree), \"no such set #{OL(name)}\"\r\n\t\treturn @section(lSubTree[0])\r\n\r\n\t# ..........................................................\r\n\r\n\tlastSection: (name) ->\r\n\r\n\t\tassert isSetName(name), \"bad set name #{OL(name)}\"\r\n\t\tlSubTree = @hSets[name]\r\n\t\tassert defined(lSubTree), \"no such set #{OL(name)}\"\r\n\t\treturn @section(lSubTree[lSubTree.length - 1])\r\n\r\n\t# ..........................................................\r\n\r\n\tcheckTree: (tree) ->\r\n\r\n\t\tif isString(tree)\r\n\t\t\tassert isTAML(tree), \"not TAML\"\r\n\t\t\t@lFullTree = fromTAML(tree)\r\n\t\telse\r\n\t\t\t@lFullTree = tree\r\n\r\n\t\tassert isArray(@lFullTree), \"not an array\"\r\n\t\tassert nonEmpty(@lFullTree), \"tree is empty\"\r\n\t\tif isSetName(@lFullTree[0])\r\n\t\t\tcroak \"tree cannot begin with a set name\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tcheckReplacers: (h) ->\r\n\r\n\t\tassert isHash(h), \"replacers is not a hash\"\r\n\t\tfor key,func of h\r\n\t\t\tassert isSetName(key) || isSectionName(key), \"bad replacer key\"\r\n\t\t\tassert isFunction(func),\r\n\t\t\t\t\t\"replacer for #{OL(key)} is not a function\"\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nisSectionName = (name) =>\r\n\r\n\treturn isString(name) && name.match(/^[a-z][a-z0-9_-]*/)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nisSetName = (name) =>\r\n\r\n\treturn isString(name) && name.match(/^[A-Z][a-z0-9_-]*/)\r\n\r\n"
  ]
}