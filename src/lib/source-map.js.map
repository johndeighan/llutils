{
  "version": 3,
  "file": "source-map.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\source-map.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# source-map.coffee\r\n\r\nimport {readFileSync} from 'node:fs'\r\nimport {\r\n\tSourceMapGenerator, SourceMapConsumer,\r\n\t} from 'source-map-js'\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, OL,\r\n\tisInteger, isHash, isArray,\r\n\tassert, croak,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tisFile, mkpath, parsePath, fileExt, slurp, barf,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {DUMP, BOX} from '@jdeighan/llutils/dump'\r\n\r\n# --- cache to hold previously fetched file contents\r\nhSourceMaps = {}    # --- { filepath => hMap, ... }\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getMap = (mapFilePath) =>\r\n\t# --- returns a hash\r\n\r\n\t# --- get from cache if available\r\n\tif hSourceMaps.hasOwnProperty(mapFilePath)\r\n\t\treturn hSourceMaps[mapFilePath]\r\n\telse\r\n\t\trawMap = readFileSync mapFilePath, 'utf8'\r\n\t\treturn hSourceMaps[mapFilePath] = JSON.parse(rawMap)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Valid keys:\r\n#\r\n#   - version: Which version of the source map spec this map is following.\r\n#   - sources: An array of URLs to the original source files.\r\n#   - names: An array of identifiers which can be referrenced by individual mappings.\r\n#   - sourceRoot: Optional. The URL root from which all sources are relative.\r\n#   - sourcesContent: Optional. An array of contents of the original source files.\r\n#   - mappings: A string of base64 VLQs which contain the actual mappings.\r\n#   - file: Optional. The generated file this source map is associated with.\r\n\r\nexport dumpMap = (hMap) =>\r\n\r\n\thJson = {\r\n\t\tversion: hMap.version\r\n\t\tsources: hMap.sources\r\n\t\tnames: hMap.names\r\n\t\tsourceRoot: hMap.sourceRoot\r\n\t\tsourcesContent: defined(hMap.sourcesContent)\r\n\t\tmappings: defined(hMap.mappings)\r\n\t\tfile: hMap.file\r\n\t\t}\r\n\tconsole.log JSON.stringify(hJson, null, 3)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mapLineNum = (jsPath, line, column=0, hOptions={}) =>\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tif debug\r\n\t\tconsole.log \"DEBUGGING mapLineNum(#{line},#{column})\"\r\n\t\tconsole.log \"   #{jsPath}\"\r\n\tassert isInteger(line), \"line #{line} not an integer\"\r\n\ttry\r\n\t\thMapped = mapSourcePos jsPath, line, column, {debug}\r\n\t\treturn hMapped.line\r\n\tcatch err\r\n\t\tif debug\r\n\t\t\tconsole.log \"mapSourcePos failed, returning original line\"\r\n\t\t\tconsole.log err.message\r\n\t\treturn line\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mapSourcePos = (jsPath, line, column, hOptions={}) =>\r\n\t# --- Valid options:\r\n\t#        debug\r\n\t# --- Can map only if:\r\n\t#        1. ext is .js\r\n\t#        2. <jsPath>.map exists\r\n\t#\r\n\t#     returns {source, line, column, name}\r\n\t#     or undef if no map file, or unable to map\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tif debug\r\n\t\tconsole.log \"DEBUGGING mapSourcePos(#{line},#{column})\"\r\n\t\tconsole.log \"   #{jsPath}\"\r\n\r\n\tjsPath = mkpath jsPath\r\n\tmapFilePath = jsPath + '.map'\r\n\tif !isFile(mapFilePath)\r\n\t\tif debug\r\n\t\t\tconsole.log \"Map file missing, returning undef\"\r\n\t\treturn undef\r\n\r\n\tassert isFile(jsPath), \"no such file #{jsPath}\"\r\n\tassert (fileExt(jsPath) == '.js'), \"Not a JS file\"\r\n\tassert isInteger(line, {min: 0}), \"line #{line} not an integer\"\r\n\tassert isInteger(column, {min: 0}), \"column #{column} not an integer\"\r\n\r\n\t# --- get from cache if available\r\n\thMap = getMap mapFilePath\r\n\tassert defined(hMap), \"getMap() returned undef\"\r\n\tif debug\r\n\t\tdumpMap hMap\r\n\r\n\tconsumer = new SourceMapConsumer(hMap)\r\n\thMapped = consumer.originalPositionFor({line, column})\r\n\r\n\t# --- hMapped is {source, line, column, name}\r\n\tassert isHash(hMapped), \"not a hash: #{OL(hMapped)}\"\r\n\tif debug\r\n\t\torgStr = \"#{jsPath} #{line}:#{column}\"\r\n\t\tnewStr = \"#{hMapped.source} #{hMapped.line}:#{hMapped.column}\"\r\n\t\tconsole.log \"#{orgStr} ==> #{newStr}\"\r\n\treturn hMapped\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class SourceMap extends SourceMapGenerator\r\n\r\n\tconstructor: (inFilePath, outFilePath) ->\r\n\r\n\t\tsuper {file: outFilePath}\r\n\t\t@inFilePath = inFilePath\r\n\t\t@outFilePath = outFilePath\r\n\r\n\t# ..........................................................\r\n\r\n\tsetSource: (inputFilePath) ->\r\n\r\n\t\t@inFilePath = inFilePath\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetPos: (desc) ->\r\n\r\n\t\tassert isArray(desc) || isInteger(desc), \"Bad desc: #{OL(desc)}\"\r\n\t\tif isArray(desc)\r\n\t\t\tassert (desc.length == 2), \"Bad desc: #{OL(desc)}\"\r\n\t\t\treturn {\r\n\t\t\t\tline: desc[0]\r\n\t\t\t\tcolumn: desc[1]\r\n\t\t\t\t}\r\n\t\telse\r\n\t\t\treturn {\r\n\t\t\t\tline: 1\r\n\t\t\t\tcolumn: desc\r\n\t\t\t\t}\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (srcPos, destPos, name=undef) ->\r\n\r\n\t\t@addMapping({\r\n\t\t\tsource: @inFilePath,\r\n\t\t\toriginal: @getPos(srcPos)\r\n\t\t\tgenerated: @getPos(destPos)\r\n\t\t\tname\r\n\t\t\t})\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tbarf: () ->\r\n\r\n\t\ttext = @toString()\r\n\t\tbarf @toString, @outFilePath + '.map'\r\n\r\n\t# ..........................................................\r\n\t# --- useful for testing\r\n\r\n\tmapPos: (pos) ->\r\n\r\n\t\thMap = JSON.parse(@toString())\r\n\t\tconsumer = new SourceMapConsumer(hMap)\r\n\t\treturn consumer.originalPositionFor(@getPos(pos))\r\n"
  ]
}