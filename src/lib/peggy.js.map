{
  "version": 3,
  "file": "peggy.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\peggy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# peggy.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport {pathToFileURL} from 'node:url'\r\nimport peggy from 'peggy'\r\n\r\nimport {\r\n\tundef, defined, notdefined, gen2block, hasKey, isEmpty, nonEmpty,\r\n\tisString, isHash, isArray, isFunction, isInteger,\r\n\tblockToArray, arrayToBlock, escapeStr, getOptions,\r\n\tassert, croak, OL, js2uri, ML, keys, pass, eq,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {\r\n\tindentLevel, indented, undented,\r\n\t} from '@jdeighan/llutils/indent'\r\nimport {\r\n\treadTextFile, barf, fileExt, withExt, isFile, myself,\r\n\tnormalize, mkpath, fileDir,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {brew} from '@jdeighan/llutils/coffee'\r\nimport {PLLFetcher} from '@jdeighan/llutils/fetcher'\r\nimport {SectionMap} from '@jdeighan/llutils/section-map'\r\nimport {getTracer} from '@jdeighan/llutils/tracer'\r\n\r\nassert isFunction(brew), \"brew is not a function: #{OL(brew)}\"\r\n\r\n# --- code converter is applied to each code block in a peggy file\r\n#     using type: 'javascript' allows you to use indentation syntax\r\n#        for everything but the code blocks\r\n\r\nhCodeConverters = {\r\n\tcoffee: brew\r\n\tjavascript: (js) => return {js, sourceMap: undef}\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC !!!\r\n\r\nexport getParser = (filePath, hOptions={}) =>\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tfullPath = mkpath(filePath)\r\n\tif debug\r\n\t\tconsole.log \"PEGGY file = #{OL(fullPath)}\"\r\n\tassert isFile(fullPath), \"No such file: #{OL(filePath)}\"\r\n\tassert (fileExt(fullPath)=='.peggy'), \"Not a peggy file: #{OL(filePath)}\"\r\n\r\n\t{jsFilePath} = peggifyFile(fullPath)\r\n\tif debug\r\n\t\tconsole.log \"JS file = #{OL(jsFilePath)}\"\r\n\r\n\t# --- h has keys StartRules, SyntaxError, parse\r\n\th = await import(pathToFileURL(jsFilePath))\r\n\tassert isFunction(h.parse), \"Bad return from import\"\r\n\r\n\treturn (str, hOptions={}) =>\r\n\t\t# --- Valid options:\r\n\t\t#        start - what is the start rule (usually first rule)\r\n\t\t#        tracer - 'none','peggy','default' or function\r\n\r\n\t\t{start, tracer} = getOptions hOptions, {\r\n\t\t\tstart: undef     #     name of start rule\r\n\t\t\ttracer: 'none'   # --- can be none/peggy/default/a function\r\n\t\t\t}\r\n\r\n\t\thParseOptions = {}\r\n\t\tif defined(start)\r\n\t\t\thParseOptions.startRule = start\r\n\t\tswitch tracer\r\n\t\t\twhen 'none','peggy','default'\r\n\t\t\t\thParseOptions.tracer = getTracer(tracer)\r\n\t\t\telse\r\n\t\t\t\tassert isFunction(tracer), \"tracer not a function\"\r\n\t\t\t\thParseOptions.tracer = tracer\r\n\r\n\t\treturn h.parse(str, hParseOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n#    code - a block\r\n#    hMetaData\r\n#       - 'type' (usually 'coffee')\r\n#       - 'trace' (default: true)\r\n\r\nexport peggify = (code, hMetaData={}, filePath=undef) =>\r\n\r\n\tassert isString(code), \"code not a string: #{typeof code}\"\r\n\r\n\t# --- type determines which preprocessor to use, if any\r\n\t{type, debug, trace} = getOptions hMetaData, {\r\n\t\ttype: 'coffee'\r\n\t\tdebug: false\r\n\t\ttrace: true\r\n\t\t}\r\n\r\n\tif debug\r\n\t\tconsole.log \"peggify() #{OL(filePath)}\"\r\n\r\n\t# --- preprocess code if required\r\n\tif defined(filePath)\r\n\t\tgrammarSource = withExt(filePath, '.pegjs')\r\n\telse\r\n\t\tgrammarSource = undef\r\n\r\n\tif defined(type)\r\n\t\tif debug\r\n\t\t\tconsole.log \"TYPE: #{OL(type)}\"\r\n\t\tassert isFunction(hCodeConverters[type]), \"Bad type #{type}\"\r\n\t\tpeggyCode = PreProcessPeggy(code, hMetaData)\r\n\t\tif defined(grammarSource)\r\n\t\t\tbarf peggyCode, grammarSource\r\n\telse\r\n\t\tpeggyCode = code\r\n\r\n\t# --- Different depending on whether filePath is defined\r\n\tif defined(filePath)\r\n\t\tsourceNode = peggy.generate(peggyCode, {\r\n\t\t\tallowedStartRules: ['*']\r\n\t\t\tformat: 'es'\r\n\t\t\toutput: 'source-and-map'\r\n\t\t\tgrammarSource\r\n\t\t\ttrace\r\n\t\t\t})\r\n\t\t{code, map} = sourceNode.toStringWithSourceMap()\r\n\t\tassert isString(code), \"code = #{OL(code)}\"\r\n\t\tsourceMap = map.toString()\r\n\t\tassert isString(sourceMap), \"sourceMap = #{OL(sourceMap)}\"\r\n\t\treturn {\r\n\t\t\tjs: code\r\n\t\t\tsourceMap: map.toString()\r\n\t\t\tpeggyCode\r\n\t\t\t}\r\n\telse\r\n\t\tjs = peggy.generate(peggyCode, {\r\n\t\t\tallowedStartRules: ['*']\r\n\t\t\tformat: 'es'\r\n\t\t\toutput: 'source'\r\n\t\t\ttrace\r\n\t\t\t})\r\n\t\treturn {\r\n\t\t\tjs\r\n\t\t\tpeggyCode\r\n\t\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport peggifyFile = (filePath) =>\r\n\r\n\tdebugger\r\n\t{hMetaData, reader} = readTextFile(filePath)\r\n\tcode = gen2block(reader)\r\n\t{js, sourceMap} = peggify code, hMetaData, filePath\r\n\tassert isString(js), \"js is #{OL(js)}\"\r\n\tjsFilePath = withExt(filePath, '.js')\r\n\tbarf js, jsFilePath\r\n\tif defined(sourceMap)\r\n\t\tsourceMapFilePath = withExt(filePath, '.js.map')\r\n\t\tbarf sourceMap, sourceMapFilePath\r\n\treturn {\r\n\t\tjsFilePath\r\n\t\tsourceMapFilePath\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport PreProcessPeggy = (code, hMetaData) =>\r\n\r\n\tassert isString(code), \"not a string: #{typeof code}\"\r\n\t{type, debug} = getOptions hMetaData, {\r\n\t\ttype: 'coffee'\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tsrc = new PLLFetcher(code)\r\n\r\n\tif debug\r\n\t\tsrc.dump 'ALL CODE'\r\n\r\n\tsm = new SectionMap [\r\n\t\t'header'\r\n\t\t'init'\r\n\t\t'rules'\r\n\t\t], {    # --- converters\r\n\r\n\t\t# --- 'header' will be CoffeeScript code\r\n\t\theader: (block) =>\r\n\t\t\ttry\r\n\t\t\t\t{js, sourceMap} = hCodeConverters[type](block)\r\n\r\n\t\t\tcatch err\r\n\t\t\t\tconsole.log \"ERROR: Unable to convert #{OL(type)} code to JS\"\r\n\t\t\t\tconsole.log err\r\n\t\t\t\tjs = ''\r\n\r\n\t\t\treturn [\r\n\t\t\t\t'{{'\r\n\r\n\t\t\t\tindented(brew(\"\"\"\r\n\t\t\t\t\tmkString = (lItems...) =>\r\n\r\n\t\t\t\t\t\tlStrings = []\r\n\t\t\t\t\t\tfor item in lItems\r\n\t\t\t\t\t\t\tif (typeof item == 'string') || (item instanceof String)\r\n\t\t\t\t\t\t\t\tlStrings.push item\r\n\t\t\t\t\t\t\telse if Array.isArray(item)\r\n\t\t\t\t\t\t\t\tlStrings.push mkString(item...)\r\n\t\t\t\t\t\treturn lStrings.join('')\r\n\t\t\t\t\t\"\"\").js)\r\n\r\n\t\t\t\tindented(js)\r\n\t\t\t\t'}}'\r\n\t\t\t\t].join(\"\\n\")\r\n\r\n\t\t# --- 'init' section will already be JavaScript\r\n\t\tinit: (block) =>\r\n\t\t\tif nonEmpty(block)\r\n\t\t\t\treturn \"\"\"\r\n\t\t\t\t\t{\r\n\t\t\t\t\t#{block}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\"\"\"\r\n\t\t\telse\r\n\t\t\t\treturn undef\r\n\t\t}\r\n\r\n\tnumFuncs = 0    # used to construct unique function names\r\n\r\n\tif eq(src.peek(), [0, 'GLOBAL'])\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP coffeeCode, 'GLOBAL CODE'\r\n\t\t\tsm.section('header').add(coffeeCode)\r\n\r\n\tif eq(src.peek(), [0, 'PER_PARSE'])\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP code, 'PER_PARSE CODE'\r\n\t\t\tsm.section('header').add(\"init = () =>\")\r\n\t\t\tsm.section('header').add(1, coffeeCode)\r\n\t\t\tsm.section('init').add('init();')\r\n\r\n\thRules = {}     # { <ruleName>: <numMatchExpr>, ... }\r\n\r\n\twhile src.moreLines()\r\n\r\n\t\t# --- Get rule name - must be left aligned, no whitespace\r\n\t\t[level, name] = src.fetch()\r\n\t\tassert (level == 0), \"Next level not 0\"\r\n\t\tif debug\r\n\t\t\tconsole.log \"RULE: #{name}\"\r\n\t\tassert name.match(/^[A-Za-z][A-Za-z0-9_-]*$/),\r\n\t\t\t\t\"Bad name: #{OL(name)}\"\r\n\t\tassert !hasKey(hRules, name), \"duplicate rule #{name}\"\r\n\t\tsm.section('rules').add(name)\r\n\t\thRules[name] = 0   # number of options\r\n\r\n\t\twhile (src.peekLevel() == 1)\r\n\r\n\t\t\t# --- Get match expression\r\n\t\t\t[level, matchExpr] = src.fetch()\r\n\t\t\tassert (level == 1), \"BAD - level not 1\"\r\n\t\t\tmatchExpr = matchExpr \\\r\n\t\t\t\t.replaceAll('{','|') \\\r\n\t\t\t\t.replaceAll('}','|')\r\n\r\n\t\t\t# --- Extract names of new variables\r\n\t\t\tlVars = []\r\n\t\t\thJoin = {}\r\n\t\t\tre = /([A-Za-z][A-Za-z_-]*)\\:(\\:)?/g\r\n\t\t\tfor match from matchExpr.matchAll(re)\r\n\t\t\t\t[_, str, flag] = match\r\n\t\t\t\tlVars.push str\r\n\t\t\t\tif flag\r\n\t\t\t\t\thJoin[str] = true\r\n\r\n\t\t\tstrParms = lVars.join(',')\r\n\t\t\tstrArgs = (\r\n\t\t\t\tfor v in lVars\r\n\t\t\t\t\tif hJoin[v]\r\n\t\t\t\t\t\t\"mkString(#{v})\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tv\r\n\t\t\t\t).join(',')\r\n\r\n\t\t\t# --- output the match expression\r\n\t\t\tch = if (hRules[name] == 0) then '=' else '/'\r\n\t\t\thRules[name] += 1\r\n\r\n\t\t\tmatchExpr = matchExpr.replaceAll('::', ':')\r\n\t\t\tsm.section('rules').add(1, \"#{ch} #{matchExpr}\")\r\n\r\n\t\t\tcoffeeCode = src.getBlock(2)\r\n\t\t\tif nonEmpty(coffeeCode)\r\n\t\t\t\tif debug\r\n\t\t\t\t\tDUMP code, 'CODE'\r\n\t\t\t\tfuncName = \"func#{numFuncs}\"\r\n\t\t\t\tnumFuncs += 1\r\n\r\n\t\t\t\tline = \"#{funcName} = (#{strParms}) =>\"\r\n\t\t\t\tsm.section('header').add(line)\r\n\t\t\t\tsm.section('header').add(1, coffeeCode)\r\n\r\n\t\t\t\tline = \"{ return #{funcName}(#{strArgs}); }\"\r\n\t\t\t\tsm.section('rules').add(2, line)\r\n\r\n\tif debug\r\n\t\tsm.dump()\r\n\r\n\t# --- Get the built code\r\n\tpeggyCode = sm.getBlock()\r\n\tif debug\r\n\t\tDUMP peggyCode, 'PEGGY CODE'\r\n\treturn peggyCode\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- a converter should return {js: jsCode, sourceMap: srcMap}\r\n\r\nexport addCodeConverter = (name, func) =>\r\n\r\n\tassert isString(name, {nonEmpty: true}), \"Bad name: #{name}\"\r\n\tassert ! hasKey(hCodeConverters, name),\r\n\t\t\t\"#{name} code converter already exists\"\r\n\tassert (typeof func == 'function'), \"Not a function: #{func}\"\r\n\thCodeConverters[name] = func\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}