{
  "version": 3,
  "file": "peggy.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\peggy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# peggy.coffee\r\n\r\nimport {pathToFileURL} from 'node:url'\r\nimport peggy from 'peggy'\r\nimport eq from 'deep-equal'\r\nimport fs from 'node:fs'\r\n\r\nimport {\r\n\tundef, defined, notdefined, gen2block, hasKey,\r\n\tisEmpty, nonEmpty, lpad, toBlock,\r\n\tisString, isHash, isArray, isFunction, isInteger,\r\n\tblockToArray, arrayToBlock, escapeStr, getOptions,\r\n\tassert, croak, OL, LOG, js2uri, ML, keys, pass,\r\n\tmatchPos, splitStr, rpad, zpad, words,\r\n\t} from '@jdeighan/llutils'\r\nimport {TextTable} from '@jdeighan/llutils/text-table'\r\nimport {DUMP, BOX} from '@jdeighan/llutils/dump'\r\nimport {\r\n\tindentLevel, indented, undented,\r\n\t} from '@jdeighan/llutils/indent'\r\nimport {\r\n\treadTextFile, barf, slurp, fileExt, withExt,\r\n\tisFile, normalize, mkpath, relpath, fileDir,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {procCoffee} from '@jdeighan/llutils/llcoffee'\r\nimport {PLLFetcher} from '@jdeighan/llutils/fetcher'\r\nimport {SectionMap} from '@jdeighan/llutils/section-map'\r\n\r\nassert isFunction(procCoffee),\r\n\t\t\"procCoffee is not a function: #{OL(procCoffee)}\"\r\n\r\n# --- code converter is applied to each code block in a peggy file\r\n#     using type: 'javascript' allows you to use indentation syntax\r\n#        for everything but the code blocks\r\n\r\nhCodeConverters = {\r\n\tcoffee: procCoffee\r\n\t}\r\n\r\nsep = '# ' + '-'.repeat(62)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC !!!\r\n\r\nexport getParser = (filePath, hOptions={}) =>\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tif debug\r\n\t\tconsole.log \"PEGGY file = #{OL(filePath)}\"\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\tassert (fileExt(filePath)=='.peggy'), \"Not a peggy file: #{OL(filePath)}\"\r\n\r\n\t# --- writes files *.js, possibly *.map\r\n\tprocPeggyFile filePath\r\n\r\n\tjsFilePath = withExt(filePath, '.js')\r\n\tif debug\r\n\t\tconsole.log \"JS file = #{OL(jsFilePath)}\"\r\n\r\n\t# --- h has keys StartRules, SyntaxError, parse\r\n\th = await import(pathToFileURL(jsFilePath))\r\n\tassert isFunction(h.parse), \"Bad return from import\"\r\n\r\n\treturn (str, hOptions={}) =>\r\n\t\t# --- Valid options:\r\n\t\t#        start - what is the start rule (usually first rule)\r\n\t\t#        tracer - 'none','peggy','default' or function\r\n\r\n\t\t{start, tracer} = getOptions hOptions, {\r\n\t\t\tstart: undef     #     name of start rule\r\n\t\t\ttracer: 'none'   # --- can be none/peggy/default/a function\r\n\t\t\t}\r\n\r\n\t\thParseOptions = {}\r\n\t\tif defined(start)\r\n\t\t\thParseOptions.startRule = start\r\n\t\tswitch tracer\r\n\t\t\twhen 'none','peggy','default'\r\n\t\t\t\thParseOptions.tracer = getTracer(tracer)\r\n\t\t\telse\r\n\t\t\t\tassert isFunction(tracer), \"tracer not a function\"\r\n\t\t\t\thParseOptions.tracer = tracer\r\n\r\n\t\treturn h.parse(str, hParseOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Only creates the parser as a *.js file\r\n\r\nexport procPeggy = (contents, hMetaData={}, filePath=undef, hOptions={}) =>\r\n\r\n\tassert isString(contents), \"contents not a string: #{OL(contents)}\"\r\n\tassert nonEmpty(contents), \"empty contents: #{OL(contents)}\"\r\n\r\n\t{debug, trace, opDumper, byteCodeWriter, dumpAST,\r\n\t\t} = getOptions hOptions, {\r\n\t\t\tdebug: false\r\n\t\t\ttrace: true\r\n\t\t\topDumper: false\r\n\t\t\tbyteCodeWriter: false\r\n\t\t\tdumpAST: false\r\n\t\t\t}\r\n\r\n\t# --- type determines which preprocessor to use, if any\r\n\t#        e.g. 'coffee'\r\n\t{type, allowedStartRules, include,\r\n\t\t} = getOptions hMetaData, {\r\n\t\ttype: undef    # --- no preprocessing\r\n\t\tallowedStartRules: ['*']\r\n\t\tinclude: undef\r\n\t\t}\r\n\r\n\t# --- debug can be set to 'preprocess' or 'allcode'\r\n\tdebugPreProcess = debugAllCode = false\r\n\tif (debug == 'preprocess')\r\n\t\tdebug = debugPreProcess = true\r\n\telse if (debug == 'allcode') || (debug == true)\r\n\t\tdebug = debugAllCode = true\r\n\r\n\tif debug\r\n\t\tif type\r\n\t\t\tconsole.log \"procPeggy #{OL(filePath)} as #{type}\"\r\n\t\telse\r\n\t\t\tconsole.log \"procPeggy #{OL(filePath)}\"\r\n\r\n\t# --- preprocess contents if required\r\n\tif defined(type)\r\n\t\tassert isFunction(hCodeConverters[type]), \"Bad type #{type}\"\r\n\t\tpeggyCode = PreProcessPeggy(contents, hMetaData, hOptions)\r\n\t\tif defined(filePath)\r\n\t\t\tbarf peggyCode, withExt(filePath, \".peggy.txt\")\r\n\telse\r\n\t\tpeggyCode = contents\r\n\r\n\t# --- set lUses to an array of included files\r\n\tif isString(include)\r\n\t\tlUses = [include]\r\n\telse if isArray(include)\r\n\t\tlUses = include\r\n\telse\r\n\t\tlUses = []\r\n\r\n\t# --- build list of all inputs\r\n\tlInputs = [\r\n\t\t{source: filePath, text: peggyCode}\r\n\t\t]\r\n\tfor filePath in lUses\r\n\t\t{hMetaData: hMeta, contents: str} = readTextFile(filePath, 'eager')\r\n\t\tlInputs.push {\r\n\t\t\tsource: filePath\r\n\t\t\ttext: PreProcessPeggy(str, hMeta)\r\n\t\t\t}\r\n\r\n\tif debug\r\n\t\tconsole.log \"INPUTS:\"\r\n\t\tallCode = ''\r\n\t\tfor {source, text} in lInputs\r\n\t\t\tconsole.log \"   SOURCE: #{OL(source)}\"\r\n\t\t\tconsole.log \"   TEXT: #{escapeStr(text).substring(0, 40)}\"\r\n\t\t\tallCode += text\r\n\t\tif debugAllCode\r\n\t\t\tDUMP allCode, 'ALL CODE'\r\n\r\n\thOptions = {\r\n\t\tallowedStartRules\r\n\t\tformat: 'es'\r\n\t\ttrace\r\n\t\t}\r\n\r\n\tif opDumper\r\n\t\topDumper = hOptions.opDumper = new OpDumper()\r\n\r\n\tif byteCodeWriter\r\n\t\tbyteCodeWriter = hOptions.byteCodeWriter = new ByteCodeWriter()\r\n\r\n\tif dumpAST\r\n\t\thOptions.dumpAST = withExt(filePath, '.ast.txt')\r\n\r\n\ttry\r\n\t\tif defined(filePath)\r\n\t\t\thOptions.grammarSource = filePath\r\n\t\t\thOptions.output = 'source-and-map'\r\n\r\n\t\t\tsourceNode = peggy.generate(lInputs, hOptions)\r\n\r\n\t\t\thOtherFiles = {}\r\n\t\t\tif opDumper\r\n\t\t\t\thOtherFiles['.ops.txt'] = opDumper.getBlock()\r\n\r\n\t\t\tif byteCodeWriter\r\n\t\t\t\thOtherFiles['.bytecodes.txt'] = byteCodeWriter.getBlock()\r\n\r\n\t\t\t{code: jsCode, map} = sourceNode.toStringWithSourceMap()\r\n\t\t\tassert isString(jsCode), \"jsCode = #{OL(jsCode)}\"\r\n\t\t\tsourceMap = map.toString()\r\n\t\t\tassert isString(sourceMap), \"sourceMap = #{OL(sourceMap)}\"\r\n\t\t\thResult = {\r\n\t\t\t\tcode: jsCode\r\n\t\t\t\tsourceMap: map.toString()\r\n\t\t\t\thOtherFiles\r\n\t\t\t\tlUses\r\n\t\t\t\t}\r\n\t\t\treturn hResult\r\n\t\telse\r\n\t\t\thOptions.output = 'source'\r\n\t\t\tjsCode = peggy.generate(lInputs, hOptions)\r\n\t\t\treturn {\r\n\t\t\t\tcode: jsCode\r\n\t\t\t\thOtherFiles\r\n\t\t\t\tlUses\r\n\t\t\t\t}\r\n\tcatch err\r\n\t\t# --- If file was preprocessed, and text version hasn't\r\n\t\t#     already been saved, save it now\r\n\t\tif defined(filePath) && defined(type) && ! debug\r\n\t\t\tbarf peggyCode, withExt(filePath, \".peggy.txt\")\r\n\t\tthrow err\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport procPeggyFile = (filePath, hOptions={}) =>\r\n\r\n\tassert (fileExt(filePath) == '.peggy'), \"Not a peggy file\"\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\treturn procPeggy contents, hMetaData, filePath, hOptions\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getSource = (filePath) =>\r\n\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\tpeggyCode = PreProcessPeggy(contents, hMetaData)\r\n\r\n\treturn {\r\n\t\tsource: filePath,\r\n\t\ttext: peggyCode\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport analyzePeggyFile = (filePath) =>\r\n\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\thResults = {}\r\n\tif hasKey(hMetaData, 'include')\r\n\t\tinclude = hMetaData.include\r\n\t\tif isString(include)\r\n\t\t\thResults.lUses = [include]\r\n\t\telse if isArray(include)\r\n\t\t\thResults.lUses = include\r\n\t\telse\r\n\t\t\tcroak \"Bad include key in meta data in #{OL(filePath)}\"\r\n\telse\r\n\t\thResults.lUses = []\r\n\treturn hResults\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport meSplitter = (str) =>\r\n\r\n\tlMatches = str.match(///^\r\n\t\t\t(.*?)       # everything before 'DO'\r\n\t\t\t\\b DO \\b\r\n\t\t\t(\\s*)\r\n\t\t\t(.*)        # everything after 'DO' + ws (must start w/ '{')\r\n\t\t\t$///)\r\n\r\n\t# --- if no 'DO' in string, return entire string trimmed\r\n\tif notdefined(lMatches)\r\n\t\treturn [str.trim(), str.length]\r\n\r\n\t# --- if pre isn't all whitespace, return pre trimmed\r\n\t[_, pre, ws, post] = lMatches\r\n\tprelen = pre.length\r\n\tpre = pre.trim()\r\n\tif (pre.length > 0)\r\n\t\treturn [pre, prelen]\r\n\r\n\t# --- Now we know - str contains 'DO'\r\n\r\n\t# --- Find '{' in post, which must be the 1st char in post\r\n\t#     There must be only whitespace between 'DO' and '{'\r\n\tblockStart = prelen + 2 + ws.length\r\n\tblockEnd = matchPos(str, blockStart)\r\n\tassert (str[blockStart] == '{'),\r\n\t\t\t\"Bad blockStart = #{blockStart} in #{OL(str)}\"\r\n\tassert (str[blockEnd]   == '}'),\r\n\t\t\t\"Bad blockEnd = #{blockEnd} in #{OL(str)}\"\r\n\tinside = str.substring(blockStart+1, blockEnd)\r\n\tif inside.endsWith(';')\r\n\t\treturn [\"& {#{inside}return true;}\", blockEnd+1]\r\n\telse\r\n\t\treturn [\"& {#{inside};return true;}\", blockEnd+1]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport PreProcessPeggy = (code, hMetaData={}, filePath=undef, hOptions={}) =>\r\n\r\n\tassert isString(code), \"not a string: #{typeof code}\"\r\n\t{type} = getOptions hMetaData, {\r\n\t\ttype: 'coffee'\r\n\t\t}\r\n\tif notdefined(type)\r\n\t\treturn code\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tsrc = new PLLFetcher(code)\r\n\r\n\tif debug\r\n\t\tsrc.dump 'ALL CODE'\r\n\r\n\tsm = new SectionMap [\r\n\t\t'header'\r\n\t\t'init'\r\n\t\t'rules'\r\n\t\t], {    # --- converters\r\n\r\n\t\t# --- 'header' will be CoffeeScript code\r\n\t\theader: (block) =>\r\n\t\t\ttry\r\n\t\t\t\t{code, sourceMap} = hCodeConverters[type](block)\r\n\r\n\t\t\tcatch err\r\n\t\t\t\tconsole.log \"ERROR: Unable to convert #{OL(type)} code to JS\"\r\n\t\t\t\tconsole.log err\r\n\t\t\t\tcode = ''\r\n\r\n\t\t\treturn [\r\n\t\t\t\t'{{'\r\n\t\t\t\tindented(code)\r\n\t\t\t\t'}}'\r\n\t\t\t\t].join(\"\\n\")\r\n\r\n\t\t# --- 'init' section will already be JavaScript\r\n\t\tinit: (block) =>\r\n\t\t\tif nonEmpty(block)\r\n\t\t\t\treturn \"\"\"\r\n\t\t\t\t\t{\r\n\t\t\t\t\t#{block}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\"\"\"\r\n\t\t\telse\r\n\t\t\t\treturn undef\r\n\t\t}\r\n\r\n\theaderSection = sm.section('header')\r\n\tinitSection   = sm.section('init')\r\n\trulesSection  = sm.section('rules')\r\n\r\n\tif eq(src.peek(), [0, 'GLOBAL'])\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP coffeeCode, 'GLOBAL CODE'\r\n\t\t\theaderSection.add(coffeeCode)\r\n\r\n\tif eq(src.peek(), [0, 'PER_PARSE'])\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP code, 'PER_PARSE CODE'\r\n\t\t\theaderSection.add(\"init = () =>\")\r\n\t\t\theaderSection.add(1, coffeeCode)\r\n\t\t\tinitSection.add('init();')\r\n\r\n\thRules = {}     # { <ruleName>: <numMatchExpr>, ... }\r\n\r\n\t# --- Define utility functions\r\n\r\n\tgetMatchExpr = () =>\r\n\r\n\t\t# --- Get match expression\r\n\t\t[level, matchExpr] = src.fetch()\r\n\t\tassert (level == 1), \"BAD - level not 1\"\r\n\r\n\t\t# --- Extract names of new variables\r\n\t\tlVars = []\r\n\t\tre = /([A-Za-z_][A-Za-z0-9_-]*)\\:/g\r\n\t\tfor match from matchExpr.matchAll(re)\r\n\t\t\tlVars.push match[1]\r\n\r\n\t\treturn [\r\n\t\t\tsplitStr(matchExpr, meSplitter).join(' ')\r\n\t\t\tlVars\r\n\t\t\t]\r\n\r\n\twhile src.moreLines()\r\n\r\n\t\t# --- Get rule name - must be left aligned, no whitespace\r\n\t\t[level, name] = src.fetch()\r\n\t\tassert (level == 0), \"Next level not 0\"\r\n\t\tif debug\r\n\t\t\tconsole.log \"RULE: #{name}\"\r\n\t\tassert name.match(/^[A-Za-z_][A-Za-z0-9_-]*$/),\r\n\t\t\t\t\"Bad name: #{OL(name)}\"\r\n\t\tassert !hasKey(hRules, name), \"duplicate rule #{name}\"\r\n\r\n\t\trulesSection.add('')\r\n\t\trulesSection.add(name)\r\n\t\thRules[name] = 0   # number of options\r\n\r\n\t\twhile (src.peekLevel() == 1)\r\n\r\n\t\t\t[matchExpr, lVars] = getMatchExpr()\r\n\t\t\targStr = lVars.join(', ')\r\n\r\n\t\t\t# --- output the match expression\r\n\t\t\tch = if (hRules[name] == 0) then '=' else '/'\r\n\t\t\thRules[name] += 1\r\n\r\n\t\t\trulesSection.add('')\r\n\t\t\trulesSection.add(1, \"#{ch} #{matchExpr}\")\r\n\r\n\t\t\tcoffeeCode = src.getBlock(2)\r\n\t\t\tif nonEmpty(coffeeCode)\r\n\t\t\t\tif debug\r\n\t\t\t\t\tDUMP code, 'CODE'\r\n\t\t\t\tfuncName = \"parse__#{name}__#{hRules[name]}\"\r\n\t\t\t\theaderSection.add(sep)\r\n\t\t\t\theaderSection.add('')\r\n\t\t\t\theaderSection.add(\"#{funcName} = (#{argStr}) =>\")\r\n\t\t\t\theaderSection.add('')\r\n\t\t\t\theaderSection.add(1, coffeeCode)\r\n\r\n\t\t\t\tline = \"{ return #{funcName}(#{argStr}); }\"\r\n\t\t\t\trulesSection.add(2, line)\r\n\r\n\tif debug\r\n\t\tsm.dump()\r\n\r\n\t# --- Get the built code\r\n\tpeggyCode = sm.getBlock()\r\n\tif debug\r\n\t\tDUMP peggyCode, 'PEGGY CODE'\r\n\treturn peggyCode\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- a converter should return {code: jsCode, sourceMap: srcMap}\r\n\r\nexport addCodeConverter = (name, func) =>\r\n\r\n\tassert isString(name, {nonEmpty: true}), \"Bad name: #{name}\"\r\n\tassert ! hasKey(hCodeConverters, name),\r\n\t\t\t\"#{name} code converter already exists\"\r\n\tassert (typeof func == 'function'), \"Not a function: #{func}\"\r\n\thCodeConverters[name] = func\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ByteCodeWriter\r\n\r\n\tconstructor: (hOptions={}) ->\r\n\r\n\t\t@lRuleNames = [];\r\n\t\t@hRules = {}\r\n\r\n\t\t# --- These are set when the AST is known\r\n\t\t@literals = undef\r\n\t\t@expectations = undef\r\n\r\n\t\t# --- options\r\n\t\t@detailed = hOptions.detailed\r\n\r\n\t# ..........................................................\r\n\r\n\tsetAST: (ast) ->\r\n\r\n\t\tassert (ast.type == 'grammar'), \"not a grammar\"\r\n\t\tassert (ast.rules.length > 0), \"no rules\"\r\n\t\t@literals = ast.literals\r\n\t\t@expectations = ast.expectations\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tadd: (ruleName, lOpcodes) ->\r\n\r\n\t\tassert (typeof ruleName == 'string'), \"not a string\"\r\n\t\tassert Array.isArray(lOpcodes), \"not an array\"\r\n\t\tassert !@hRules[ruleName], \"rule #{ruleName} already defined\"\r\n\t\t@lRuleNames.push ruleName\r\n\t\t@hRules[ruleName] = lOpcodes\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetOpInfo: (op, pos) ->\r\n\r\n\t\tswitch op\r\n\t\t\twhen 35 then return ['PUSH_EMPTY_STRING', [],              []]\r\n\t\t\twhen 5  then return ['PUSH_CUR_POS',      [],              []]\r\n\t\t\twhen 1  then return ['PUSH_UNDEFINED',    [],              []]\r\n\t\t\twhen 2  then return ['PUSH_NULL',         [],              []]\r\n\t\t\twhen 3  then return ['PUSH_FAILED',       [],              []]\r\n\t\t\twhen 4  then return ['PUSH_EMPTY_ARRAY',  [],              []]\r\n\t\t\twhen 6  then return ['POP',               [],              []]\r\n\t\t\twhen 7  then return ['POP_CUR_POS',       [],              []]\r\n\t\t\twhen 8  then return ['POP_N',             ['/'],           []]\r\n\t\t\twhen 9  then return ['NIP',               [],              []]\r\n\t\t\twhen 10 then return ['APPEND',            [],              []]\r\n\t\t\twhen 11 then return ['WRAP',              [''],            []]\r\n\t\t\twhen 12 then return ['TEXT',              [],              []]\r\n\t\t\twhen 36 then return ['PLUCK',             ['/','/','/','p'], []]\r\n\t\t\twhen 13 then return ['IF',                [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 14 then return ['IF_ERROR',          [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 15 then return ['IF_NOT_ERROR',      [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 30 then return ['IF_LT',             [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 31 then return ['IF_GE',             [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 32 then return ['IF_LT_DYNAMIC',     [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 33 then return ['IF_GE_DYNAMIC',     [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 16 then return ['WHILE_NOT_ERROR',   [],              ['THEN']]\r\n\t\t\twhen 17 then return ['MATCH_ANY',         [],              ['THEN', 'ELSE']]\r\n\t\t\twhen 18 then return ['MATCH_STRING',      ['/lit'],        ['THEN', 'ELSE']]\r\n\t\t\twhen 19 then return ['MATCH_STRING_IC',   ['/lit'],        ['THEN', 'ELSE']]\r\n\t\t\twhen 20 then return ['MATCH_CHAR_CLASS',  ['/class'],      []]\r\n\t\t\twhen 21 then return ['ACCEPT_N',          ['/num'],        []]\r\n\t\t\twhen 22 then return ['ACCEPT_STRING',     ['/lit'],        []]\r\n\t\t\twhen 23 then return ['FAIL',              ['/expectation'],[]]\r\n\t\t\twhen 24 then return ['LOAD_SAVED_POS',    ['pos/num'],     []]\r\n\t\t\twhen 25 then return ['UPDATE_SAVED_POS',  ['pos/num'],     []]\r\n\t\t\twhen 26 then return ['CALL',              [],              []]\r\n\t\t\twhen 27 then return ['RULE',              ['/rule'],       []]\r\n\t\t\twhen 37 then return ['SOURCE_MAP_PUSH',   [],              []]\r\n\t\t\twhen 38 then return ['SOURCE_MAP_POP',    [],              []]\r\n\t\t\twhen 39 then return ['SOURCE_MAP_LABEL_PUSH', [],              []]\r\n\t\t\twhen 40 then return ['SOURCE_MAP_LABEL_POP',  [],              []]\r\n\t\t\telse\r\n\t\t\t\treturn [\"OPCODE #{op}\", [], []]\r\n\r\n\t# ..........................................................\r\n\r\n\targStr: (arg, infoStr) ->\r\n\r\n\t\tif (infoStr == '/')\r\n\t\t\treturn arg.toString()\r\n\r\n\t\t[label, type] = infoStr.split('/')\r\n\r\n\t\tswitch type\r\n\r\n\t\t\twhen 'rule'\r\n\t\t\t\tif (arg < @lRuleNames.length)\r\n\t\t\t\t\tresult = \"<#{@lRuleNames[arg]}>\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"<##{arg}>\"\r\n\r\n\t\t\twhen 'lit'\r\n\t\t\t\tresult = \"'#{@literals[arg]}'\"\r\n\r\n\t\t\twhen 'num','i'\r\n\t\t\t\tresult = arg.toString()\r\n\r\n\t\t\twhen 'expectation'\r\n\t\t\t\thExpect = @expectations[arg]\r\n\t\t\t\tif defined(hExpect)\r\n\t\t\t\t\t{type, value} = hExpect\r\n\t\t\t\t\tswitch type\r\n\t\t\t\t\t\twhen 'literal'\r\n\t\t\t\t\t\t\tresult = \"\\\"#{value}\\\"\"\r\n\t\t\t\t\t\twhen 'class'\r\n\t\t\t\t\t\t\tresult = \"[..]\"\r\n\t\t\t\t\t\twhen 'any'\r\n\t\t\t\t\t\t\tresult = '.'\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"Unknown expectation type: #{type}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = 'hExpect = undef'\r\n\t\t\twhen 'block'\r\n\t\t\t\tif label\r\n\t\t\t\t\tresult = \"#{label}:#{arg}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"BLOCK: #{arg}\"\r\n\r\n\t\t\twhen 'class'\r\n\t\t\t\tif label\r\n\t\t\t\t\tresult = \"#{label}:[#{arg}]\"\r\n\t\t\t\telse\r\n\t\t\t\t\tresult = \"CLASS: #{arg}\"\r\n\r\n\t\t\telse\r\n\t\t\t\tresult = \"<UNKNOWN>: #{OL(arg)}\"\r\n\r\n\t\tif @detailed\r\n\t\t\treturn \"(#{arg}) #{result}\"\r\n\t\telse\r\n\t\t\treturn result\r\n\r\n\t# ..........................................................\r\n\r\n\topStr: (lOpcodes) ->\r\n\r\n\t\tdebugger\r\n\t\tlLines = []\r\n\t\tpos = 0\r\n\t\twhile (pos < lOpcodes.length)\r\n\t\t\top = lOpcodes[pos]\r\n\t\t\tpos += 1\r\n\r\n\t\t\t[name, lArgInfo, lBlockInfo] = @getOpInfo(op, pos)\r\n\t\t\tnumArgs = lArgInfo.length\r\n\t\t\tif (numArgs == 0)\r\n\t\t\t\tif @detailed\r\n\t\t\t\t\tlLines.push \"(#{op}) #{name}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"#{name}\"\r\n\t\t\telse\r\n\t\t\t\tlArgs = lOpcodes.slice(pos, pos + numArgs)\r\n\t\t\t\tpos += numArgs\r\n\t\t\t\tlArgDesc = lArgs.map (arg,i) => @argStr(arg, lArgInfo[i])\r\n\t\t\t\tif @detailed\r\n\t\t\t\t\tlLines.push \"(#{op}) #{name} #{lArgDesc.join(' ')}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tlLines.push \"#{name} #{lArgDesc.join(' ')}\"\r\n\r\n\t\t\tblockBase = pos + lBlockInfo.length\r\n\t\t\tfor label,i in lBlockInfo\r\n\t\t\t\tblockLen = lOpcodes[pos]\r\n\t\t\t\tpos += 1\r\n\r\n\t\t\t\tswitch label\r\n\t\t\t\t\twhen 'ELSE'\r\n\t\t\t\t\t\tif (blockLen > 0)\r\n\t\t\t\t\t\t\tlLines.push 'ELSE'\r\n\t\t\t\t\twhen 'THEN'\r\n\t\t\t\t\t\tpass()\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcroak \"Bad block label: #{label}\"\r\n\r\n\t\t\t\tlSubOps = lOpcodes.slice(blockBase, blockBase + blockLen)\r\n\t\t\t\tlLines.push indented(@opStr(lSubOps))\r\n\t\t\t\tblockBase += blockLen\r\n\t\t\tpos = blockBase\r\n\t\treturn lLines.join(\"\\n\")\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: () ->\r\n\r\n\t\tlParts = []\r\n\t\tfor ruleName in Object.keys(@hRules)\r\n\t\t\tlParts.push \"<#{ruleName}>\"\r\n\t\t\tlOpcodes = @hRules[ruleName]\r\n\t\t\tblock = @opStr(lOpcodes).trimEnd()\r\n\t\t\tif (block != '')\r\n\t\t\t\tlParts.push indented(block)\r\n\t\t\tlParts.push ''\r\n\t\treturn lParts.join(\"\\n\").trimEnd()\r\n\r\n# --------------------------------------------------------------------------\r\n\r\nexport class OpDumper\r\n\r\n\tconstructor: (hOptions={}) ->\r\n\r\n\t\t{ignore} = getOptions hOptions, {\r\n\t\t\tignore: [37, 38, 39, 40]\r\n\t\t\t}\r\n\t\t@lIgnore = ignore\r\n\t\t@level = 0\r\n\t\t@lLines = []\r\n\r\n\t# ..........................................................\r\n\r\n\tsetStack: (stack) ->\r\n\r\n\t\t@stack = stack\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tincLevel: () -> @level += 1\r\n\tdecLevel: () -> @level -= 1\r\n\r\n\t# ..........................................................\r\n\r\n\tout: (str) ->\r\n\t\t@lLines.push \"  \".repeat(@level) + str\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\toutOp: (index, op) ->\r\n\r\n\t\tif !@lIgnore.includes(op)\r\n\t\t\t@out \"OP[#{lpad(index,2)}]: #{lpad(op,2)} #{@getName(op)}\"\r\n\r\n\t# ..........................................................\r\n\r\n\toutBC: (lByteCodes) ->\r\n\r\n\t\t# --- For now, don't output anything\r\n\t\treturn\r\n\r\n\t\t@out 'OPCODES: ' \\\r\n\t\t\t+ lByteCodes \\\r\n\t\t\t\t.filter((x) => !@lIgnore.includes(x)) \\\r\n\t\t\t\t.map((x) => x.toString()) \\\r\n\t\t\t\t.join(' ');\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\toutCode: (lLines, label) ->\r\n\r\n\t\tlLines = BOX toBlock(lLines), label, {\r\n\t\t\techo: false\r\n\t\t\tasArray: true\r\n\t\t\t}\r\n\t\tfor line in lLines\r\n\t\t\t@out line\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetBlock: () ->\r\n\r\n\t\treturn @lLines.join(\"\\n\")\r\n\r\n\t# ..........................................................\r\n\r\n\tgetName: (op) ->\r\n\r\n\t\tswitch op\r\n\t\t\twhen  0 then return 'PUSH'\r\n\t\t\twhen 35 then return 'PUSH_EMPTY_STRING'\r\n\t\t\twhen  1 then return 'PUSH_UNDEFINED'\r\n\t\t\twhen  2 then return 'PUSH_NULL'\r\n\t\t\twhen  3 then return 'PUSH_FAILED'\r\n\t\t\twhen  4 then return 'PUSH_EMPTY_ARRAY'\r\n\t\t\twhen  5 then return 'PUSH_CURR_POS'\r\n\t\t\twhen  6 then return 'POP'\r\n\t\t\twhen  7 then return 'POP_CURR_POS'\r\n\t\t\twhen  8 then return 'POP_N'\r\n\t\t\twhen  9 then return 'NIP'\r\n\t\t\twhen 10 then return 'APPEND'\r\n\t\t\twhen 11 then return 'WRAP'\r\n\t\t\twhen 12 then return 'TEXT'\r\n\t\t\twhen 36 then return 'PLUCK'\r\n\r\n\t\t\t# ---  Conditions and Loops\r\n\r\n\t\t\twhen 13 then return 'IF'\r\n\t\t\twhen 14 then return 'IF_ERROR'\r\n\t\t\twhen 15 then return 'IF_NOT_ERROR'\r\n\t\t\twhen 30 then return 'IF_LT'\r\n\t\t\twhen 31 then return 'IF_GE'\r\n\t\t\twhen 32 then return 'IF_LT_DYNAMIC'\r\n\t\t\twhen 33 then return 'IF_GE_DYNAMIC'\r\n\t\t\twhen 16 then return 'WHILE_NOT_ERROR'\r\n\r\n\t\t\t# ---  Matching\r\n\r\n\t\t\twhen 17 then return 'MATCH_ANY'\r\n\t\t\twhen 18 then return 'MATCH_STRING'\r\n\t\t\twhen 19 then return 'MATCH_STRING_IC'\r\n\t\t\twhen 20 then return 'MATCH_CHAR_CLASS'\r\n\t\t\twhen 20 then return 'MATCH_REGEXP'\r\n\t\t\twhen 21 then return 'ACCEPT_N'\r\n\t\t\twhen 22 then return 'ACCEPT_STRING'\r\n\t\t\twhen 23 then return 'FAIL'\r\n\r\n\t\t\t# ---  Calls\r\n\r\n\t\t\twhen 24 then return 'LOAD_SAVED_POS'\r\n\t\t\twhen 25 then return 'UPDATE_SAVED_POS'\r\n\t\t\twhen 26 then return 'CALL'\r\n\r\n\t\t\t# ---  Rules\r\n\r\n\t\t\twhen 27 then return 'RULE'\r\n\t\t\twhen 41 then return 'LIBRARY_RULE'\r\n\r\n\t\t\t# ---  Failure Reporting\r\n\r\n\t\t\twhen 28 then return 'SILENT_FAILS_ON'\r\n\t\t\twhen 29 then return 'SILENT_FAILS_OFF'\r\n\r\n\t\t\twhen 37 then return 'SOURCE_MAP_PUSH'\r\n\t\t\twhen 38 then return 'SOURCE_MAP_POP'\r\n\t\t\twhen 39 then return 'SOURCE_MAP_LABEL_PUSH'\r\n\t\t\twhen 40 then return 'SOURCE_MAP_LABEL_POP'\r\n\r\n\t\t\telse return '<UNKNOWN>'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class BaseTracer\r\n\r\n\tconstructor: (hOptions={}) ->\r\n\r\n\t\th = getOptions hOptions, {\r\n\t\t\tposType: 'linecol'\r\n\t\t\tlIgnore: ['_']\r\n\t\t\tlIgnoreSubs: []\r\n\t\t\t}\r\n\t\t@hOptions = h\r\n\t\t@posType = h.posType\r\n\t\t@lIgnoreSubs = h.lIgnoreSubs\r\n\t\t@lIgnore = h.lIgnore\r\n\t\tfor rule in @lIgnore\r\n\t\t\tif !@lIgnoreSubs.includes(rule)\r\n\t\t\t\t@lIgnoreSubs.push rule\r\n\t\t@lStack = []     # stack of rule names\r\n\r\n\t# ..........................................................\r\n\r\n\ttraceIt: (hInfo) ->\r\n\r\n\t\t{type, rule} = hInfo\r\n\t\t[category, action] = type.split('.')\r\n\r\n\t\t# --- NOTE: Any rule name in @lIgnore\r\n\t\t#           will also be in @lIgnoreSubs\r\n\r\n\t\tif @lIgnore.includes(rule)\r\n\t\t\tif (category == 'rule')\r\n\t\t\t\treturn false\r\n\r\n\t\tif (category == 'rule') && \\\r\n\t\t\t\t((action == 'match') || (action == 'fail'))\r\n\t\t\tfor rule,i in @lStack\r\n\t\t\t\tif @lIgnoreSubs.includes(rule) && (i != @lStack.length - 1)\r\n\t\t\t\t\treturn false\r\n\t\telse\r\n\t\t\tfor rule in @lStack\r\n\t\t\t\tif @lIgnoreSubs.includes(rule)\r\n\t\t\t\t\treturn false\r\n\t\treturn true\r\n\r\n\t# ..........................................................\r\n\r\n\tdestroy: () ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tadjustStack: (hInfo) ->\r\n\r\n\t\t{type, rule} = hInfo\r\n\t\tswitch type\r\n\t\t\twhen 'rule.enter'\r\n\t\t\t\t@lStack.push rule\r\n\t\t\twhen 'rule.fail', 'rule.match'\r\n\t\t\t\t@lStack.pop()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttrace: (hInfo) ->\r\n\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tposStr: (location, posType=undef) ->\r\n\r\n\t\tif notdefined(posType)\r\n\t\t\tposType = @posType\r\n\t\tif notdefined(location) || !isHash(location)\r\n\t\t\treturn rpad('unknown', 12)\r\n\t\t{start: s, end: e} = location\r\n\t\tsl = zpad(s.line)\r\n\t\tsc = zpad(s.column)\r\n\t\tso = zpad(s.offset)\r\n\t\tel = zpad(e.line)\r\n\t\tec = zpad(e.column)\r\n\t\teo = zpad(e.offset)\r\n\t\tif (sl == 1) && (el == 1)\r\n\t\t\treturn posStr(location, 'offset')\r\n\r\n\t\tswitch @posType\r\n\t\t\twhen 'linecol'\r\n\t\t\t\tif (so == eo)\r\n\t\t\t\t\treturn \"#{sl}:#{sc}\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn \"#{sl}:#{sc}-#{el}:#{ec}\"\r\n\t\t\twhen 'offset'\r\n\t\t\t\tif (so == eo)\r\n\t\t\t\t\treturn \"#{so}\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn \"#{so}-#{eo}\"\r\n\t\t\telse\r\n\t\t\t\tif (so == eo)\r\n\t\t\t\t\treturn \"#{sl}:#{sc}:#{so}\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn \"#{sl}:#{sc}:#{so}-#{el}:#{ec}:#{eo}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class RawTracer extends BaseTracer\r\n\r\n\ttrace: (hInfo) ->\r\n\r\n\t\t@adjustStack(hInfo)\r\n\t\tconsole.log JSON.stringify(hInfo, null, 3)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class DebugTracer extends BaseTracer\r\n\r\n\tconstructor: (hOptions={}) ->\r\n\r\n\t\tsuper(hOptions)\r\n\t\t@tt = new TextTable('l l l l l')\r\n\t\t@tt.fullsep()\r\n\t\t@tt.labels words('type rule result details position')\r\n\t\t@tt.sep()\r\n\r\n\ttrace: (hInfo) ->\r\n\r\n\t\t@adjustStack(hInfo)\r\n\t\t{type, rule, result, details, location} = hInfo\r\n\t\t@tt.data [\r\n\t\t\ttype,\r\n\t\t\trule,\r\n\t\t\tJSON.stringify(result),\r\n\t\t\tdetails,\r\n\t\t\t@posStr(location)\r\n\t\t\t]\r\n\t\treturn\r\n\r\n\tdestroy: () ->\r\n\r\n\t\tconsole.log @tt.asString()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class AdvancedTracer extends BaseTracer\r\n\r\n\ttraceStr: (hInfo, level=0) ->\r\n\r\n\t\t{type, rule, location, result, details} = hInfo\r\n\r\n\t\tlocStr = @posStr(location)\r\n\t\tstartPos = location?.start?.offset\r\n\t\tendPos = location?.end?.offset\r\n\t\t[obj, action] = type.split('.')\r\n\r\n\t\tswitch action\r\n\r\n\t\t\twhen 'enter'\r\n\r\n\t\t\t\tassert (obj == 'rule'), \"obj=#{obj}, act=#{action}\"\r\n\t\t\t\tpre = \"│  \".repeat(level)\r\n\t\t\t\treturn \"#{pre}? #{rule}\"\r\n\r\n\t\t\twhen 'match'\r\n\r\n\t\t\t\tif (obj == 'rule')\r\n\t\t\t\t\tpre = \"│  \".repeat(level-1) + \"└─>\"\r\n\t\t\t\telse\r\n\t\t\t\t\tpre = \"│  \".repeat(level)\r\n\r\n\t\t\t\tif defined(result)\r\n\t\t\t\t\tif defined(endPos)\r\n\t\t\t\t\t\treturn \"#{pre} #{OL(result)} (pos -> #{endPos})\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn \"#{pre} #{OL(result)}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tif defined(endPos)\r\n\t\t\t\t\t\treturn \"#{pre} YES (pos=#{endPos})\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn \"#{pre} YES\"\r\n\r\n\t\t\twhen 'fail'\r\n\r\n\t\t\t\tif (obj == 'rule')\r\n\t\t\t\t\tpre = \"│  \".repeat(level-1) + \"└─> FAIL\"\r\n\t\t\t\t\tif defined(location)\r\n\t\t\t\t\t\treturn \" #{pre} (at #{locStr})\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn \" #{pre}\".trim()\r\n\t\t\t\telse\r\n\t\t\t\t\tpre = \"│  \".repeat(level-1) + \"x  \"\r\n\t\t\t\t\tif defined(location)\r\n\t\t\t\t\t\treturn \"#{pre} #{obj} #{OL(details)} (at #{locStr})\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn \"#{pre} #{obj}\"\r\n\r\n\r\n\t\t\telse\r\n\t\t\t\treturn \"UNKNOWN type: #{type}\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\ttrace: (hInfo) ->\r\n\r\n\t\tdebugger\r\n\t\tif @traceIt(hInfo)\r\n\t\t\tresult = @traceStr(hInfo, @lStack.length)\r\n\t\t\tif isString(result)\r\n\t\t\t\tconsole.log result\r\n\t\t\telse if isArray(result)\r\n\t\t\t\tfor str in result\r\n\t\t\t\t\tconsole.log str\r\n\r\n\t\t@adjustStack(hInfo)\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class DetailedTracer extends AdvancedTracer\r\n\r\n\tconstructor: (@input, hOptions={}) ->\r\n\r\n\t\tsuper(hOptions)\r\n\t\t@input = @hOptions.input\r\n\t\t@hVars = @hOptions.hVars\r\n\r\n\t# ..........................................................\r\n\r\n\tvarStr: () ->\r\n\r\n\t\tif isEmpty(@hVars)\r\n\t\t\treturn ''\r\n\r\n\t\tlParts = []\r\n\t\tfor varname in keys(@hVars)\r\n\t\t\tvalue = @hVars[varname]()\r\n\t\t\tlParts.push \"#{varname} = #{OL(value)}\"\r\n\t\tif (lParts.length == 0)\r\n\t\t\treturn ''\r\n\t\telse\r\n\t\t\treturn ' (' + lParts.join(',') + ')'\r\n\r\n\t# ..........................................................\r\n\r\n\ttraceStr: (hInfo, level) ->\r\n\r\n\t\tstr = super hInfo\r\n\t\tif (hInfo.type != 'rule.fail') || isEmpty(@input)\r\n\t\t\treturn str\r\n\r\n\t\t{type, rule, location, result} = hInfo\r\n\t\tif defined(location)\r\n\t\t\t{offset} = location.start\r\n\t\t\treturn [\r\n\t\t\t\tstr\r\n\t\t\t\t\"#{escapeStr(@input, 'esc', {offset})}#{@varStr()}\"\r\n\t\t\t\t]\r\n\t\telse\r\n\t\t\treturn [\r\n\t\t\t\tstr\r\n\t\t\t\t\"#{escapeStr(@input, 'esc')}#{@varStr()}\"\r\n\t\t\t\t]\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- tracer can be:\r\n#        - undef\r\n#        - a string: 'none', 'debug', 'peggy','advanced','detailed'\r\n#        - an object with a function property named 'trace'\r\n#        - a function\r\n\r\nexport getTracer = (tracer='advanced', hOptions={}) =>\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tinput: undef\r\n\t\tlIgnore: ['_']\r\n\t\tlIgnoreSubs: []\r\n\t\thVars: {}\r\n\t\t}\r\n\r\n\tswitch (typeof tracer)\r\n\t\twhen 'undefined'\r\n\t\t\treturn new BaseTracer(hOptions)\r\n\t\twhen 'object'\r\n\t\t\tif defined(tracer)\r\n\t\t\t\treturn tracer\r\n\t\t\telse\r\n\t\t\t\treturn new BaseTracer(hOptions)\r\n\t\twhen 'function'\r\n\t\t\treturn {trace: tracer}\r\n\t\twhen 'string'\r\n\t\t\t[tracer, option] = tracer.split('/')\r\n\t\t\tif option\r\n\t\t\t\thOptions.posType = option\r\n\t\t\tswitch tracer\r\n\t\t\t\twhen 'raw'\r\n\t\t\t\t\treturn new RawTracer(hOptions)\r\n\t\t\t\twhen 'debug'\r\n\t\t\t\t\treturn new DebugTracer(hOptions)\r\n\t\t\t\twhen 'advanced'\r\n\t\t\t\t\treturn new AdvancedTracer(hOptions)\r\n\t\t\t\twhen 'detailed'\r\n\t\t\t\t\treturn new DetailedTracer(hOptions)\r\n\t\t\t\twhen 'peggy'\r\n\t\t\t\t\treturn undef\r\n\t\t\t\telse\r\n\t\t\t\t\treturn new BaseTracer(hOptions)\r\n"
  ]
}