{
  "version": 3,
  "file": "peggy.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\peggy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# peggy.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport {pathToFileURL} from 'node:url'\r\nimport peggy from 'peggy'\r\n\r\nimport {\r\n\tundef, defined, notdefined, gen2block, hasKey, isEmpty, nonEmpty,\r\n\tisString, isHash, isArray, isFunction, isInteger,\r\n\tblockToArray, arrayToBlock, escapeStr, getOptions,\r\n\tassert, croak, OL, DUMP, js2uri, ML, keys, pass,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tindentLevel, indented, undented,\r\n\t} from '@jdeighan/llutils/indent'\r\nimport {\r\n\treadTextFile, barf, fileExt, withExt, isFile, myself,\r\n\tnormalize, mkpath, fileDir,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {brew} from '@jdeighan/llutils/coffee'\r\nimport {Fetcher} from '@jdeighan/llutils/fetcher'\r\nimport {SectionMap} from '@jdeighan/llutils/section-map'\r\n\r\n# --- code converter is applied to each code block in a peggy file\r\n#     using type: 'javascript' allows you to use indentation syntax\r\n#        for everything but the code blocks\r\nhCodeConverters = {\r\n\tcoffee: brew\r\n\tjavascript: (js) => return {js, sourceMap: undef}\r\n\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC !!!\r\n\r\nexport getParser = (filePath, hOptions={}) =>\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tfullPath = mkpath(filePath)\r\n\tif debug\r\n\t\tconsole.log \"PG file = #{OL(fullPath)}\"\r\n\tassert isFile(fullPath), \"No such file: #{OL(filePath)}\"\r\n\tassert (fileExt(fullPath)=='.peggy'), \"Not a peggy file: #{OL(filePath)}\"\r\n\r\n\t{jsFilePath} = peggifyFile(fullPath)\r\n\tif debug\r\n\t\tconsole.log \"JS file = #{OL(jsFilePath)}\"\r\n\r\n\t# --- h has keys StartRules, SyntaxError, parse\r\n\th = await import(pathToFileURL(jsFilePath))\r\n\tassert isFunction(h.parse), \"Bad return from import\"\r\n\r\n\treturn (str, hOptions={}) =>\r\n\t\t# --- Valid options:\r\n\t\t#        start - what is the start rule (usually first rule)\r\n\t\t#        tracer - 'none','peggy','default'\r\n\r\n\t\t{start, tracer} = getOptions hOptions, {\r\n\t\t\tstart: undef     #     name of start rule\r\n\t\t\ttracer: 'none'   # --- can be none/peggy/default/a function\r\n\t\t\t}\r\n\r\n\t\thParseOptions = {}\r\n\t\tif defined(start)\r\n\t\t\thParseOptions.startRule = start\r\n\t\tswitch tracer\r\n\t\t\twhen 'none'\r\n\t\t\t\thParseOptions.tracer = new Tracer()\r\n\t\t\twhen 'peggy'\r\n\t\t\t\tpass()\r\n\t\t\twhen 'default'\r\n\t\t\t\thParseOptions.tracer = new MyTracer()\r\n\t\t\telse\r\n\t\t\t\tassert isFunction(tracer), \"tracer not a function\"\r\n\t\t\t\thParseOptions.tracer = tracer\r\n\r\n\t\treturn h.parse(str, hParseOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n#    code - a block\r\n#    hMetaData\r\n#       - 'type' (usually 'coffee')\r\n#       - 'trace' (default: true)\r\n\r\nexport peggify = (code, hMetaData={}, filePath=undef) =>\r\n\r\n\tassert isString(code), \"code not a string: #{typeof code}\"\r\n\r\n\t# --- type determines which preprocessor to use, if any\r\n\t{type, debug, trace} = getOptions hMetaData, {\r\n\t\ttype: 'coffee'\r\n\t\tdebug: false\r\n\t\ttrace: true\r\n\t\t}\r\n\r\n\t# --- preprocess code if required\r\n\tif defined(type)\r\n\t\tif debug\r\n\t\t\tconsole.log \"TYPE: #{OL(type)}\"\r\n\t\tassert isFunction(hCodeConverters[type]), \"Bad type #{type}\"\r\n\t\tpeggyCode = PreProcessPeggy(code, hMetaData)\r\n\telse\r\n\t\tpeggyCode = code\r\n\r\n\tjs = peggy.generate(peggyCode, {\r\n\t\tallowedStartRules: ['*']\r\n\t\tformat: 'es'\r\n\t\toutput: 'source'  # --- return a string of JS\r\n\t\ttrace\r\n\t\t})\r\n\treturn {\r\n\t\tjs\r\n\t\tsourceMap: undef\r\n\t\tpeggyCode\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport peggifyFile = (filePath) =>\r\n\r\n\t{hMetaData, reader} = readTextFile(filePath)\r\n\tcode = gen2block(reader)\r\n\t{js, sourceMap} = peggify code, hMetaData, {\r\n\t\tfilePath\r\n\t\toutput: \"source\"\r\n\t\t}\r\n\tjsFilePath = withExt(filePath, '.js')\r\n\tbarf js, jsFilePath\r\n\tif defined(sourceMap)\r\n\t\tsourceMapFilePath = withExt(filePath, '.js.map')\r\n\t\tbarf sourceMap, sourceMapFilePath\r\n\treturn {\r\n\t\tjsFilePath\r\n\t\tsourceMapFilePath\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\ngetVars = (matchExpr) =>\r\n\r\n\tlVars = []\r\n\tfor match from matchExpr.matchAll(/(\\S+)\\:/g)\r\n\t\tstr = match[1]\r\n\t\tif nonEmpty(str) && (str.indexOf('$') != 0)\r\n\t\t\tlVars.push str\r\n\treturn lVars\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport PreProcessPeggy = (code, hMetaData) =>\r\n\r\n\tassert isString(code), \"not a string: #{typeof code}\"\r\n\t{type, debug} = getOptions hMetaData, {\r\n\t\ttype: 'coffee'\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tsrc = new Fetcher(code, {\r\n\t\tfilterFunc: (line) =>\r\n\t\t\tnonEmpty(line) && !line.match(/^\\s*#\\s/)\r\n\t\t})\r\n\r\n\tif debug\r\n\t\tsrc.dump 'ALL CODE'\r\n\r\n\tsm = new SectionMap [\r\n\t\t'header'\r\n\t\t'init'\r\n\t\t'rules'\r\n\t\t], {    # --- converters\r\n\r\n\t\t# --- 'header' will be CoffeeScript code\r\n\t\theader: (block) =>\r\n\t\t\ttry\r\n\t\t\t\t{js, sourceMap} = hCodeConverters[type](block)\r\n\t\t\tcatch err\r\n\t\t\t\tconsole.log \"ERROR: Unable to convert #{OL(type)} code to JS\"\r\n\t\t\t\tconsole.log err\r\n\t\t\t\tjs = ''\r\n\r\n\t\t\tif nonEmpty(js)\r\n\t\t\t\treturn ['{{', indented(js), '}}'].join(\"\\n\")\r\n\t\t\t\t# return \"{{\\n#{js}\\n}}\\n\"\r\n\t\t\telse\r\n\t\t\t\treturn undef\r\n\r\n\t\t# --- 'init' section will already be JavaScript\r\n\t\tinit: (block) =>\r\n\t\t\tif nonEmpty(block)\r\n\t\t\t\treturn \"\"\"\r\n\t\t\t\t\t{\r\n\t\t\t\t\t#{block}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\"\"\"\r\n\t\t\telse\r\n\t\t\t\treturn undef\r\n\t\t}\r\n\r\n\tnumFuncs = 0    # used to construct unique function names\r\n\r\n\tif (src.next() == 'GLOBAL')\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP coffeeCode, 'GLOBAL CODE'\r\n\t\t\tsm.section('header').add(coffeeCode)\r\n\r\n\tif (src.next() == 'PER_PARSE')\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP code, 'PER_PARSE CODE'\r\n\t\t\tsm.section('header').add(\"init = () =>\")\r\n\t\t\tsm.section('header').add(1, coffeeCode)\r\n\t\t\tsm.section('init').add('init();')\r\n\r\n\thRules = {}     # { <ruleName>: <numMatchExpr>, ... }\r\n\r\n\twhile src.moreLines()\r\n\r\n\t\t# --- Get rule name - must be left aligned, no whitespace\r\n\t\tassert (src.nextLevel() == 0), \"Next level not 0\"\r\n\t\tname = src.get()\r\n\t\tif debug\r\n\t\t\tconsole.log \"RULE: #{name}\"\r\n\t\tassert name.match(/^[A-Za-z][A-Za-z0-9_-]*$/),\r\n\t\t\t\t\"Bad name: #{OL(name)}\"\r\n\t\tassert !hasKey(hRules, name), \"duplicate rule #{name}\"\r\n\t\tsm.section('rules').add(name)\r\n\t\thRules[name] = 0   # number of options\r\n\r\n\t\twhile (src.nextLevel() == 1)\r\n\r\n\t\t\t# --- Get match expression\r\n\t\t\tmatchExpr = src.get().trim()\r\n\r\n\t\t\t# --- Extract names of new variables\r\n\t\t\tstrVars = getVars(matchExpr).join(',')\r\n\r\n\t\t\t# --- output the match expression\r\n\t\t\tch = if (hRules[name] == 0) then '=' else '/'\r\n\t\t\thRules[name] += 1\r\n\r\n\t\t\tsm.section('rules').add(1, \"#{ch} #{matchExpr}\")\r\n\r\n\t\t\tcoffeeCode = src.getBlock(2)\r\n\t\t\tif nonEmpty(coffeeCode)\r\n\t\t\t\tif debug\r\n\t\t\t\t\tDUMP code, 'CODE'\r\n\t\t\t\tfuncName = \"func#{numFuncs}\"\r\n\t\t\t\tnumFuncs += 1\r\n\r\n\t\t\t\tline = \"#{funcName} = (#{strVars}) =>\"\r\n\t\t\t\tsm.section('header').add(line)\r\n\t\t\t\tsm.section('header').add(1, coffeeCode)\r\n\r\n\t\t\t\tline = \"{ return #{funcName}(#{strVars}); }\"\r\n\t\t\t\tsm.section('rules').add(2, line)\r\n\r\n\tif debug\r\n\t\tsm.dump()\r\n\r\n\t# --- Get the built code\r\n\tpeggyCode = sm.getBlock()\r\n\tif debug\r\n\t\tDUMP peggyCode, 'PEGGY CODE'\r\n\treturn peggyCode\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n# --- Tracer object does not log\r\n\r\nclass Tracer\r\n\r\n\ttrace: ({type, rule, location}) ->\r\n\t\tpass()\r\n\r\nclass MyTracer extends Tracer\r\n\r\n\tconstructor: () ->\r\n\t\tsuper()\r\n\t\t@level = 0\r\n\r\n\tprefix: () ->\r\n\t\treturn \"|  \".repeat(@level)\r\n\r\n\ttrace: ({type, rule, location, match}) ->\r\n\t\tswitch type\r\n\t\t\twhen 'rule.enter'\r\n\t\t\t\tconsole.log \"#{@prefix()}? #{rule}\"\r\n\t\t\t\t@level += 1\r\n\t\t\twhen 'rule.fail'\r\n\t\t\t\t@level -= 1;\r\n\t\t\t\tconsole.log \"#{@prefix()}NO\"\r\n\t\t\twhen 'rule.match'\r\n\t\t\t\t@level -= 1\r\n\t\t\t\tif defined(match)\r\n\t\t\t\t\tconsole.log \"#{@prefix()}YES - #{OL(match)}\"\r\n\t\t\t\telse\r\n\t\t\t\t\tconsole.log \"#{@prefix()}YES\"\r\n\t\t\telse\r\n\t\t\t\tconsole.log \"UNKNOWN type: #{type}\"\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getTracer = (type) =>\r\n\r\n\tswitch type\r\n\t\twhen 'default'\r\n\t\t\treturn new MyTracer()\r\n\t\twhen 'peggy'\r\n\t\t\treturn undef\r\n\t\telse\r\n\t\t\treturn new Tracer()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- a converter should return {js: jsCode, sourceMap: srcMap}\r\n\r\nexport addCodeConverter = (name, func) =>\r\n\r\n\tassert isString(name, {nonEmpty: true}), \"Bad name: #{name}\"\r\n\tassert ! hasKey(hCodeConverters, name),\r\n\t\t\t\"#{name} code converter already exists\"\r\n\tassert (typeof func == 'function'), \"Not a function: #{func}\"\r\n\thCodeConverters[name] = func\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}