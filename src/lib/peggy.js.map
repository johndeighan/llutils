{
  "version": 3,
  "file": "peggy.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\peggy.coffee"
  ],
  "names": [],
  "mappings": "AAAc;AAAA,IAAA,eAAA,EAAA;;AAEd,OAAO,OAAP,MAAA;;AACA,OAAA;EAAQ,aAAR;CAAA,MAAA;;AACA,OAAO,KAAP,MAAA;;AACA,OAAO,EAAP,MAAA;;AAEA,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,SAD7B;EACwC,MADxC;EACgD,OADhD;EACyD,QADzD;EAEC,QAFD;EAEW,MAFX;EAEmB,OAFnB;EAE4B,UAF5B;EAEwC,SAFxC;EAGC,YAHD;EAGe,YAHf;EAG6B,SAH7B;EAGwC,UAHxC;EAIC,MAJD;EAIS,KAJT;EAIgB,EAJhB;EAIoB,MAJpB;EAI4B,EAJ5B;EAIgC,IAJhC;EAIsC,IAJtC;EAKC,QALD;EAKW,QALX;CAAA,MAAA;;AAOA,OAAA;EAAQ,IAAR;CAAA,MAAA;;AACA,OAAA;EACC,WADD;EACc,QADd;EACwB,QADxB;CAAA,MAAA;;AAGA,OAAA;EACC,YADD;EACe,IADf;EACqB,KADrB;EAC4B,OAD5B;EACqC,OADrC;EAC8C,MAD9C;EAEC,SAFD;EAEY,MAFZ;EAEoB,OAFpB;CAAA,MAAA;;AAIA,OAAA;EAAQ,IAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,UAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,SAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,cAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,SAAR;CAAA,MAAA;;AAEA,MAAA,CAAO,UAAA,CAAW,IAAX,CAAP,EAAyB,CAAA,wBAAA,CAAA,CAA2B,EAAA,CAAG,IAAH,CAA3B,CAAA,CAAzB,EA9Bc;;;;;AAoCd,eAAA,GAAkB;EACjB,MAAA,EAAQ;AADS;;AAIlB,GAAA,GAAM,IAAA,GAAO,GAAG,CAAC,MAAJ,CAAW,EAAX,EAxCC;;;AA4Cd,OAAA,IAAO,SAAA,GAAY,CAAC,QAAD,CAAA,GAAA;AAEnB,MAAA,QAAA,EAAA,SAAA,EAAA;EAAC,CAAA,CAAC,SAAD,EAAY,QAAZ,CAAA,GAAwB,YAAA,CAAa,QAAb,EAAuB,OAAvB,CAAxB;EACA,SAAA,GAAY,eAAA,CAAgB,QAAhB,EAA0B,SAA1B;AAEZ,SAAO;IACN,MAAA,EAAQ,QADF;IAEN,IAAA,EAAM;EAFA;AALW,EA5CL;;;;AAyDd,OAAA,IAAO,OAAA,GAAU,CAAC,IAAD,EAAO,YAAU,CAAA,CAAjB,EAAqB,WAAS,KAA9B,CAAA,GAAA;AAEjB,MAAA,OAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,KAAA,EAAA,YAAA,EAAA,eAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA,CAAA,EAAA,OAAA,EAAA,KAAA,EAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA;EAAC,MAAA,CAAO,QAAA,CAAS,IAAT,CAAP,EAAuB,CAAA,mBAAA,CAAA,CAAsB,OAAO,IAA7B,CAAA,CAAvB,EAAD;;;EAIC,CAAA,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,iBAArB,EAAwC,OAAxC,EACC,QADD,EACW,cADX,EAC2B,OAD3B,CAAA,GAEK,UAAA,CAAW,SAAX,EAAsB;IAC1B,IAAA,EAAM,KADoB;IAE1B,KAAA,EAAO,KAFmB;IAG1B,KAAA,EAAO,IAHmB;IAI1B,iBAAA,EAAmB,CAAC,GAAD,CAJO;IAK1B,OAAA,EAAS,KALiB;IAM1B,QAAA,EAAU,KANgB;IAO1B,cAAA,EAAgB,KAPU;IAQ1B,OAAA,EAAS;EARiB,CAAtB,CAFL,EAJD;;EAkBC,eAAA,GAAkB,YAAA,GAAe;EACjC,IAAI,KAAA,KAAS,YAAb;IACC,KAAA,GAAQ,eAAA,GAAkB,KAD3B;GAAA,MAEK,IAAI,KAAA,KAAS,SAAb;IACJ,KAAA,GAAQ,YAAA,GAAe,KADnB;;EAGL,IAAG,KAAH;IACC,IAAG,IAAH;MACC,OAAO,CAAC,GAAR,CAAY,CAAA,QAAA,CAAA,CAAW,EAAA,CAAG,QAAH,CAAX,CAAA,IAAA,CAAA,CAA8B,IAA9B,CAAA,CAAZ,EADD;KAAA,MAAA;MAGC,OAAO,CAAC,GAAR,CAAY,CAAA,QAAA,CAAA,CAAW,EAAA,CAAG,QAAH,CAAX,CAAA,CAAZ,EAHD;KADD;GAxBD;;EA+BC,IAAG,OAAA,CAAQ,IAAR,CAAH;IACC,MAAA,CAAO,UAAA,CAAW,eAAe,CAAC,IAAD,CAA1B,CAAP,EAA0C,CAAA,SAAA,CAAA,CAAY,IAAZ,CAAA,CAA1C;IACA,GAAA,GAAM,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,SAAlB;IACN,GAAG,CAAC,KAAJ,GAAY;IACZ,SAAA,GAAY,eAAA,CAAgB,IAAhB,EAAsB,GAAtB;IACZ,IAAG,OAAA,CAAQ,QAAR,CAAH;MACC,IAAA,CAAK,SAAL,EAAgB,OAAA,CAAQ,QAAR,EAAkB,YAAlB,CAAhB,EADD;KALD;GAAA,MAAA;IAQC,SAAA,GAAY,KARb;;EAUA,IAAG,QAAA,CAAS,OAAT,CAAH;IACC,KAAA,GAAQ;MACP;QAAC,MAAA,EAAQ,QAAT;QAAmB,IAAA,EAAM;MAAzB,CADO;MAEP,SAAA,CAAU,OAAV,CAFO;MADT;GAAA,MAKK,IAAG,OAAA,CAAQ,OAAR,CAAH;IACJ,KAAA,GAAQ;MACP;QAAC,MAAA,EAAQ,QAAT;QAAmB,IAAA,EAAM;MAAzB,CADO;;IAGR,KAAA,yCAAA;;MACC,KAAK,CAAC,IAAN,CAAW,SAAA,CAAU,IAAV,CAAX;IADD,CAJI;GAAA,MAAA;IAOJ,KAAA,GAAQ,UAPJ;;EASL,IAAG,KAAH;IACC,OAAO,CAAC,GAAR,CAAY,SAAZ;IACA,OAAA,GAAU;IACV,KAAA,yCAAA;OAAI,CAAC,MAAD,EAAS,IAAT;MACH,OAAO,CAAC,GAAR,CAAY,CAAA,WAAA,CAAA,CAAc,EAAA,CAAG,MAAH,CAAd,CAAA,CAAZ;MACA,OAAO,CAAC,GAAR,CAAY,CAAA,SAAA,CAAA,CAAY,SAAA,CAAU,IAAV,CAAe,CAAC,SAAhB,CAA0B,CAA1B,EAA6B,EAA7B,CAAZ,CAAA,CAAZ;MACA,OAAA,IAAW;IAHZ;IAIA,IAAG,YAAH;MACC,IAAA,CAAK,OAAL,EAAc,UAAd,EADD;KAPD;;EAUA,QAAA,GAAW;IACV,iBADU;IAEV,MAAA,EAAQ,IAFE;IAGV;EAHU;EAMX,IAAG,QAAH;IACC,QAAA,GAAW,QAAQ,CAAC,QAAT,GAAoB,IAAI,QAAJ,CAAA,EADhC;;EAGA,IAAG,cAAH;IACC,cAAA,GAAiB,QAAQ,CAAC,cAAT,GAA0B,IAAI,cAAJ,CAAA,EAD5C;;EAGA,IAAG,OAAH;IACC,QAAQ,CAAC,OAAT,GAAmB,OAAA,CAAQ,QAAR,EAAkB,UAAlB,EADpB;;AAGA;IACC,IAAG,OAAA,CAAQ,QAAR,CAAH;MACC,QAAQ,CAAC,aAAT,GAAyB;MACzB,QAAQ,CAAC,MAAT,GAAkB;MAElB,UAAA,GAAa,KAAK,CAAC,QAAN,CAAe,KAAf,EAAsB,QAAtB;MAEb,IAAG,QAAH;QACC,QAAQ,CAAC,OAAT,CAAiB,OAAA,CAAQ,QAAR,EAAkB,UAAlB,CAAjB,EADD;;MAGA,IAAG,cAAH;QACC,cAAc,CAAC,OAAf,CAAuB,OAAA,CAAQ,QAAR,EAAkB,gBAAlB,CAAvB,EADD;;MAGA,CAAA;QAAC,IAAA,EAAM,MAAP;QAAe;MAAf,CAAA,GAAsB,UAAU,CAAC,qBAAX,CAAA,CAAtB;MACA,MAAA,CAAO,QAAA,CAAS,MAAT,CAAP,EAAyB,CAAA,SAAA,CAAA,CAAY,EAAA,CAAG,MAAH,CAAZ,CAAA,CAAzB;MACA,SAAA,GAAY,GAAG,CAAC,QAAJ,CAAA;MACZ,MAAA,CAAO,QAAA,CAAS,SAAT,CAAP,EAA4B,CAAA,YAAA,CAAA,CAAe,EAAA,CAAG,SAAH,CAAf,CAAA,CAA5B;AACA,aAAO;QACN,OAAA,EAAS,IADH;QAEN,EAAA,EAAI,MAFE;QAGN,IAAA,EAAM,MAHA;QAIN,SAAA,EAAW,GAAG,CAAC,QAAJ,CAAA,CAJL;QAKN;MALM,EAhBR;KAAA,MAAA;MAwBC,QAAQ,CAAC,MAAT,GAAkB;MAClB,IAAA,GAAO,KAAK,CAAC,QAAN,CAAe,KAAf,EAAsB,QAAtB;AACP,aAAO;QACN,OAAA,EAAS,IADH;QAEN,SAFM;QAGN,IAHM;QAIN,EAAA,EAAI;MAJE,EA1BR;KADD;GAiCA,aAAA;IAAM,YACP;;;IAEE,IAAG,OAAA,CAAQ,QAAR,CAAA,IAAqB,OAAA,CAAQ,IAAR,CAArB,IAAsC,CAAE,KAA3C;MACC,IAAA,CAAK,SAAL,EAAgB,OAAA,CAAQ,QAAR,EAAkB,YAAlB,CAAhB,EADD;;IAEA,MAAM,IALP;;AAnHgB,EAzDH;;;AAqLd,OAAA,IAAO,UAAA,GAAa,CAAC,GAAD,CAAA,GAAA;AAEpB,MAAA,CAAA,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA;EAAC,QAAA,GAAW,GAAG,CAAC,KAAJ,CAAU,wBAAV,EAAZ;;;EAQC,IAAG,UAAA,CAAW,QAAX,CAAH;AACC,WAAO,CAAC,GAAG,CAAC,IAAJ,CAAA,CAAD,EAAa,GAAG,CAAC,MAAjB,EADR;GARD;;EAYC,CAAC,CAAD,EAAI,GAAJ,EAAS,EAAT,EAAa,IAAb,CAAA,GAAqB;EACrB,MAAA,GAAS,GAAG,CAAC;EACb,GAAA,GAAM,GAAG,CAAC,IAAJ,CAAA;EACN,IAAI,GAAG,CAAC,MAAJ,GAAa,CAAjB;AACC,WAAO,CAAC,GAAD,EAAM,MAAN,EADR;GAfD;;;;;EAsBC,UAAA,GAAa,MAAA,GAAS,CAAT,GAAa,EAAE,CAAC;EAC7B,QAAA,GAAW,QAAA,CAAS,GAAT,EAAc,UAAd;EACX,MAAA,CAAQ,GAAG,CAAC,UAAD,CAAH,KAAmB,GAA3B,EACE,CAAA,iBAAA,CAAA,CAAoB,UAApB,CAAA,IAAA,CAAA,CAAqC,EAAA,CAAG,GAAH,CAArC,CAAA,CADF;EAEA,MAAA,CAAQ,GAAG,CAAC,QAAD,CAAH,KAAmB,GAA3B,EACE,CAAA,eAAA,CAAA,CAAkB,QAAlB,CAAA,IAAA,CAAA,CAAiC,EAAA,CAAG,GAAH,CAAjC,CAAA,CADF;EAEA,MAAA,GAAS,GAAG,CAAC,SAAJ,CAAc,UAAA,GAAW,CAAzB,EAA4B,QAA5B;EACT,IAAG,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAAH;AACC,WAAO,CAAC,CAAA,GAAA,CAAA,CAAM,MAAN,CAAA,aAAA,CAAD,EAA8B,QAAA,GAAS,CAAvC,EADR;GAAA,MAAA;AAGC,WAAO,CAAC,CAAA,GAAA,CAAA,CAAM,MAAN,CAAA,cAAA,CAAD,EAA+B,QAAA,GAAS,CAAxC,EAHR;;AA/BmB,EArLN;;;AA2Nd,OAAA,IAAO,eAAA,GAAkB,CAAC,IAAD,EAAO,YAAU,CAAA,CAAjB,EAAqB,WAAS,KAA9B,CAAA,GAAA;AAEzB,MAAA,MAAA,EAAA,EAAA,EAAA,UAAA,EAAA,KAAA,EAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,aAAA,EAAA,WAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,SAAA,EAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA;EAAC,MAAA,CAAO,QAAA,CAAS,IAAT,CAAP,EAAuB,CAAA,cAAA,CAAA,CAAiB,OAAO,IAAxB,CAAA,CAAvB;EACA,CAAA,CAAC,IAAD,EAAO,KAAP,CAAA,GAAgB,UAAA,CAAW,SAAX,EAAsB;IACrC,IAAA,EAAM,QAD+B;IAErC,KAAA,EAAO;EAF8B,CAAtB,CAAhB;EAIA,IAAG,UAAA,CAAW,IAAX,CAAH;AACC,WAAO,KADR;;EAGA,GAAA,GAAM,IAAI,UAAJ,CAAe,IAAf;EAEN,IAAG,KAAH;IACC,GAAG,CAAC,IAAJ,CAAS,UAAT,EADD;;EAGA,EAAA,GAAK,IAAI,UAAJ,CAAe;IACnB,QADmB;IAEnB,MAFmB;IAGnB,OAHmB;GAAf,EAID,CAAA;;;IAGH,MAAA,EAAQ,CAAC,KAAD,CAAA,GAAA;AACV,UAAA,GAAA,EAAA;AAAG;QACC,CAAA,CAAC,IAAD,EAAO,SAAP,CAAA,GAAoB,eAAe,CAAC,IAAD,CAAf,CAAsB,KAAtB,CAApB,EADD;OAGA,aAAA;QAAM;QACL,OAAO,CAAC,GAAR,CAAY,CAAA,yBAAA,CAAA,CAA4B,EAAA,CAAG,IAAH,CAA5B,CAAA,WAAA,CAAZ;QACA,OAAO,CAAC,GAAR,CAAY,GAAZ;QACA,IAAA,GAAO,GAHR;;AAKA,aAAO,CACN,IADM,EAEN,QAAA,CAAS,IAAT,CAFM,EAGN,IAHM,CAIL,CAAC,IAJI,CAIC,IAJD;IATA,CAHL;;IAmBH,IAAA,EAAM,CAAC,KAAD,CAAA,GAAA;MACL,IAAG,QAAA,CAAS,KAAT,CAAH;AACC,eAAO,CAAA;AAAA,CAAA,CAEJ,KAFI,CAAA;CAAA,EADR;OAAA,MAAA;AAOC,eAAO,MAPR;;IADK;EAnBH,CAJC;EAkCL,aAAA,GAAgB,EAAE,CAAC,OAAH,CAAW,QAAX;EAChB,WAAA,GAAgB,EAAE,CAAC,OAAH,CAAW,MAAX;EAChB,YAAA,GAAgB,EAAE,CAAC,OAAH,CAAW,OAAX;EAEhB,IAAG,EAAA,CAAG,GAAG,CAAC,IAAJ,CAAA,CAAH,EAAe,CAAC,CAAD,EAAI,QAAJ,CAAf,CAAH;IACC,GAAG,CAAC,IAAJ,CAAA;IACA,UAAA,GAAa,GAAG,CAAC,QAAJ,CAAa,CAAb;IACb,IAAG,QAAA,CAAS,UAAT,CAAH;MACC,IAAG,KAAH;QACC,IAAA,CAAK,UAAL,EAAiB,aAAjB,EADD;;MAEA,aAAa,CAAC,GAAd,CAAkB,UAAlB,EAHD;KAHD;;EAQA,IAAG,EAAA,CAAG,GAAG,CAAC,IAAJ,CAAA,CAAH,EAAe,CAAC,CAAD,EAAI,WAAJ,CAAf,CAAH;IACC,GAAG,CAAC,IAAJ,CAAA;IACA,UAAA,GAAa,GAAG,CAAC,QAAJ,CAAa,CAAb;IACb,IAAG,QAAA,CAAS,UAAT,CAAH;MACC,IAAG,KAAH;QACC,IAAA,CAAK,IAAL,EAAW,gBAAX,EADD;;MAEA,aAAa,CAAC,GAAd,CAAkB,cAAlB;MACA,aAAa,CAAC,GAAd,CAAkB,CAAlB,EAAqB,UAArB;MACA,WAAW,CAAC,GAAZ,CAAgB,SAAhB,EALD;KAHD;;EAUA,MAAA,GAAS,CAAA,EArEV;;;EAyEC,YAAA,GAAe,CAAA,CAAA,GAAA;AAEhB,QAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA;;IACE,CAAC,KAAD,EAAQ,SAAR,CAAA,GAAqB,GAAG,CAAC,KAAJ,CAAA;IACrB,MAAA,CAAQ,KAAA,KAAS,CAAjB,EAAqB,mBAArB,EAFF;;IAKE,KAAA,GAAQ;IACR,EAAA,GAAK;AACL;IAAA,KAAA,YAAA;MACC,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,CAAD,CAAhB;IADD;AAGA,WAAO,CACN,QAAA,CAAS,SAAT,EAAoB,UAApB,CAA+B,CAAC,IAAhC,CAAqC,GAArC,CADM,EAEN,KAFM;EAZO;AAiBf,SAAM,GAAG,CAAC,SAAJ,CAAA,CAAN,GAAA;;IAGC,CAAC,KAAD,EAAQ,IAAR,CAAA,GAAgB,GAAG,CAAC,KAAJ,CAAA;IAChB,MAAA,CAAQ,KAAA,KAAS,CAAjB,EAAqB,kBAArB;IACA,IAAG,KAAH;MACC,OAAO,CAAC,GAAR,CAAY,CAAA,MAAA,CAAA,CAAS,IAAT,CAAA,CAAZ,EADD;;IAEA,MAAA,CAAO,IAAI,CAAC,KAAL,CAAW,2BAAX,CAAP,EACE,CAAA,UAAA,CAAA,CAAa,EAAA,CAAG,IAAH,CAAb,CAAA,CADF;IAEA,MAAA,CAAO,CAAC,MAAA,CAAO,MAAP,EAAe,IAAf,CAAR,EAA8B,CAAA,eAAA,CAAA,CAAkB,IAAlB,CAAA,CAA9B;IAEA,YAAY,CAAC,GAAb,CAAiB,EAAjB;IACA,YAAY,CAAC,GAAb,CAAiB,IAAjB;IACA,MAAM,CAAC,IAAD,CAAN,GAAe,EAXjB;AAaE,WAAO,GAAG,CAAC,SAAJ,CAAA,CAAA,KAAmB,CAA1B;MAEC,CAAC,SAAD,EAAY,KAAZ,CAAA,GAAqB,YAAA,CAAA;MACrB,MAAA,GAAS,KAAK,CAAC,IAAN,CAAW,IAAX,EADZ;;MAIG,EAAA,GAAQ,CAAC,MAAM,CAAC,IAAD,CAAN,KAAgB,CAAjB,CAAH,GAA4B,GAA5B,GAAqC;MAC1C,MAAM,CAAC,IAAD,CAAN,IAAgB;MAEhB,YAAY,CAAC,GAAb,CAAiB,EAAjB;MACA,YAAY,CAAC,GAAb,CAAiB,CAAjB,EAAoB,CAAA,CAAA,CAAG,EAAH,EAAA,CAAA,CAAS,SAAT,CAAA,CAApB;MAEA,UAAA,GAAa,GAAG,CAAC,QAAJ,CAAa,CAAb;MACb,IAAG,QAAA,CAAS,UAAT,CAAH;QACC,IAAG,KAAH;UACC,IAAA,CAAK,IAAL,EAAW,MAAX,EADD;;QAEA,QAAA,GAAW,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA,EAAA,CAAA,CAAmB,MAAM,CAAC,IAAD,CAAzB,CAAA;QACX,aAAa,CAAC,GAAd,CAAkB,GAAlB;QACA,aAAa,CAAC,GAAd,CAAkB,EAAlB;QACA,aAAa,CAAC,GAAd,CAAkB,CAAA,CAAA,CAAG,QAAH,CAAA,IAAA,CAAA,CAAkB,MAAlB,CAAA,IAAA,CAAlB;QACA,aAAa,CAAC,GAAd,CAAkB,EAAlB;QACA,aAAa,CAAC,GAAd,CAAkB,CAAlB,EAAqB,UAArB;QAEA,IAAA,GAAO,CAAA,SAAA,CAAA,CAAY,QAAZ,CAAA,CAAA,CAAA,CAAwB,MAAxB,CAAA,IAAA;QACP,YAAY,CAAC,GAAb,CAAiB,CAAjB,EAAoB,IAApB,EAXD;;IAbD;EAfD;EAyCA,IAAG,KAAH;IACC,EAAE,CAAC,IAAH,CAAA,EADD;GAnID;;EAuIC,SAAA,GAAY,EAAE,CAAC,QAAH,CAAA;EACZ,IAAG,KAAH;IACC,IAAA,CAAK,SAAL,EAAgB,YAAhB,EADD;;AAEA,SAAO;AA5IiB,EA3NX;;;;AA4Wd,OAAA,IAAO,gBAAA,GAAmB,CAAC,IAAD,EAAO,IAAP,CAAA,GAAA;EAEzB,MAAA,CAAO,QAAA,CAAS,IAAT,EAAe;IAAC,QAAA,EAAU;EAAX,CAAf,CAAP,EAAyC,CAAA,UAAA,CAAA,CAAa,IAAb,CAAA,CAAzC;EACA,MAAA,CAAO,CAAE,MAAA,CAAO,eAAP,EAAwB,IAAxB,CAAT,EACE,CAAA,CAAA,CAAG,IAAH,CAAA,8BAAA,CADF;EAEA,MAAA,CAAQ,OAAO,IAAP,KAAe,UAAvB,EAAoC,CAAA,gBAAA,CAAA,CAAmB,IAAnB,CAAA,CAApC;EACA,eAAe,CAAC,IAAD,CAAf,GAAwB;AANC,EA5WZ;;;;AAwXd,OAAA,IAAO,SAAA,GAAY,KAAA,CAAC,QAAD,EAAW,WAAS,CAAA,CAApB,CAAA,GAAA;AAEnB,MAAA,KAAA,EAAA,QAAA,EAAA,CAAA,EAAA;EAAC,CAAA,CAAC,KAAD,CAAA,GAAU,UAAA,CAAW,QAAX,EAAqB;IAC9B,KAAA,EAAO;EADuB,CAArB,CAAV;EAIA,QAAA,GAAW,MAAA,CAAO,QAAP;EACX,IAAG,KAAH;IACC,OAAO,CAAC,GAAR,CAAY,CAAA,aAAA,CAAA,CAAgB,EAAA,CAAG,QAAH,CAAhB,CAAA,CAAZ,EADD;;EAEA,MAAA,CAAO,MAAA,CAAO,QAAP,CAAP,EAAyB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,QAAH,CAAjB,CAAA,CAAzB;EACA,MAAA,CAAQ,OAAA,CAAQ,QAAR,CAAA,KAAmB,QAA3B,EAAsC,CAAA,kBAAA,CAAA,CAAqB,EAAA,CAAG,QAAH,CAArB,CAAA,CAAtC;EAEA,SAAA,CAAU,QAAV,EAAoB,OAApB,EAA6B,KAA7B;EACA,UAAA,GAAa,OAAA,CAAQ,QAAR,EAAkB,KAAlB;EACb,IAAG,KAAH;IACC,OAAO,CAAC,GAAR,CAAY,CAAA,UAAA,CAAA,CAAa,EAAA,CAAG,UAAH,CAAb,CAAA,CAAZ,EADD;GAZD;;EAgBC,CAAA,GAAI,CAAA,MAAM,MAAA,CAAO,aAAA,CAAc,UAAd,CAAP,CAAN;EACJ,MAAA,CAAO,UAAA,CAAW,CAAC,CAAC,KAAb,CAAP,EAA4B,wBAA5B;AAEA,SAAO,CAAC,GAAD,EAAM,WAAS,CAAA,CAAf,CAAA,GAAA;AACR,QAAA,aAAA,EAAA,KAAA,EAAA,MAAA;;;;IAIE,CAAA,CAAC,KAAD,EAAQ,MAAR,CAAA,GAAkB,UAAA,CAAW,QAAX,EAAqB;MACtC,KAAA,EAAO,KAD+B;MAEtC,MAAA,EAAQ,MAF8B;IAAA,CAArB,CAAlB;IAKA,aAAA,GAAgB,CAAA;IAChB,IAAG,OAAA,CAAQ,KAAR,CAAH;MACC,aAAa,CAAC,SAAd,GAA0B,MAD3B;;AAEA,YAAO,MAAP;AAAA,WACM,MADN;AAAA,WACa,OADb;AAAA,WACqB,SADrB;QAEE,aAAa,CAAC,MAAd,GAAuB,SAAA,CAAU,MAAV;AADJ;AADrB;QAIE,MAAA,CAAO,UAAA,CAAW,MAAX,CAAP,EAA2B,uBAA3B;QACA,aAAa,CAAC,MAAd,GAAuB;AALzB;AAOA,WAAO,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAa,aAAb;EApBD;AArBW;;AAxXL",
  "sourcesContent": [
    "# peggy.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport {pathToFileURL} from 'node:url'\r\nimport peggy from 'peggy'\r\nimport eq from 'deep-equal'\r\n\r\nimport {\r\n\tundef, defined, notdefined, gen2block, hasKey, isEmpty, nonEmpty,\r\n\tisString, isHash, isArray, isFunction, isInteger,\r\n\tblockToArray, arrayToBlock, escapeStr, getOptions,\r\n\tassert, croak, OL, js2uri, ML, keys, pass,\r\n\tmatchPos, splitStr,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\nimport {\r\n\tindentLevel, indented, undented,\r\n\t} from '@jdeighan/llutils/indent'\r\nimport {\r\n\treadTextFile, barf, slurp, fileExt, withExt, isFile,\r\n\tnormalize, mkpath, fileDir,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {brew} from '@jdeighan/llutils/file-processor'\r\nimport {PLLFetcher} from '@jdeighan/llutils/fetcher'\r\nimport {SectionMap} from '@jdeighan/llutils/section-map'\r\nimport {getTracer} from '@jdeighan/llutils/tracer'\r\nimport {OpDumper} from '@jdeighan/llutils/op-dumper'\r\nimport {ByteCodeWriter} from '@jdeighan/llutils/bytecode-writer'\r\nimport {procFiles} from '@jdeighan/llutils/file-processor'\r\n\r\nassert isFunction(brew), \"brew is not a function: #{OL(brew)}\"\r\n\r\n# --- code converter is applied to each code block in a peggy file\r\n#     using type: 'javascript' allows you to use indentation syntax\r\n#        for everything but the code blocks\r\n\r\nhCodeConverters = {\r\n\tcoffee: brew\r\n\t}\r\n\r\nsep = '# ' + '-'.repeat(62)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getSource = (filePath) =>\r\n\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\tpeggyCode = PreProcessPeggy(contents, hMetaData)\r\n\r\n\treturn {\r\n\t\tsource: filePath,\r\n\t\ttext: peggyCode\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Only creates the parser as a *.js file\r\n\r\nexport peggify = (code, hMetaData={}, filePath=undef) =>\r\n\r\n\tassert isString(code), \"code not a string: #{typeof code}\"\r\n\r\n\t# --- type determines which preprocessor to use, if any\r\n\t#        e.g. 'coffee'\r\n\t{type, debug, trace, allowedStartRules, include,\r\n\t\topDumper, byteCodeWriter, dumpAST,\r\n\t\t} = getOptions hMetaData, {\r\n\t\ttype: undef    # --- no preprocessing\r\n\t\tdebug: false\r\n\t\ttrace: true\r\n\t\tallowedStartRules: ['*']\r\n\t\tinclude: undef\r\n\t\topDumper: undef\r\n\t\tbyteCodeWriter: undef\r\n\t\tdumpAST: undef\r\n\t\t}\r\n\r\n\t# --- debug can be set to 'preprocess' or 'allcode'\r\n\tdebugPreProcess = debugAllCode = false\r\n\tif (debug == 'preprocess')\r\n\t\tdebug = debugPreProcess = true\r\n\telse if (debug == 'allcode')\r\n\t\tdebug = debugAllCode = true\r\n\r\n\tif debug\r\n\t\tif type\r\n\t\t\tconsole.log \"peggify #{OL(filePath)} as #{type}\"\r\n\t\telse\r\n\t\t\tconsole.log \"peggify #{OL(filePath)}\"\r\n\r\n\t# --- preprocess code if required\r\n\tif defined(type)\r\n\t\tassert isFunction(hCodeConverters[type]), \"Bad type #{type}\"\r\n\t\thMD = Object.assign({}, hMetaData)\r\n\t\thMD.debug = debugPreProcess\r\n\t\tpeggyCode = PreProcessPeggy(code, hMD)\r\n\t\tif defined(filePath)\r\n\t\t\tbarf peggyCode, withExt(filePath, \".peggy.txt\")\r\n\telse\r\n\t\tpeggyCode = code\r\n\r\n\tif isString(include)\r\n\t\tinput = [\r\n\t\t\t{source: filePath, text: peggyCode}\r\n\t\t\tgetSource(include)\r\n\t\t\t]\r\n\telse if isArray(include)\r\n\t\tinput = [\r\n\t\t\t{source: filePath, text: peggyCode}\r\n\t\t\t]\r\n\t\tfor path in include\r\n\t\t\tinput.push getSource(path)\r\n\telse\r\n\t\tinput = peggyCode\r\n\r\n\tif debug\r\n\t\tconsole.log \"INPUTS:\"\r\n\t\tallCode = ''\r\n\t\tfor {source, text} in input\r\n\t\t\tconsole.log \"   SOURCE: #{OL(source)}\"\r\n\t\t\tconsole.log \"   TEXT: #{escapeStr(text).substring(0, 40)}\"\r\n\t\t\tallCode += text\r\n\t\tif debugAllCode\r\n\t\t\tDUMP allCode, 'ALL CODE'\r\n\r\n\thOptions = {\r\n\t\tallowedStartRules\r\n\t\tformat: 'es'\r\n\t\ttrace\r\n\t\t}\r\n\r\n\tif opDumper\r\n\t\topDumper = hOptions.opDumper = new OpDumper()\r\n\r\n\tif byteCodeWriter\r\n\t\tbyteCodeWriter = hOptions.byteCodeWriter = new ByteCodeWriter()\r\n\r\n\tif dumpAST\r\n\t\thOptions.dumpAST = withExt(filePath, '.ast.txt')\r\n\r\n\ttry\r\n\t\tif defined(filePath)\r\n\t\t\thOptions.grammarSource = filePath\r\n\t\t\thOptions.output = 'source-and-map'\r\n\r\n\t\t\tsourceNode = peggy.generate(input, hOptions)\r\n\r\n\t\t\tif opDumper\r\n\t\t\t\topDumper.writeTo(withExt(filePath, '.ops.txt'))\r\n\r\n\t\t\tif byteCodeWriter\r\n\t\t\t\tbyteCodeWriter.writeTo(withExt(filePath, '.bytecodes.txt'))\r\n\r\n\t\t\t{code: jsCode, map} = sourceNode.toStringWithSourceMap()\r\n\t\t\tassert isString(jsCode), \"jsCode = #{OL(jsCode)}\"\r\n\t\t\tsourceMap = map.toString()\r\n\t\t\tassert isString(sourceMap), \"sourceMap = #{OL(sourceMap)}\"\r\n\t\t\treturn {\r\n\t\t\t\torgCode: code\r\n\t\t\t\tjs: jsCode\r\n\t\t\t\tcode: jsCode\r\n\t\t\t\tsourceMap: map.toString()\r\n\t\t\t\tpeggyCode\r\n\t\t\t\t}\r\n\t\telse\r\n\t\t\thOptions.output = 'source'\r\n\t\t\tcode = peggy.generate(input, hOptions)\r\n\t\t\treturn {\r\n\t\t\t\torgCode: code\r\n\t\t\t\tpeggyCode\r\n\t\t\t\tcode\r\n\t\t\t\tjs: code\r\n\t\t\t\t}\r\n\tcatch err\r\n\t\t# --- If file was preprocessed, and text version hasn't\r\n\t\t#     already been saved, save it now\r\n\t\tif defined(filePath) && defined(type) && ! debug\r\n\t\t\tbarf peggyCode, withExt(filePath, \".peggy.txt\")\r\n\t\tthrow err\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport meSplitter = (str) =>\r\n\r\n\tlMatches = str.match(///^\r\n\t\t\t(.*?)       # everything before 'DO'\r\n\t\t\t\\b DO \\b\r\n\t\t\t(\\s*)\r\n\t\t\t(.*)        # everything after 'DO' + ws (must start w/ '{')\r\n\t\t\t$///)\r\n\r\n\t# --- if no 'DO' in string, return entire string trimmed\r\n\tif notdefined(lMatches)\r\n\t\treturn [str.trim(), str.length]\r\n\r\n\t# --- if pre isn't all whitespace, return pre trimmed\r\n\t[_, pre, ws, post] = lMatches\r\n\tprelen = pre.length\r\n\tpre = pre.trim()\r\n\tif (pre.length > 0)\r\n\t\treturn [pre, prelen]\r\n\r\n\t# --- Now we know - str contains 'DO'\r\n\r\n\t# --- Find '{' in post, which must be the 1st char in post\r\n\t#     There must be only whitespace between 'DO' and '{'\r\n\tblockStart = prelen + 2 + ws.length\r\n\tblockEnd = matchPos(str, blockStart)\r\n\tassert (str[blockStart] == '{'),\r\n\t\t\t\"Bad blockStart = #{blockStart} in #{OL(str)}\"\r\n\tassert (str[blockEnd]   == '}'),\r\n\t\t\t\"Bad blockEnd = #{blockEnd} in #{OL(str)}\"\r\n\tinside = str.substring(blockStart+1, blockEnd)\r\n\tif inside.endsWith(';')\r\n\t\treturn [\"& {#{inside}return true;}\", blockEnd+1]\r\n\telse\r\n\t\treturn [\"& {#{inside};return true;}\", blockEnd+1]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport PreProcessPeggy = (code, hMetaData={}, filePath=undef) =>\r\n\r\n\tassert isString(code), \"not a string: #{typeof code}\"\r\n\t{type, debug} = getOptions hMetaData, {\r\n\t\ttype: 'coffee'\r\n\t\tdebug: false\r\n\t\t}\r\n\tif notdefined(type)\r\n\t\treturn code\r\n\r\n\tsrc = new PLLFetcher(code)\r\n\r\n\tif debug\r\n\t\tsrc.dump 'ALL CODE'\r\n\r\n\tsm = new SectionMap [\r\n\t\t'header'\r\n\t\t'init'\r\n\t\t'rules'\r\n\t\t], {    # --- converters\r\n\r\n\t\t# --- 'header' will be CoffeeScript code\r\n\t\theader: (block) =>\r\n\t\t\ttry\r\n\t\t\t\t{code, sourceMap} = hCodeConverters[type](block)\r\n\r\n\t\t\tcatch err\r\n\t\t\t\tconsole.log \"ERROR: Unable to convert #{OL(type)} code to JS\"\r\n\t\t\t\tconsole.log err\r\n\t\t\t\tcode = ''\r\n\r\n\t\t\treturn [\r\n\t\t\t\t'{{'\r\n\t\t\t\tindented(code)\r\n\t\t\t\t'}}'\r\n\t\t\t\t].join(\"\\n\")\r\n\r\n\t\t# --- 'init' section will already be JavaScript\r\n\t\tinit: (block) =>\r\n\t\t\tif nonEmpty(block)\r\n\t\t\t\treturn \"\"\"\r\n\t\t\t\t\t{\r\n\t\t\t\t\t#{block}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\"\"\"\r\n\t\t\telse\r\n\t\t\t\treturn undef\r\n\t\t}\r\n\r\n\theaderSection = sm.section('header')\r\n\tinitSection   = sm.section('init')\r\n\trulesSection  = sm.section('rules')\r\n\r\n\tif eq(src.peek(), [0, 'GLOBAL'])\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP coffeeCode, 'GLOBAL CODE'\r\n\t\t\theaderSection.add(coffeeCode)\r\n\r\n\tif eq(src.peek(), [0, 'PER_PARSE'])\r\n\t\tsrc.skip()\r\n\t\tcoffeeCode = src.getBlock(1)\r\n\t\tif nonEmpty(coffeeCode)\r\n\t\t\tif debug\r\n\t\t\t\tDUMP code, 'PER_PARSE CODE'\r\n\t\t\theaderSection.add(\"init = () =>\")\r\n\t\t\theaderSection.add(1, coffeeCode)\r\n\t\t\tinitSection.add('init();')\r\n\r\n\thRules = {}     # { <ruleName>: <numMatchExpr>, ... }\r\n\r\n\t# --- Define utility functions\r\n\r\n\tgetMatchExpr = () =>\r\n\r\n\t\t# --- Get match expression\r\n\t\t[level, matchExpr] = src.fetch()\r\n\t\tassert (level == 1), \"BAD - level not 1\"\r\n\r\n\t\t# --- Extract names of new variables\r\n\t\tlVars = []\r\n\t\tre = /([A-Za-z_][A-Za-z0-9_-]*)\\:/g\r\n\t\tfor match from matchExpr.matchAll(re)\r\n\t\t\tlVars.push match[1]\r\n\r\n\t\treturn [\r\n\t\t\tsplitStr(matchExpr, meSplitter).join(' ')\r\n\t\t\tlVars\r\n\t\t\t]\r\n\r\n\twhile src.moreLines()\r\n\r\n\t\t# --- Get rule name - must be left aligned, no whitespace\r\n\t\t[level, name] = src.fetch()\r\n\t\tassert (level == 0), \"Next level not 0\"\r\n\t\tif debug\r\n\t\t\tconsole.log \"RULE: #{name}\"\r\n\t\tassert name.match(/^[A-Za-z_][A-Za-z0-9_-]*$/),\r\n\t\t\t\t\"Bad name: #{OL(name)}\"\r\n\t\tassert !hasKey(hRules, name), \"duplicate rule #{name}\"\r\n\r\n\t\trulesSection.add('')\r\n\t\trulesSection.add(name)\r\n\t\thRules[name] = 0   # number of options\r\n\r\n\t\twhile (src.peekLevel() == 1)\r\n\r\n\t\t\t[matchExpr, lVars] = getMatchExpr()\r\n\t\t\targStr = lVars.join(', ')\r\n\r\n\t\t\t# --- output the match expression\r\n\t\t\tch = if (hRules[name] == 0) then '=' else '/'\r\n\t\t\thRules[name] += 1\r\n\r\n\t\t\trulesSection.add('')\r\n\t\t\trulesSection.add(1, \"#{ch} #{matchExpr}\")\r\n\r\n\t\t\tcoffeeCode = src.getBlock(2)\r\n\t\t\tif nonEmpty(coffeeCode)\r\n\t\t\t\tif debug\r\n\t\t\t\t\tDUMP code, 'CODE'\r\n\t\t\t\tfuncName = \"parse__#{name}__#{hRules[name]}\"\r\n\t\t\t\theaderSection.add(sep)\r\n\t\t\t\theaderSection.add('')\r\n\t\t\t\theaderSection.add(\"#{funcName} = (#{argStr}) =>\")\r\n\t\t\t\theaderSection.add('')\r\n\t\t\t\theaderSection.add(1, coffeeCode)\r\n\r\n\t\t\t\tline = \"{ return #{funcName}(#{argStr}); }\"\r\n\t\t\t\trulesSection.add(2, line)\r\n\r\n\tif debug\r\n\t\tsm.dump()\r\n\r\n\t# --- Get the built code\r\n\tpeggyCode = sm.getBlock()\r\n\tif debug\r\n\t\tDUMP peggyCode, 'PEGGY CODE'\r\n\treturn peggyCode\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- a converter should return {code: jsCode, sourceMap: srcMap}\r\n\r\nexport addCodeConverter = (name, func) =>\r\n\r\n\tassert isString(name, {nonEmpty: true}), \"Bad name: #{name}\"\r\n\tassert ! hasKey(hCodeConverters, name),\r\n\t\t\t\"#{name} code converter already exists\"\r\n\tassert (typeof func == 'function'), \"Not a function: #{func}\"\r\n\thCodeConverters[name] = func\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC !!!\r\n\r\nexport getParser = (filePath, hOptions={}) =>\r\n\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\tfullPath = mkpath(filePath)\r\n\tif debug\r\n\t\tconsole.log \"PEGGY file = #{OL(fullPath)}\"\r\n\tassert isFile(fullPath), \"No such file: #{OL(filePath)}\"\r\n\tassert (fileExt(fullPath)=='.peggy'), \"Not a peggy file: #{OL(filePath)}\"\r\n\r\n\tprocFiles fullPath, peggify, '.js'\r\n\tjsFilePath = withExt(filePath, '.js')\r\n\tif debug\r\n\t\tconsole.log \"JS file = #{OL(jsFilePath)}\"\r\n\r\n\t# --- h has keys StartRules, SyntaxError, parse\r\n\th = await import(pathToFileURL(jsFilePath))\r\n\tassert isFunction(h.parse), \"Bad return from import\"\r\n\r\n\treturn (str, hOptions={}) =>\r\n\t\t# --- Valid options:\r\n\t\t#        start - what is the start rule (usually first rule)\r\n\t\t#        tracer - 'none','peggy','default' or function\r\n\r\n\t\t{start, tracer} = getOptions hOptions, {\r\n\t\t\tstart: undef     #     name of start rule\r\n\t\t\ttracer: 'none'   # --- can be none/peggy/default/a function\r\n\t\t\t}\r\n\r\n\t\thParseOptions = {}\r\n\t\tif defined(start)\r\n\t\t\thParseOptions.startRule = start\r\n\t\tswitch tracer\r\n\t\t\twhen 'none','peggy','default'\r\n\t\t\t\thParseOptions.tracer = getTracer(tracer)\r\n\t\t\telse\r\n\t\t\t\tassert isFunction(tracer), \"tracer not a function\"\r\n\t\t\t\thParseOptions.tracer = tracer\r\n\r\n\t\treturn h.parse(str, hParseOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}