{
  "version": 3,
  "file": "v8-stack.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\v8-stack.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# v8-stack.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport fs from 'fs'\r\n\r\nimport {\r\n\tundef, defined, notdefined, isEmpty, nonEmpty,\r\n\tassert, croak, isInteger, hasKey, OL, getOptions,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tmkpath, fileExt, withExt,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {mapSourcePos} from '@jdeighan/llutils/source-map'\r\nimport {toNICE} from '@jdeighan/llutils/to-nice'\r\n\r\nexport internalDebugging = false\r\n\r\n# ---------------------------------------------------------------------------\r\n# Stack Frames have the keys:\r\n#    type - eval | native | constructor | method | function | script\r\n#    filePath\r\n#    fileName\r\n#    ext\r\n#    functionName\r\n#    objTye, methodName - if type == 'method'\r\n#    isAsync - true if an async function/method\r\n#    line\r\n#    column\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport nodeStr = (hNode) =>\r\n\r\n\t{type, fileName, line, column} = hNode\r\n\treturn \"#{type} at #{fileName}:#{line}:#{column}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- export only for unit tests\r\n\r\nexport extractFileName = (filePath) =>\r\n\r\n\tif lMatches = filePath.match(/// [\\/\\\\] ([^\\/\\\\]+) $///)\r\n\t\treturn lMatches[1]\r\n\telse\r\n\t\treturn filePath\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getV8Stack = (hOptions={}) =>\r\n\t# --- ignores any stack frames from this module\r\n\t#     *.js files will be mapped to *.coffee files\r\n\t#        if a source map is available\r\n\r\n\tdebug = hOptions.debug || false\r\n\r\n\ttry\r\n\t\toldLimit = Error.stackTraceLimit\r\n\t\toldPreparer = Error.prepareStackTrace\r\n\r\n\t\tError.stackTraceLimit = Infinity\r\n\t\tError.prepareStackTrace = (error, lCallSites) =>\r\n\t\t\tlFrames = []\r\n\t\t\tfor oSite in lCallSites\r\n\t\t\t\tfileURL = oSite.getFileName()\r\n\t\t\t\tif defined(fileURL)\r\n\t\t\t\t\thParsed = parseFileURL(fileURL)\r\n\t\t\t\t\tfilePath = hParsed.source\r\n\r\n\t\t\t\tif (typeof filePath == 'string') && (filePath.length > 0)\r\n\t\t\t\t\t# --- Ignore any stack entries from this module\r\n\t\t\t\t\tpos = filePath.indexOf('v8-stack.js')\r\n\t\t\t\t\tif (pos >= 0)\r\n\t\t\t\t\t\tif debug\r\n\t\t\t\t\t\t\tconsole.log \"SKIP: filePath = '#{filePath}'\"\r\n\t\t\t\t\t\tcontinue\r\n\r\n\t\t\t\tobjType = oSite.getTypeName()\r\n\t\t\t\tthisVal = oSite.getThis()\r\n\t\t\t\tfunctionName = oSite.getFunctionName()\r\n\t\t\t\tmethodName = oSite.getMethodName()\r\n\t\t\t\tline = oSite.getLineNumber()\r\n\t\t\t\tcolumn = oSite.getColumnNumber()\r\n\r\n\t\t\t\t# --- Set type\r\n\t\t\t\tif oSite.isEval()\r\n\t\t\t\t\ttype ='eval'\r\n\t\t\t\telse if oSite.isNative()\r\n\t\t\t\t\ttype = 'native'\r\n\t\t\t\telse if oSite.isConstructor()\r\n\t\t\t\t\ttype = 'constructor'\r\n\t\t\t\telse if defined(methodName)\r\n\t\t\t\t\ttype = 'method'\r\n\t\t\t\telse\r\n\t\t\t\t\ttype = 'function'\r\n\r\n\t\t\t\tif debug\r\n\t\t\t\t\tconsole.log '-'.repeat(40)\r\n\t\t\t\t\tconsole.log \"type = '#{type}'\"\r\n\t\t\t\t\tconsole.log \"objType = '#{objType}'\"\r\n\t\t\t\t\tconsole.log \"filePath = '#{filePath}'\"\r\n\t\t\t\t\tconsole.log \"functionName = '#{functionName}'\"\r\n\t\t\t\t\tconsole.log \"methodName = '#{methodName}'\"\r\n\t\t\t\t\tconsole.log \"at #{line}:#{column}\"\r\n\r\n\t\t\t\t# --- Ignore this entry and any before it\r\n\t\t\t\tif (objType == 'ModuleJob')\r\n\t\t\t\t\tbreak\r\n\r\n\t\t\t\t{dir, name: stub, ext} = pathLib.parse(filePath)\r\n\t\t\t\thFrame = {\r\n\t\t\t\t\ttype\r\n\t\t\t\t\tfilePath\r\n\t\t\t\t\tfileName: extractFileName(filePath)\r\n\t\t\t\t\tdir\r\n\t\t\t\t\tstub\r\n\t\t\t\t\text\r\n\t\t\t\t\tfunctionName\r\n\t\t\t\t\tline\r\n\t\t\t\t\tcolumn\r\n\t\t\t\t\tisAsync: oSite.isAsync()\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tif (type == 'method')\r\n\t\t\t\t\thFrame.objType = objType\r\n\t\t\t\t\thFrame.methodName = methodName\r\n\r\n\t\t\t\t# --- If main body of a script, stop here\r\n\t\t\t\tif (type == 'function') && notdefined(functionName)\r\n\t\t\t\t\thFrame.type = 'script'\r\n\t\t\t\t\tdelete hFrame.functionName\r\n\t\t\t\t\tif (hFrame.ext == '.js')\r\n\t\t\t\t\t\tmapJStoCoffee(hFrame)\r\n\t\t\t\t\tlFrames.push hFrame\r\n\t\t\t\t\tbreak\r\n\r\n\t\t\t\tif (ext == '.js')\r\n\t\t\t\t\tmapJStoCoffee(hFrame)\r\n\t\t\t\tlFrames.push hFrame\r\n\r\n\t\t\treturn lFrames\r\n\r\n\t\terrObj = new Error()\r\n\t\tlStackFrames = errObj.stack\r\n\t\tassert (lStackFrames.length > 0), \"lStackFrames is empty!\"\r\n\r\n\t\t# --- reset to previous values\r\n\t\tError.stackTraceLimit = oldLimit\r\n\t\tError.prepareStackTrace = oldPreparer\r\n\tcatch e\r\n\t\treturn []\r\n\treturn lStackFrames\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- hFrame contains keys:\r\n#        filePath\r\n#        ext\r\n#        line\r\n#        column\r\n\r\nexport mapJStoCoffee = (hFrame) =>\r\n\r\n\t# --- Attempt to convert to original coffee file\r\n\tassert hasKey(hFrame, 'filePath')\r\n\tassert hasKey(hFrame, 'fileName')\r\n\tassert hasKey(hFrame, 'ext')\r\n\tassert hasKey(hFrame, 'line')\r\n\tassert hasKey(hFrame, 'column')\r\n\r\n\t{filePath, ext, line, column} = hFrame\r\n\tassert (ext == '.js'), \"ext = #{ext}\"\r\n\r\n\thInfo = mapSourcePos filePath, line, column\r\n\tif defined(hInfo.source)\r\n\t\t# --- successfully mapped\r\n\r\n\t\thFrame.filePath = withExt(hFrame.filePath, '.coffee')\r\n\t\thFrame.fileName = withExt(hFrame.fileName, '.coffee')\r\n\t\thFrame.ext = '.coffee'\r\n\t\thFrame.line = hInfo.line\r\n\t\thFrame.column = hInfo.column\r\n\t\thFrame.source = hInfo.source\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parseFileURL = (url) =>\r\n\r\n\tassert defined(url), \"url is undef in parseFileURL()\"\r\n\tlMatches = url.match(///^\r\n\t\t\tfile : \\/\\/\r\n\t\t\t(.*)\r\n\t\t\t$///)\r\n\tif defined(lMatches)\r\n\t\t[_, pathStr] = lMatches\r\n\t\t{dir, base:fileName, name:stub, ext} = pathLib.parse(pathStr)\r\n\t\tif defined(dir) && (dir.indexOf('/') == 0)\r\n\t\t\tdir = dir.substr(1)   # --- strip leading '/'\r\n\t\treturn {\r\n\t\t\tdir\r\n\t\t\tfileName\r\n\t\t\tsource: \"#{dir}/#{fileName}\"\r\n\t\t\tstub\r\n\t\t\text\r\n\t\t\t}\r\n\telse\r\n\t\tlMatches = url.match(///^\r\n\t\t\t\tnode : internal \\/\r\n\t\t\t\t(.*)\r\n\t\t\t\t$///)\r\n\t\tif defined(lMatches)\r\n\t\t\thParsed = {\r\n\t\t\t\tsource: 'node'\r\n\t\t\t\t}\r\n\t\telse\r\n\t\t\tcroak \"Invalid file url: '#{url}'\"\r\n\treturn hParsed\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getMyOutsideCaller = () =>\r\n\t# --- Returned object has keys:\r\n\t#        type - eval | native | constructor | method | function\r\n\t#        functionName\r\n\t#        objType, methodName - if a method\r\n\t#        line\r\n\t#        column\r\n\t#        isAsync - if an async function\r\n\r\n\ttry\r\n\t\tlStack = getV8Stack()\r\n\tcatch err\r\n\t\tconsole.log \"ERROR in getV8Stack(): #{err.message}\"\r\n\t\treturn undef\r\n\r\n\tfileName = undef\r\n\tfor hNode,i in lStack\r\n\t\tif (fileName == undef)\r\n\t\t\tfileName = hNode.fileName\r\n\t\telse if (hNode.fileName != fileName)\r\n\t\t\treturn hNode\r\n\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getMyDirectCaller = () =>\r\n\t# --- Returned object has keys:\r\n\t#        type - eval | native | constructor | method | function\r\n\t#        functionName\r\n\t#        objType, methodName - if a method\r\n\t#        line\r\n\t#        column\r\n\t#        isAsync - if an async function\r\n\r\n\ttry\r\n\t\tlStack = getV8Stack()\r\n\tcatch err\r\n\t\tconsole.log \"ERROR in getV8Stack(): #{err.message}\"\r\n\t\treturn undef\r\n\r\n\treturn lStack[1]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport debugV8Stack = (flag=true) =>\r\n\r\n\tinternalDebugging = flag\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFile = (filePath) =>\r\n\r\n\ttry\r\n\t\tresult = fs.lstatSync(filePath).isFile()\r\n\t\treturn result\r\n\tcatch err\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getV8StackStr = (hOptions={}) =>\r\n\r\n\tlStack = await getV8Stack(hOptions)\r\n\tlParts = for hNode in lStack\r\n\t\tnodeStr(hNode)\r\n\treturn lParts.join(\"\\n\")\r\n"
  ]
}