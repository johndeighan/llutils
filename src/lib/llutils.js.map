{
  "version": 3,
  "file": "llutils.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\llutils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# llutils.coffee\r\n\r\nimport assertLib from 'node:assert'\r\nimport {execSync} from 'node:child_process'\r\nimport YAML from 'yaml'\r\nmodule = await import('deep-equal')\r\ndeepEqual = module.default\r\n\r\n`export const undef = void 0`\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport eq = (x, y) =>\r\n\r\n\treturn deepEqual(x, y, {strict: true})\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dclone = (x) =>\r\n\r\n\treturn structuredClone(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport pass = () =>    # do nothing\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport range = (n) ->\r\n\r\n\ti = 0\r\n\twhile (i < n)\r\n\t\tyield i\r\n\t\ti += 1\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rev_range = (n) ->\r\n\r\n\ti = n\r\n\twhile (i > 0)\r\n\t\ti -= 1\r\n\t\tyield i\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport add_s = (n) =>\r\n\r\n\treturn if (n == 1) then '' else 's'\r\n\r\n# ---------------------------------------------------------------------------\r\n# low-level version of assert()\r\n\r\nexport assert = (cond, msg) =>\r\n\r\n\tassertLib.ok cond, msg\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# low-level version of croak()\r\n\r\nexport croak = (msg) =>\r\n\r\n\tthrow new Error(msg)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# returns true if all args defined\r\n\r\nexport defined = (...lObjs) =>\r\n\r\n\tfor obj in lObjs\r\n\t\tif (obj == undef) || (obj == null)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# returns true if any args defined\r\n\r\nexport anyDefined = (...lObjs) =>\r\n\r\n\tfor obj in lObjs\r\n\t\tif (obj != undef) && (obj != null)\r\n\t\t\treturn true\r\n\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport notdefined = (...lObjs) =>\r\n\r\n\tfor obj in lObjs\r\n\t\tif (obj != undef) && (obj != null)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport words = (lStrings...) =>\r\n\r\n\tlWords = []\r\n\tfor str in lStrings\r\n\t\tstr = str.trim()\r\n\t\tif (str != '')\r\n\t\t\tfor word in str.split(/\\s+/)\r\n\t\t\t\tlWords.push word\r\n\treturn lWords\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isString = (x, hOptions={}) =>\r\n\r\n\tif (typeof x != 'string') && !(x instanceof String)\r\n\t\treturn false\r\n\tif hOptions.nonempty\r\n\t\treturn nonEmpty(x)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- sometimes we can't use getOptions() because\r\n#     it calls the current function\r\n\r\nexport getOneOption = (name, hOptions) =>\r\n\r\n\tif (typeof hOptions == 'string') || (hOptions instanceof String)\r\n\t\treturn hOptions.split(/\\s+/).includes(name)\r\n\telse\r\n\t\treturn hasKey(hOptions, name) && hOptions[name]\r\n\r\n# ---------------------------------------------------------------------------\r\n# Valid options:\r\n#    allStrings: boolean\r\n#    nonempty: boolean\r\n\r\nexport isArray = (x, hOptions={}) =>\r\n\r\n\tnonempty = getOneOption 'nonempty', hOptions\r\n\tallStrings = getOneOption 'allStrings', hOptions\r\n\r\n\tif ! Array.isArray(x)\r\n\t\treturn false\r\n\tif nonempty && (x.length == 0)\r\n\t\treturn false\r\n\tif allStrings\r\n\t\tfor item in x\r\n\t\t\tif ! isString(item)\r\n\t\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isBoolean = (x, hOptions={}) =>\r\n\r\n\treturn (x == true) || (x == false) || (x instanceof Boolean)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isNumber = (x, hOptions=undef) =>\r\n\r\n\tif (typeof x == 'number') || (typeof x == 'bigint')\r\n\t\tresult = true\r\n\telse if (x instanceof Number)\r\n\t\tresult = true\r\n\telse\r\n\t\treturn false\r\n\r\n\tif defined(hOptions)\r\n\t\tassert isHash(hOptions), \"2nd arg not a hash: #{OL(hOptions)}\"\r\n\t\t{min, max} = hOptions\r\n\t\tif defined(min) && (x < min)\r\n\t\t\tresult = false\r\n\t\tif defined(max) && (x > max)\r\n\t\t\tresult = false\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isInteger = (x, hOptions={}) =>\r\n\r\n\tif (typeof x == 'bigint')\r\n\t\tresult = true\r\n\tif (typeof x == 'number')\r\n\t\tresult = Number.isInteger(x)\r\n\telse if (x instanceof Number)\r\n\t\tresult = Number.isInteger(x.valueOf())\r\n\telse\r\n\t\treturn false\r\n\r\n\tif result\r\n\t\tif defined(hOptions.min) && (x < hOptions.min)\r\n\t\t\tresult = false\r\n\t\tif defined(hOptions.max) && (x > hOptions.max)\r\n\t\t\tresult = false\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isHash = (x) =>\r\n\r\n\tif notdefined(x?.constructor?.name)\r\n\t\treturn false\r\n\treturn (x.constructor.name == 'Object')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFunction = (x) =>\r\n\r\n\tif (typeof x != 'function') && !(x instanceof Function)\r\n\t\treturn false\r\n\treturn !(x.toString().startsWith('class'))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isRegExp = (x) =>\r\n\r\n\treturn (typeof x == 'regexp') || (x instanceof RegExp)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isClass = (x) =>\r\n\r\n\tif (typeof x != 'function')\r\n\t\treturn false\r\n\treturn (x.toString().startsWith('class'))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport className = (x) =>\r\n\t# --- item can be a class or an object\r\n\r\n\tif isClass(x)\r\n\t\ttext = x.toString()\r\n\t\tif lMatches = text.match(/class\\s+(\\w+)/)\r\n\t\t\treturn lMatches[1]\r\n\t\telse if lMatches = text.match(/class/)\r\n\t\t\treturn undef\r\n\t\telse\r\n\t\t\tthrow new Error(\"className(): Bad input class\")\r\n\telse if isClassInstance(x)\r\n\t\treturn x.constructor.name\r\n\telse\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isPromise = (x) =>\r\n\r\n\tif (typeof x != 'object') || (x == null)\r\n\t\treturn false\r\n\treturn (typeof x.then == 'function')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isClassInstance = (x, lReqKeys=undef) =>\r\n\r\n\tif (typeof x != 'object')\r\n\t\treturn false\r\n\tif (x instanceof String) \\\r\n\t\t\t|| (x instanceof Number) \\\r\n\t\t\t|| (x instanceof Boolean) \\\r\n\t\t\t|| (x instanceof RegExp) \\\r\n\t\t\t|| (x instanceof Function) \\\r\n\t\t\t|| isArray(x) \\\r\n\t\t\t|| isHash(x) \\\r\n\t\t\t|| isPromise(x)\r\n\t\treturn false\r\n\tif defined(lReqKeys)\r\n\t\tif isString(lReqKeys)\r\n\t\t\tlReqKeys = words(lReqKeys)\r\n\t\tassert isArray(lReqKeys), \"lReqKeys not an array: #{OL(lReqKeys)}\"\r\n\t\tfor key in lReqKeys\r\n\t\t\ttype = undef\r\n\t\t\tif lMatches = key.match(///^ (\\&) (.*) $///)\r\n\t\t\t\t[_, type, key] = lMatches\r\n\t\t\tif notdefined(x[key])\r\n\t\t\t\treturn false\r\n\t\t\tif (type == '&') && (typeof x[key] != 'function')\r\n\t\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n#   escapeStr - escape newlines, carriage return, TAB chars, etc.\r\n# --- NOTE: We can't use OL() inside here since it uses escapeStr()\r\n\r\nexport hEsc = {\r\n\t\"\\r\": '←'\r\n\t\"\\n\": '↓'\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\nexport hEscNoNL = {\r\n\t\"\\r\": '←'\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\n\r\nexport escapeStr = (str, hReplace=hEsc, hOptions={}) =>\r\n\t# --- hReplace can also be a string:\r\n\t#        'esc'     - escape space, newline, tab\r\n\t#        'escNoNL' - escape space, tab\r\n\r\n\tassert isString(str), \"not a string: #{typeof str}\"\r\n\tif isString(hReplace)\r\n\t\tswitch hReplace\r\n\t\t\twhen 'esc'\r\n\t\t\t\thReplace = hEsc\r\n\t\t\twhen 'escNoNL'\r\n\t\t\t\thReplace = hEscNoNL\r\n\t\t\telse\r\n\t\t\t\thReplace = {}\r\n\tassert isHash(hReplace), \"not a hash\"\r\n\r\n\t{offset} = getOptions hOptions, {\r\n\t\toffset: undef\r\n\t\t}\r\n\r\n\tlParts = []\r\n\ti = 0\r\n\tfor ch from str\r\n\t\tif defined(offset)\r\n\t\t\tif (i == offset)\r\n\t\t\t\tlParts.push ':'\r\n\t\t\telse\r\n\t\t\t\tlParts.push ' '\r\n\t\tresult = hReplace[ch]\r\n\t\tif defined(result)\r\n\t\t\tlParts.push result\r\n\t\telse\r\n\t\t\tlParts.push ch\r\n\t\ti += 1\r\n\tif (offset == str.length)\r\n\t\tlParts.push ':'\r\n\treturn lParts.join('')\r\n\r\n# ---------------------------------------------------------------------------\r\n#   escapeBlock\r\n#      - remove carriage returns\r\n#      - escape spaces, TAB chars\r\n\r\nexport escapeBlock = (block) =>\r\n\r\n\treturn escapeStr(block, 'escNoNL')\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Can't use getOptions() !!!!!\r\n\r\nexport OL = (obj, hOptions={}) =>\r\n\r\n\tif (obj == undef) then return 'undef'\r\n\tif (obj == null) then return 'null'\r\n\r\n\tif hOptions.hasOwnProperty('esc')\r\n\t\tesc = hOptions.esc\r\n\telse\r\n\t\tesc = true\r\n\r\n\tif hOptions.hasOwnProperty('short')\r\n\t\tshort = hOptions.short\r\n\telse\r\n\t\tshort = false\r\n\r\n\tif short\r\n\t\tif isHash(obj) then return 'HASH'\r\n\t\tif isArray(obj) then return 'ARRAY'\r\n\t\tif isFunction(obj) then return 'FUNCTION'\r\n\t\tif isClassInstance(obj) then return 'CLASS INSTANCE'\r\n\r\n\tmyReplacer = (key, x) =>\r\n\t\ttype = typeof x\r\n\t\tswitch type\r\n\t\t\twhen 'bigint'\r\n\t\t\t\treturn \"«BigInt #{x.toString()}»\"\r\n\t\t\twhen 'function'\r\n\t\t\t\tif x.toString().startsWith('class')\r\n\t\t\t\t\ttag = 'Class'\r\n\t\t\t\telse\r\n\t\t\t\t\ttag = 'Function'\r\n\t\t\t\tif defined(x.name)\r\n\t\t\t\t\treturn \".#{tag} #{x.name}.\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn \".#{tag}.\"\r\n\t\t\twhen 'string'\r\n\t\t\t\t# --- NOTE: JSON.stringify will add quote chars\r\n\t\t\t\tif esc\r\n\t\t\t\t\treturn escapeStr(x)\r\n\t\t\t\telse\r\n\t\t\t\t\treturn x\r\n\t\t\twhen 'object'\r\n\t\t\t\tif x instanceof RegExp\r\n\t\t\t\t\treturn \".RegExp #{x.toString()}.\"\r\n\t\t\t\tif defined(x) && (typeof x.then == 'function')\r\n\t\t\t\t\treturn \".Promise.\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn x\r\n\t\t\telse\r\n\t\t\t\treturn x\r\n\r\n\tresult = JSON.stringify(obj, myReplacer)\r\n\r\n\t# --- Because JSON.stringify adds quote marks,\r\n\t#     we remove them when using .\r\n\tfinalResult = result \\\r\n\t\t.replaceAll('\".','.').replaceAll('.\"','.')\r\n\treturn finalResult\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport CWS = (str) =>\r\n\r\n\tassert isString(str), \"CWS(): parameter not a string\"\r\n\treturn str.trim().replace(/\\s+/sg, ' ')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport ML = (obj, hOptions={}) =>\r\n\r\n\tif (obj == undef) then return '.undef.'\r\n\tif (obj == null) then return '.null.'\r\n\r\n\tmyReplacer = (key, x) =>\r\n\t\ttype = typeof x\r\n\t\tswitch type\r\n\t\t\twhen 'bigint'\r\n\t\t\t\treturn \"«BigInt #{x.toString()}»\"\r\n\t\t\twhen 'function'\r\n\t\t\t\tif x.toString().startsWith('class')\r\n\t\t\t\t\ttag = 'Class'\r\n\t\t\t\telse\r\n\t\t\t\t\ttag = 'Function'\r\n\t\t\t\tif defined(x.name)\r\n\t\t\t\t\treturn \"«#{tag} #{x.name}»\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn \"«#{tag}»\"\r\n\t\t\twhen 'string'\r\n\t\t\t\t# --- NOTE: JSON.stringify will add quote chars\r\n\t\t\t\treturn escapeStr(x)\r\n\t\t\twhen 'object'\r\n\t\t\t\tif x instanceof RegExp\r\n\t\t\t\t\treturn \"«RegExp #{x.toString()}»\"\r\n\t\t\t\tif defined(x) && (typeof x.then == 'function')\r\n\t\t\t\t\treturn \"«Promise»\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn x\r\n\t\t\telse\r\n\t\t\t\treturn x\r\n\r\n\tresult = JSON.stringify(obj, myReplacer, \"\\t\")\r\n\r\n\t# --- Because JSON.stringify adds quote marks,\r\n\t#     we remove them when using « and »\r\n\tfinalResult = result.replaceAll('\"«','«').replaceAll('»\"','»')\r\n\treturn finalResult\r\n\r\n# ---------------------------------------------------------------------------\r\n# returns a single string\r\n\r\nexport OLS = (lObjects, hOptions={}) =>\r\n\r\n\tsep = hOptions.sep || ','\r\n\tshort = hOptions.short || false\r\n\r\n\tassert isArray(lObjects), \"not an array\"\r\n\tlParts = []\r\n\tfor obj in lObjects\r\n\t\tlParts.push OL(obj, {short})\r\n\treturn lParts.join(sep)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   isEmpty - one of:\r\n#      - string is whitespace\r\n#      - array has no elements\r\n#      - hash has no keys\r\n\r\nexport isEmpty = (x) =>\r\n\r\n\tif (x == undef) || (x == null) || (x == '')\r\n\t\treturn true\r\n\tif isString(x)\r\n\t\treturn (x.match(/^\\s*$/) != null)\r\n\tif isArray(x)\r\n\t\treturn (x.length == 0)\r\n\tif isHash(x)\r\n\t\treturn (Object.keys(x).length == 0)\r\n\telse\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n#   nonEmpty - not isEmpty(x)\r\n\r\nexport nonEmpty = (x) =>\r\n\r\n\treturn ! isEmpty(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport execCmd = (cmdLine, hOptions={}) =>\r\n\t# --- may throw an exception\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tencoding: 'utf8'\r\n\t\twindowsHide: true\r\n\t\t}\r\n\tresult = execSync cmdLine, hOptions\r\n\treturn result.replace(\"\\r\", \"\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport chomp = (str) =>\r\n\t# --- Remove trailing \\n if present\r\n\r\n\tlen = str.length\r\n\tif (str[len-1] == '\\n')\r\n\t\tif (str[len-2] == '\\r')\r\n\t\t\treturn str.substring(0, len-2)\r\n\t\telse\r\n\t\t\treturn str.substring(0, len-1)\r\n\telse\r\n\t\treturn str\r\n\r\n# ---------------------------------------------------------------------------\r\n#        HASH utilities\r\n# ---------------------------------------------------------------------------\r\n\r\nexport keys = Object.keys\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hasKey = (h, key) =>\r\n\r\n\tassert isHash(h), \"h is #{OL(h)}\"\r\n\treturn h.hasOwnProperty(key)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- item can be a hash or array\r\n\r\nexport removeKeys = (item, lKeys) =>\r\n\r\n\tassertLib.ok isArray(lKeys), \"not an array\"\r\n\tif isArray(item)\r\n\t\tfor subitem in item\r\n\t\t\tremoveKeys subitem, lKeys\r\n\telse if isHash(item)\r\n\t\tfor key in lKeys\r\n\t\t\tif item.hasOwnProperty(key)\r\n\t\t\t\tdelete item[key]\r\n\t\tfor prop,value of item\r\n\t\t\tremoveKeys value, lKeys\r\n\treturn item\r\n\r\n# ---------------------------------------------------------------------------\r\n# ---------------------------------------------------------------------------\r\n\r\nexport npmLogLevel = () =>\r\n\r\n\tresult = execCmd('npm config get loglevel')\r\n\treturn chomp(result)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport blockToArray = (block) =>\r\n\r\n\tassert isString(block), \"block is: #{typeof block}\"\r\n\tif isEmpty(block)\r\n\t\treturn []\r\n\telse\r\n\t\treturn block.split(/\\r?\\n/)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toArray = (strOrArray) =>\r\n\r\n\tif isArray(strOrArray)\r\n\t\treturn strOrArray\r\n\telse\r\n\t\treturn blockToArray(strOrArray)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport arrayToBlock = (lLines) =>\r\n\r\n\tassert isArray(lLines), \"lLines is not an array\"\r\n\treturn lLines.filter((line) => defined(line)).join(\"\\n\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toBlock = (strOrArray) =>\r\n\r\n\tif isString(strOrArray)\r\n\t\treturn strOrArray\r\n\telse\r\n\t\treturn arrayToBlock(strOrArray)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport listdiff = (lItems, lToRemove) =>\r\n\r\n\tassert isArray(lItems), \"lItems is #{OL(lItems)}\"\r\n\tassert isArray(lToRemove), \"lToRemove is #{OL(lToRemove)}\"\r\n\treturn lItems.filter((item) =>\r\n\t\treturn ! lToRemove.includes(item))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport untabify = (str, numSpaces=3) =>\r\n\r\n\treturn str.replace(/\\t/g, ' '.repeat(numSpaces))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOG = (item) =>\r\n\r\n\tif isString(item)\r\n\t\tconsole.log untabify(item)\r\n\telse\r\n\t\tconsole.log item\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport splitPrefix = (line) =>\r\n\r\n\tassert isString(line), \"non-string: #{typeof line}\"\r\n\tlMatches = line.match(/^(\\s*)(.*)$/)\r\n\treturn [lMatches[1], lMatches[2]]\r\n\r\n# ---------------------------------------------------------------------------\r\n#    tabify - convert leading spaces to TAB characters\r\n#             if numSpaces is not defined, then the first line\r\n#             that contains at least one space sets it\r\n\r\nexport tabify = (str, numSpaces=undef) =>\r\n\r\n\tlLines = []\r\n\tfor str in blockToArray(str)\r\n\t\t[prefix, theRest] = splitPrefix(str)\r\n\t\tprefixLen = prefix.length\r\n\t\tif prefixLen == 0\r\n\t\t\tlLines.push theRest\r\n\t\telse\r\n\t\t\tassert (prefix.indexOf('\\t') == -1), \"found TAB\"\r\n\t\t\tif numSpaces == undef\r\n\t\t\t\tnumSpaces = prefixLen\r\n\t\t\tassert (prefixLen % numSpaces == 0), \"Bad prefix\"\r\n\t\t\tlevel = prefixLen / numSpaces\r\n\t\t\tlLines.push '\\t'.repeat(level) + theRest\r\n\treturn arrayToBlock(lLines)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport gen2array = (reader) =>\r\n\r\n\tlLines = []\r\n\tfor line from reader()\r\n\t\tlLines.push line\r\n\treturn lLines\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport gen2block = (reader) =>\r\n\r\n\tlLines = gen2array(reader)\r\n\treturn lLines.join(\"\\n\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport spaces = (n) =>\r\n\r\n\treturn \" \".repeat(n)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport tabs = (n) =>\r\n\r\n\treturn \"\\t\".repeat(n)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- valid options:\r\n#        char - char to use on left and right\r\n#        buffer - num spaces around text when char <> ' '\r\n\r\nexport centered = (text, width, hOptions={}) =>\r\n\r\n\t{char} = getOptions hOptions, {\r\n\t\tchar: ' '\r\n\t\t}\r\n\r\n\tnumBuffer = hOptions.numBuffer || 2\r\n\r\n\ttotSpaces = width - text.length\r\n\tif (totSpaces <= 0)\r\n\t\treturn text\r\n\tnumLeft = Math.floor(totSpaces / 2)\r\n\tnumRight = totSpaces - numLeft\r\n\tif (char == ' ')\r\n\t\treturn spaces(numLeft) + text + spaces(numRight)\r\n\telse\r\n\t\tbuf = ' '.repeat(numBuffer)\r\n\t\tleft = char.repeat(numLeft - numBuffer)\r\n\t\tright = char.repeat(numRight - numBuffer)\r\n\t\tnumLeft -= numBuffer\r\n\t\tnumRight -= numBuffer\r\n\t\treturn left + buf + text + buf + right\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport leftAligned = (text, width, hOptions={}) =>\r\n\r\n\tif (text.length >= width)\r\n\t\treturn text\r\n\tnumSpaces = width - text.length\r\n\treturn text + ' '.repeat(numSpaces)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rightAligned = (text, width, hOptions={}) =>\r\n\r\n\tif (text.length >= width)\r\n\t\treturn text\r\n\tnumSpaces = width - text.length\r\n\treturn ' '.repeat(numSpaces) + text\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport countChars = (str, ch) =>\r\n\r\n\tcount = 0\r\n\tpos = -1\r\n\twhile (pos = str.indexOf(ch, pos+1)) != -1\r\n\t\tcount += 1\r\n\treturn count\r\n\r\n# ---------------------------------------------------------------------------\r\n#   rtrim - strip trailing whitespace\r\n\r\nexport rtrim = (line) =>\r\n\r\n\tassert isString(line), \"not a string: #{typeof line}\"\r\n\tlMatches = line.match(/^(.*?)\\s+$/)\r\n\tif defined(lMatches)\r\n\t\treturn lMatches[1]\r\n\telse\r\n\t\treturn line\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Always logs using console.log, therefore\r\n#     strings are untabified\r\n\r\nexport log = (...lItems) =>\r\n\r\n\tfor x in lItems\r\n\t\tif isString(x)\r\n\t\t\tconsole.log untabify(x)\r\n\t\telse\r\n\t\t\tconsole.log x\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getOptions = (options=undef, hDefault={}) =>\r\n\r\n\tif isEmpty(options)\r\n\t\thOptions = {}\r\n\telse if isHash(options)\r\n\t\thOptions = options\r\n\telse if isString(options)\r\n\t\thOptions = hashFromString(options)\r\n\telse\r\n\t\tcroak \"Bad options: #{OL(options)}\"\r\n\r\n\t# --- Fill in defaults for missing values\r\n\tfor own key,value of hDefault\r\n\t\tif ! hasKey(hOptions, key) && defined(value)\r\n\t\t\thOptions[key] = value\r\n\r\n\treturn hOptions\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hashFromString = (str) =>\r\n\r\n\tassert isString(str), \"not a string: #{OL(str)}\"\r\n\th = {}\r\n\tfor word in words(str)\r\n\t\tif lMatches = word.match(///^\r\n\t\t\t\t(\\!)?                    # negate value\r\n\t\t\t\t([A-Za-z][A-Za-z_0-9]*)  # identifier\r\n\t\t\t\t(?:\r\n\t\t\t\t\t(=)\r\n\t\t\t\t\t(.*)\r\n\t\t\t\t\t)?\r\n\t\t\t\t$///)\r\n\t\t\t[_, neg, ident, eqSign, str] = lMatches\r\n\t\t\tif nonEmpty(eqSign)\r\n\t\t\t\tassert isEmpty(neg), \"negation with string value\"\r\n\r\n\t\t\t\t# --- check if str is a valid number\r\n\t\t\t\tnum = parseFloat(str)\r\n\t\t\t\tif Number.isNaN(num)\r\n\t\t\t\t\t# --- TO DO: interpret backslash escapes\r\n\t\t\t\t\th[ident] = str\r\n\t\t\t\telse\r\n\t\t\t\t\th[ident] = num\r\n\t\t\telse if neg\r\n\t\t\t\th[ident] = false\r\n\t\t\telse\r\n\t\t\t\th[ident] = true\r\n\t\telse\r\n\t\t\tcroak \"Invalid word #{OL(word)}\"\r\n\treturn h\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport js2uri = (js) =>\r\n\r\n\treturn 'data:text/javascript;charset=utf-8,' \\\r\n\t\t+ encodeURIComponent(js)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport now = () =>\r\n\r\n\treturn global.performance.now()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport timeit = (func, nReps=100) =>\r\n\r\n\tt0 = now()\r\n\tfor i in range(nReps)\r\n\t\tfunc()\r\n\tdiff = now() - t0\r\n\treturn diff / nReps\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport behead = (block) ->\r\n\r\n\tnlPos = block.indexOf(\"\\n\")\r\n\tif  (nlPos == -1)\r\n\t\treturn [block, '']\r\n\treturn [\r\n\t\tchomp(block.substring(0, nlPos))\r\n\t\tchomp(block.substring(nlPos+1))\r\n\t\t]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isTAML = (block) ->\r\n\r\n\t[head, rest] = behead(block)\r\n\treturn (head == '---')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fromTAML = (block) ->\r\n\r\n\t[head, rest] = behead(block)\r\n\thOptions = {\r\n\t\tskipInvalid: true\r\n\t\t}\r\n\treturn YAML.parse(untabify(rest, 2), hOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toTAML = (ds) ->\r\n\r\n\tstr = YAML.stringify(ds, {\r\n\t\tkeepUndef: true\r\n\t\tsimpleKeys: true\r\n\t\t})\r\n\treturn chomp(\"---\\n\" + tabify(str))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport sliceBlock = (block, start=0, end=undef) ->\r\n\r\n\tlLines = toArray(block)\r\n\tif notdefined(end)\r\n\t\tend = lLines.length\r\n\treturn toBlock(lLines.slice(start, end))\r\n"
  ]
}