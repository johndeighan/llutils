{
  "version": 3,
  "file": "llutils.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\llutils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# llutils.coffee\r\n\r\nimport YAML from 'yaml'\r\nmodule = await import('deep-equal')\r\ndeepEqual = module.default\r\nimport pathLib from 'node:path'\r\n\r\n`export const undef = void 0`\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport dclone = (x) =>\r\n\r\n\treturn structuredClone(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport identityFunc = (x) =>\r\n\r\n\treturn x\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport stripCR = (str) =>\r\n\r\n\tif notdefined(str)\r\n\t\treturn undef\r\n\tassert isString(str), \"Not a string: #{OL(str)}\"\r\n\treturn str.replaceAll('\\r', '')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport pass = () =>    # do nothing\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport range = (n) ->\r\n\r\n\ti = 0\r\n\twhile (i < n)\r\n\t\tyield i\r\n\t\ti += 1\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport inRange = (i, n) ->\r\n\r\n\tassert isInteger(i), \"Not an integer: i = #{OL(i)}\"\r\n\tassert isInteger(n), \"Not an integer: n = #{OL(n)}\"\r\n\treturn (i >= 0) && (i < n)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rev_range = (n) ->\r\n\r\n\ti = n\r\n\twhile (i > 0)\r\n\t\ti -= 1\r\n\t\tyield i\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport add_s = (n) =>\r\n\r\n\treturn if (n == 1) then '' else 's'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nwarnOnly = false\r\nexport warnOnError = (flag=true) => warnOnly = flag\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport assert = (cond, msg) =>\r\n\r\n\tif isArray(cond)\r\n\t\tfor bool in cond\r\n\t\t\tassert bool, msg\r\n\telse if !cond\r\n\t\tif warnOnly\r\n\t\t\tconsole.log \"ERROR: #{msg}\"\r\n\t\telse\r\n\t\t\tthrow new Error(msg)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport croak = (msg) =>\r\n\r\n\tif warnOnly\r\n\t\tconsole.log \"ERROR: #{msg}\"\r\n\telse\r\n\t\tthrow new Error(msg)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# returns true if all args defined\r\n\r\nexport defined = (...lObjs) =>\r\n\r\n\tfor obj in lObjs\r\n\t\tif (obj == undef) || (obj == null)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# returns true if any args defined\r\n\r\nexport anyDefined = (...lObjs) =>\r\n\r\n\tfor obj in lObjs\r\n\t\tif (obj != undef) && (obj != null)\r\n\t\t\treturn true\r\n\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport notdefined = (...lObjs) =>\r\n\r\n\tfor obj in lObjs\r\n\t\tif (obj != undef) && (obj != null)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport words = (lStrings...) =>\r\n\r\n\tlWords = []\r\n\tfor str in lStrings\r\n\t\tstr = str.trim()\r\n\t\tif (str != '')\r\n\t\t\tfor word in str.split(/\\s+/)\r\n\t\t\t\tlWords.push word\r\n\treturn lWords\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isString = (x, hOptions={}) =>\r\n\r\n\tif (typeof x != 'string') && !(x instanceof String)\r\n\t\treturn false\r\n\tif (hOptions == 'nonempty') || hOptions.nonempty\r\n\t\treturn nonEmpty(x)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- sometimes we can't use getOptions() because\r\n#     it calls the current function\r\n\r\nexport getOneOption = (name, hOptions) =>\r\n\r\n\tif (typeof hOptions == 'string') || (hOptions instanceof String)\r\n\t\treturn hOptions.split(/\\s+/).includes(name)\r\n\telse\r\n\t\treturn hOptions[name]\r\n\r\n# ---------------------------------------------------------------------------\r\n# Valid options:\r\n#    allStrings: boolean\r\n#    nonempty: boolean\r\n\r\nexport isArray = (x, hOptions={}) =>\r\n\r\n\tnonempty = getOneOption 'nonempty', hOptions\r\n\tallStrings = getOneOption 'allStrings', hOptions\r\n\r\n\tif ! Array.isArray(x)\r\n\t\treturn false\r\n\tif nonempty && (x.length == 0)\r\n\t\treturn false\r\n\tif allStrings\r\n\t\tfor item in x\r\n\t\t\tif ! isString(item)\r\n\t\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isBoolean = (x, hOptions={}) =>\r\n\r\n\treturn (x == true) || (x == false) || (x instanceof Boolean)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isNumber = (x, hOptions=undef) =>\r\n\r\n\tif (typeof x == 'number') || (typeof x == 'bigint')\r\n\t\tresult = true\r\n\telse if (x instanceof Number)\r\n\t\tresult = true\r\n\telse\r\n\t\treturn false\r\n\r\n\tif defined(hOptions)\r\n\t\tassert isHash(hOptions), \"2nd arg not a hash: #{OL(hOptions)}\"\r\n\t\t{min, max} = hOptions\r\n\t\tif defined(min) && (x < min)\r\n\t\t\tresult = false\r\n\t\tif defined(max) && (x > max)\r\n\t\t\tresult = false\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isInteger = (x, hOptions={}) =>\r\n\r\n\tif (typeof x == 'bigint')\r\n\t\tresult = true\r\n\tif (typeof x == 'number')\r\n\t\tresult = Number.isInteger(x)\r\n\telse if (x instanceof Number)\r\n\t\tresult = Number.isInteger(x.valueOf())\r\n\telse\r\n\t\treturn false\r\n\r\n\tif result\r\n\t\tif defined(hOptions.min) && (x < hOptions.min)\r\n\t\t\tresult = false\r\n\t\tif defined(hOptions.max) && (x > hOptions.max)\r\n\t\t\tresult = false\r\n\treturn result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isHash = (x) =>\r\n\r\n\tif notdefined(x?.constructor?.name)\r\n\t\treturn false\r\n\treturn (x.constructor.name == 'Object')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFunction = (x) =>\r\n\r\n\tif (typeof x != 'function') && !(x instanceof Function)\r\n\t\treturn false\r\n\treturn !(x.toString().startsWith('class'))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isRegExp = (x) =>\r\n\r\n\treturn (typeof x == 'regexp') || (x instanceof RegExp)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isClass = (x) =>\r\n\r\n\tif (typeof x != 'function')\r\n\t\treturn false\r\n\treturn (x.toString().startsWith('class'))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport className = (x) =>\r\n\t# --- item can be a class or an object\r\n\r\n\tif isClass(x)\r\n\t\ttext = x.toString()\r\n\t\tif lMatches = text.match(/class\\s+(\\w+)/)\r\n\t\t\treturn lMatches[1]\r\n\t\telse if lMatches = text.match(/class/)\r\n\t\t\treturn undef\r\n\t\telse\r\n\t\t\tthrow new Error(\"className(): Bad input class\")\r\n\telse if isClassInstance(x)\r\n\t\treturn x.constructor.name\r\n\telse\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isPromise = (x) =>\r\n\r\n\tif (typeof x != 'object') || (x == null)\r\n\t\treturn false\r\n\treturn (typeof x.then == 'function')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isClassInstance = (x, lReqKeys=undef) =>\r\n\r\n\tif (typeof x != 'object')\r\n\t\treturn false\r\n\tif (x instanceof String) \\\r\n\t\t\t|| (x instanceof Number) \\\r\n\t\t\t|| (x instanceof Boolean) \\\r\n\t\t\t|| (x instanceof RegExp) \\\r\n\t\t\t|| (x instanceof Function) \\\r\n\t\t\t|| isArray(x) \\\r\n\t\t\t|| isHash(x) \\\r\n\t\t\t|| isPromise(x)\r\n\t\treturn false\r\n\tif defined(lReqKeys)\r\n\t\tif isString(lReqKeys)\r\n\t\t\tlReqKeys = words(lReqKeys)\r\n\t\tassert isArray(lReqKeys), \"lReqKeys not an array: #{OL(lReqKeys)}\"\r\n\t\tfor key in lReqKeys\r\n\t\t\ttype = undef\r\n\t\t\tif lMatches = key.match(///^ (\\&) (.*) $///)\r\n\t\t\t\t[_, type, key] = lMatches\r\n\t\t\tif notdefined(x[key])\r\n\t\t\t\treturn false\r\n\t\t\tif (type == '&') && (typeof x[key] != 'function')\r\n\t\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport cleanHash = (h) =>\r\n\r\n\t# --- modifies h in place, but also returns h\r\n\tfor key in keys(h)\r\n\t\tif isEmpty(h[key])\r\n\t\t\tdelete h[key]\r\n\treturn h\r\n\r\n# ---------------------------------------------------------------------------\r\n#   escapeStr - escape newlines, carriage return, TAB chars, etc.\r\n# --- NOTE: We can't use OL() inside here since it uses escapeStr()\r\n\r\nexport hEsc = {\r\n\t\"\\r\": '←'\r\n\t\"\\n\": '↓'\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\nexport hEscNoNL = {\r\n\t\"\\r\": '←'\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\n\r\nexport escapeStr = (str, hReplace=hEsc, hOptions={}) =>\r\n\t# --- hReplace can also be a string:\r\n\t#        'esc'     - escape space, newline, tab\r\n\t#        'escNoNL' - escape space, tab\r\n\t#     Valid options:\r\n\t#        offset    - indicate position of offset\r\n\t#        poschar   - char to use to indicate position\r\n\r\n\tassert isString(str), \"not a string: #{typeof str}\"\r\n\tif isString(hReplace)\r\n\t\tswitch hReplace\r\n\t\t\twhen 'esc'\r\n\t\t\t\thReplace = hEsc\r\n\t\t\twhen 'escNoNL'\r\n\t\t\t\thReplace = hEscNoNL\r\n\t\t\telse\r\n\t\t\t\thReplace = {}\r\n\tassert isHash(hReplace), \"not a hash\"\r\n\r\n\t{offset, poschar} = getOptions hOptions, {\r\n\t\toffset: undef\r\n\t\tposchar: '┊'\r\n\t\t}\r\n\r\n\tlParts = []\r\n\ti = 0\r\n\tfor ch from str\r\n\t\tif defined(offset)\r\n\t\t\tif (i == offset)\r\n\t\t\t\tlParts.push poschar\r\n\t\tresult = hReplace[ch]\r\n\t\tif defined(result)\r\n\t\t\tlParts.push result\r\n\t\telse\r\n\t\t\tlParts.push ch\r\n\t\ti += 1\r\n\tif (offset == str.length)\r\n\t\tlParts.push poschar\r\n\treturn lParts.join('')\r\n\r\n# ---------------------------------------------------------------------------\r\n#   escapeBlock\r\n#      - remove carriage returns\r\n#      - escape spaces, TAB chars\r\n\r\nexport escapeBlock = (block) =>\r\n\r\n\treturn escapeStr(block, 'escNoNL')\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Can't use getOptions() !!!!!\r\n\r\nexport OL = (obj, hOptions={}) =>\r\n\r\n\tif (obj == undef) then return 'undef'\r\n\tif (obj == null) then return 'null'\r\n\r\n\tif hOptions.hasOwnProperty('esc')\r\n\t\tesc = hOptions.esc\r\n\telse\r\n\t\tesc = true\r\n\r\n\tif hOptions.hasOwnProperty('short')\r\n\t\tshort = hOptions.short\r\n\telse\r\n\t\tshort = false\r\n\r\n\tif short\r\n\t\tif isHash(obj) then return 'HASH'\r\n\t\tif isArray(obj) then return 'ARRAY'\r\n\t\tif isFunction(obj) then return 'FUNCTION'\r\n\t\tif isClassInstance(obj) then return 'CLASS INSTANCE'\r\n\r\n\tmyReplacer = (key, value) =>\r\n\t\tif (value == undef)\r\n\t\t\treturn '«undef»'\r\n\t\ttype = typeof value\r\n\t\tswitch type\r\n\t\t\twhen 'symbol'\r\n\t\t\t\treturn '«Symbol»'\r\n\t\t\twhen 'bigint'\r\n\t\t\t\treturn \"«BigInt #{value.toString()}»\"\r\n\t\t\twhen 'function'\r\n\t\t\t\tif value.toString().startsWith('class')\r\n\t\t\t\t\ttag = 'Class'\r\n\t\t\t\telse\r\n\t\t\t\t\ttag = 'Function'\r\n\t\t\t\tif defined(value.name)\r\n\t\t\t\t\treturn \"«#{tag} #{value.name}»\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn \"«#{tag}»\"\r\n\t\t\twhen 'string'\r\n\t\t\t\t# --- NOTE: JSON.stringify will add quote chars\r\n\t\t\t\tif esc\r\n\t\t\t\t\treturn escapeStr(value)\r\n\t\t\t\telse\r\n\t\t\t\t\treturn value\r\n\t\t\twhen 'object'\r\n\t\t\t\tif value instanceof RegExp\r\n\t\t\t\t\treturn \"«RegExp #{value.toString()}»\"\r\n\t\t\t\tif defined(value) && (typeof value.then == 'function')\r\n\t\t\t\t\treturn \"«Promise»\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn value\r\n\t\t\telse\r\n\t\t\t\treturn value\r\n\r\n\tresult = JSON.stringify(obj, myReplacer)\r\n\r\n\t# --- Because JSON.stringify adds quote marks,\r\n\t#     we remove them when using .\r\n\tfinalResult = result \\\r\n\t\t.replaceAll('\"«','«').replaceAll('»\"','»')\r\n\treturn finalResult\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport CWS = (str) =>\r\n\r\n\tassert isString(str), \"CWS(): parameter not a string\"\r\n\treturn str.trim().replace(/\\s+/sg, ' ')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport ML = (obj, hOptions={}) =>\r\n\r\n\tif (obj == undef) then return '.undef.'\r\n\tif (obj == null) then return '.null.'\r\n\r\n\tmyReplacer = (key, x) =>\r\n\t\ttype = typeof x\r\n\t\tswitch type\r\n\t\t\twhen 'bigint'\r\n\t\t\t\treturn \"«BigInt #{x.toString()}»\"\r\n\t\t\twhen 'function'\r\n\t\t\t\tif x.toString().startsWith('class')\r\n\t\t\t\t\ttag = 'Class'\r\n\t\t\t\telse\r\n\t\t\t\t\ttag = 'Function'\r\n\t\t\t\tif defined(x.name)\r\n\t\t\t\t\treturn \"«#{tag} #{x.name}»\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn \"«#{tag}»\"\r\n\t\t\twhen 'string'\r\n\t\t\t\t# --- NOTE: JSON.stringify will add quote chars\r\n\t\t\t\treturn escapeStr(x)\r\n\t\t\twhen 'object'\r\n\t\t\t\tif x instanceof RegExp\r\n\t\t\t\t\treturn \"«RegExp #{x.toString()}»\"\r\n\t\t\t\tif defined(x) && (typeof x.then == 'function')\r\n\t\t\t\t\treturn \"«Promise»\"\r\n\t\t\t\telse\r\n\t\t\t\t\treturn x\r\n\t\t\telse\r\n\t\t\t\treturn x\r\n\r\n\tresult = JSON.stringify(obj, myReplacer, \"\\t\")\r\n\r\n\t# --- Because JSON.stringify adds quote marks,\r\n\t#     we remove them when using « and »\r\n\tfinalResult = result.replaceAll('\"«','«').replaceAll('»\"','»')\r\n\treturn finalResult\r\n\r\n# ---------------------------------------------------------------------------\r\n# returns a single string\r\n\r\nexport OLS = (lObjects, hOptions={}) =>\r\n\r\n\tsep = hOptions.sep || ','\r\n\tshort = hOptions.short || false\r\n\r\n\tassert isArray(lObjects), \"not an array\"\r\n\tlParts = []\r\n\tfor obj in lObjects\r\n\t\tlParts.push OL(obj, {short})\r\n\treturn lParts.join(sep)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   isEmpty - one of:\r\n#      - string is whitespace\r\n#      - array has no elements\r\n#      - hash has no keys\r\n\r\nexport isEmpty = (x) =>\r\n\r\n\tif (x == undef) || (x == null) || (x == '')\r\n\t\treturn true\r\n\tif isString(x)\r\n\t\treturn (x.match(/^\\s*$/) != null)\r\n\tif isArray(x)\r\n\t\treturn (x.length == 0)\r\n\tif isHash(x)\r\n\t\treturn (Object.keys(x).length == 0)\r\n\telse\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n#   nonEmpty - not isEmpty(x)\r\n\r\nexport nonEmpty = (x) =>\r\n\r\n\treturn ! isEmpty(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport chomp = (str) =>\r\n\t# --- Remove trailing \\n if present\r\n\r\n\tlen = str.length\r\n\tif (str[len-1] == '\\n')\r\n\t\tif (str[len-2] == '\\r')\r\n\t\t\treturn str.substring(0, len-2)\r\n\t\telse\r\n\t\t\treturn str.substring(0, len-1)\r\n\telse\r\n\t\treturn str\r\n\r\n# ---------------------------------------------------------------------------\r\n#        HASH utilities\r\n# ---------------------------------------------------------------------------\r\n\r\nexport keys = Object.keys\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hasKey = (h, key) =>\r\n\r\n\tif notdefined(h)\r\n\t\treturn false\r\n\tassert isHash(h) || isClassInstance(h), \"h is #{h}\"\r\n\tassert isString(key), \"key is #{key}\"\r\n\treturn h.hasOwnProperty(key)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- item can be a hash or array\r\n\r\nexport removeKeys = (item, lKeys) =>\r\n\r\n\tassert isArray(lKeys), \"not an array\"\r\n\tif isArray(item)\r\n\t\tfor subitem in item\r\n\t\t\tremoveKeys subitem, lKeys\r\n\telse if isHash(item)\r\n\t\tfor key in lKeys\r\n\t\t\tif item.hasOwnProperty(key)\r\n\t\t\t\tdelete item[key]\r\n\t\tfor prop,value of item\r\n\t\t\tremoveKeys value, lKeys\r\n\treturn item\r\n\r\n# ---------------------------------------------------------------------------\r\n# ---------------------------------------------------------------------------\r\n\r\nexport blockToArray = (block) =>\r\n\r\n\tassert isString(block), \"block is: #{typeof block}\"\r\n\tif isEmpty(block)\r\n\t\treturn []\r\n\telse\r\n\t\treturn block.split(/\\r?\\n/)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toArray = (strOrArray) =>\r\n\r\n\tif isArray(strOrArray)\r\n\t\treturn strOrArray\r\n\telse\r\n\t\treturn blockToArray(strOrArray)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport arrayToBlock = (lLines) =>\r\n\r\n\tassert isArray(lLines), \"lLines is not an array\"\r\n\treturn lLines.filter((line) => defined(line)).join(\"\\n\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toBlock = (strOrArray) =>\r\n\r\n\tif isString(strOrArray)\r\n\t\treturn strOrArray\r\n\telse\r\n\t\treturn arrayToBlock(strOrArray)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport listdiff = (lItems, lToRemove) =>\r\n\r\n\tassert isArray(lItems), \"lItems is #{OL(lItems)}\"\r\n\tassert isArray(lToRemove), \"lToRemove is #{OL(lToRemove)}\"\r\n\treturn lItems.filter((item) =>\r\n\t\treturn ! lToRemove.includes(item))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nlog_level = 0\r\n\r\nexport LOG_indent = () =>\r\n\r\n\tlog_level += 1\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOG_undent = () =>\r\n\r\n\tlog_level -= 1\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport LOG = (item, hOptions={}) =>\r\n\r\n\t{depth} = getOptions hOptions, {\r\n\t\tdepth: null\r\n\t\t}\r\n\tif (log_level > 0)\r\n\t\titem = \"\\t\".repeat(log_level) + item\r\n\tif isString(item)\r\n\t\tconsole.log untabify(item, '!strict')\r\n\telse\r\n\t\tconsole.dir item, {depth}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport splitPrefix = (line) =>\r\n\r\n\tassert isString(line), \"non-string: #{typeof line}\"\r\n\tlMatches = line.match(/^(\\s*)(.*)$/)\r\n\treturn [lMatches[1], lMatches[2]]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport substrCount = (str, char) =>\r\n\r\n\treturn (str.match(///#{char}///g)||[]).length\r\n\r\n# ---------------------------------------------------------------------------\r\n#    tabify - convert leading spaces to TAB characters\r\n#             if numSpaces is not defined, then the first line\r\n#             that contains at least one space sets it\r\n\r\nexport tabify = (str, hOptions={}) =>\r\n\r\n\t{numSpaces, strict} = getOptions hOptions, {\r\n\t\tnumSpaces: undef\r\n\t\tstrict: true\r\n\t\t}\r\n\tlLines = []\r\n\tfor str in blockToArray(str)\r\n\t\t[prefix, theRest] = splitPrefix(str)\r\n\t\tprefixLen = prefix.length\r\n\t\tif prefixLen == 0\r\n\t\t\tlLines.push theRest\r\n\t\telse\r\n\t\t\tif strict\r\n\t\t\t\tassert (prefix.indexOf('\\t') == -1), \"unexpected TAB\"\r\n\t\t\tif (numSpaces == undef)\r\n\t\t\t\tnumSpaces = substrCount(prefix, ' ')\r\n\t\t\tspaces = ' '.repeat(numSpaces)\r\n\t\t\tprefix = prefix.replaceAll(spaces, \"\\t\")\r\n\t\t\tlLines.push \"#{prefix}#{theRest}\"\r\n\treturn arrayToBlock(lLines)\r\n\r\n# ---------------------------------------------------------------------------\r\n#    tabify - convert leading spaces to TAB characters\r\n#             if numSpaces is not defined, then the first line\r\n#             that contains at least one space sets it\r\n\r\nexport untabify = (str, hOptions={}) =>\r\n\r\n\t{numSpaces, strict} = getOptions hOptions, {\r\n\t\tnumSpaces: 3\r\n\t\tstrict: true\r\n\t\t}\r\n\tassert isInteger(numSpaces), \"bad numSpaces: #{OL(numSpaces)}\"\r\n\tspaces = ' '.repeat(numSpaces)\r\n\tlLines = []\r\n\tfor str in blockToArray(str)\r\n\t\t[prefix, theRest] = splitPrefix(str)\r\n\t\tprefixLen = prefix.length\r\n\t\tif prefixLen == 0\r\n\t\t\tlLines.push theRest\r\n\t\telse\r\n\t\t\tif strict\r\n\t\t\t\tassert (prefix.indexOf(' ') == -1), \"unexpected space char\"\r\n\t\t\tprefix = prefix.replaceAll(\"\\t\", spaces)\r\n\t\t\tlLines.push \"#{prefix}#{theRest}\"\r\n\treturn arrayToBlock(lLines)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport gen2array = (reader) =>\r\n\r\n\tlLines = []\r\n\tfor line from reader()\r\n\t\tlLines.push line\r\n\treturn lLines\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport gen2block = (reader) =>\r\n\r\n\tlLines = gen2array(reader)\r\n\treturn lLines.join(\"\\n\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport spaces = (n) =>\r\n\r\n\treturn \" \".repeat(n)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport tabs = (n) =>\r\n\r\n\treturn \"\\t\".repeat(n)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- valid options:\r\n#        char - char to use on left and right\r\n#        buffer - num spaces around text when char <> ' '\r\n\r\nexport centered = (text, width, hOptions={}) =>\r\n\r\n\t{char, numBuffer} = getOptions hOptions, {\r\n\t\tchar: ' '\r\n\t\tnumBuffer: 2\r\n\t\t}\r\n\r\n\tif !isString(text)\r\n\t\ttext = text.toString()\r\n\ttotSpaces = width - text.length\r\n\tif (totSpaces <= 0)\r\n\t\treturn text\r\n\tnumLeft = Math.floor(totSpaces / 2)\r\n\tnumRight = totSpaces - numLeft\r\n\tif (char == ' ')\r\n\t\treturn spaces(numLeft) + text + spaces(numRight)\r\n\telse\r\n\t\tbuf = ' '.repeat(numBuffer)\r\n\t\tleft = char.repeat(numLeft - numBuffer)\r\n\t\tright = char.repeat(numRight - numBuffer)\r\n\t\tnumLeft -= numBuffer\r\n\t\tnumRight -= numBuffer\r\n\t\treturn left + buf + text + buf + right\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport leftAligned = (text, width, hOptions={}) =>\r\n\r\n\tif (text.length >= width)\r\n\t\treturn text\r\n\tnumSpaces = width - text.length\r\n\treturn text + ' '.repeat(numSpaces)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rightAligned = (text, width, hOptions={}) =>\r\n\r\n\tif (text.length >= width)\r\n\t\treturn text\r\n\tnumSpaces = width - text.length\r\n\treturn ' '.repeat(numSpaces) + text\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport countChars = (str, ch) =>\r\n\r\n\tcount = 0\r\n\tpos = -1\r\n\twhile (pos = str.indexOf(ch, pos+1)) != -1\r\n\t\tcount += 1\r\n\treturn count\r\n\r\n# ---------------------------------------------------------------------------\r\n#   rtrim - strip trailing whitespace\r\n\r\nexport rtrim = (line) =>\r\n\r\n\tassert isString(line), \"not a string: #{typeof line}\"\r\n\tlMatches = line.match(/^(.*?)\\s+$/)\r\n\tif defined(lMatches)\r\n\t\treturn lMatches[1]\r\n\telse\r\n\t\treturn line\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Always logs using console.log, therefore\r\n#     strings are untabified\r\n\r\nexport log = (...lItems) =>\r\n\r\n\tfor x in lItems\r\n\t\tif isString(x)\r\n\t\t\tconsole.log untabify(x)\r\n\t\telse\r\n\t\t\tconsole.log x\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport getOptions = (options=undef, hDefault={}) =>\r\n\r\n\tif isEmpty(options)\r\n\t\thOptions = {}\r\n\telse if isHash(options)\r\n\t\thOptions = options\r\n\telse if isString(options)\r\n\t\thOptions = hashFromString(options)\r\n\telse\r\n\t\tcroak \"Bad options: #{OL(options)}\"\r\n\r\n\t# --- Fill in defaults for missing values\r\n\tfor own key,value of hDefault\r\n\t\tif ! hasKey(hOptions, key) && defined(value)\r\n\t\t\thOptions[key] = value\r\n\r\n\treturn hOptions\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport hashFromString = (str) =>\r\n\r\n\tassert isString(str), \"not a string: #{OL(str)}\"\r\n\th = {}\r\n\tfor word in words(str)\r\n\t\tif lMatches = word.match(///^\r\n\t\t\t\t(\\!)?                    # negate value\r\n\t\t\t\t([A-Za-z][A-Za-z_0-9]*)  # identifier\r\n\t\t\t\t(?:\r\n\t\t\t\t\t(=)\r\n\t\t\t\t\t(.*)\r\n\t\t\t\t\t)?\r\n\t\t\t\t$///)\r\n\t\t\t[_, neg, ident, eqSign, str] = lMatches\r\n\t\t\tif nonEmpty(eqSign)\r\n\t\t\t\tassert isEmpty(neg), \"negation with string value\"\r\n\r\n\t\t\t\t# --- check if str is a valid number\r\n\t\t\t\tnum = parseFloat(str)\r\n\t\t\t\tif Number.isNaN(num)\r\n\t\t\t\t\t# --- TO DO: interpret backslash escapes\r\n\t\t\t\t\th[ident] = str\r\n\t\t\t\telse\r\n\t\t\t\t\th[ident] = num\r\n\t\t\telse if neg\r\n\t\t\t\th[ident] = false\r\n\t\t\telse\r\n\t\t\t\th[ident] = true\r\n\t\telse\r\n\t\t\tcroak \"Invalid word #{OL(word)}\"\r\n\treturn h\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport js2uri = (js) =>\r\n\r\n\treturn 'data:text/javascript;charset=utf-8,' \\\r\n\t\t+ encodeURIComponent(js)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport now = () =>\r\n\r\n\treturn global.performance.now()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport timeit = (func, nReps=100) =>\r\n\r\n\tt0 = now()\r\n\tfor i in range(nReps)\r\n\t\tfunc()\r\n\tdiff = now() - t0\r\n\treturn diff / nReps\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport behead = (block) ->\r\n\r\n\tnlPos = block.indexOf(\"\\n\")\r\n\tif  (nlPos == -1)\r\n\t\treturn [block, '']\r\n\treturn [\r\n\t\tchomp(block.substring(0, nlPos))\r\n\t\tchomp(block.substring(nlPos+1))\r\n\t\t]\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isTAML = (block) ->\r\n\r\n\tif ! isString(block)\r\n\t\treturn false\r\n\t[head, rest] = behead(block)\r\n\treturn (head == '---')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fromTAML = (block) ->\r\n\r\n\t[head, rest] = behead(block)\r\n\tassert head.startsWith('---'), \"Missing '---'\"\r\n\thOptions = {\r\n\t\tskipInvalid: true\r\n\t\t}\r\n\treturn YAML.parse(untabify(rest, {numSpaces:2}), hOptions)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport toTAML = (ds) ->\r\n\r\n\tstr = YAML.stringify(ds, {\r\n\t\tkeepUndef: true\r\n\t\tsimpleKeys: true\r\n\t\t})\r\n\treturn chomp(\"---\\n\" + tabify(str))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport sliceBlock = (block, start=0, end=undef) ->\r\n\r\n\tlLines = toArray(block)\r\n\tif notdefined(end)\r\n\t\tend = lLines.length\r\n\treturn toBlock(lLines.slice(start, end))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport sortArrayOfHashes = (lHashes, key) =>\r\n\r\n\t# --- NOTE: works whether values are strings or numbers\r\n\tcompareFunc = (a, b) =>\r\n\t\tif a[key] < b[key]\r\n\t\t\treturn -1\r\n\t\telse if a[key] > b[key]\r\n\t\t\treturn 1\r\n\t\telse\r\n\t\t\treturn 0\r\n\tlHashes.sort(compareFunc)\r\n\r\n\t# --- NOTE: array is sorted in place, but sometimes\r\n\t#           it's useful if we return a ref to it anyway\r\n\treturn lHashes\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport sortedArrayOfHashes = (lHashes, key) =>\r\n\r\n\t# --- NOTE: works whether values are strings or numbers\r\n\tcompareFunc = (a, b) =>\r\n\t\tif a[key] < b[key]\r\n\t\t\treturn -1\r\n\t\telse if a[key] > b[key]\r\n\t\t\treturn 1\r\n\t\telse\r\n\t\t\treturn 0\r\n\treturn lHashes.toSorted(compareFunc)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport cmdScriptName = () =>\r\n\r\n\tstub = pathLib.parse(process.argv[1]).name\r\n\tshort = tla(stub)\r\n\treturn short || stub\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport cmdArgStr = (lArgs=undef) =>\r\n\r\n\tif isString(lArgs)\r\n\t\treturn lArgs\r\n\tif defined(lArgs)\r\n\t\tassert isArray(lArgs), \"Not an array: #{OL(lArgs)}\"\r\n\telse\r\n\t\tlArgs = process.argv.slice(2) || []\r\n\treturn lArgs.map((str) =>\r\n\t\tif lMatches = str.match(///^\r\n\t\t\t\t-          # a dash\r\n\t\t\t\t([^=\\s]+)  # option name\r\n\t\t\t\t=          # equal sign\r\n\t\t\t\t(.*)\r\n\t\t\t\t$///)\r\n\t\t\t[_, name, value] = lMatches\r\n\t\t\tif value.includes(' ')\r\n\t\t\t\treturn \"-#{name}=\\\"#{value}\\\"\"\r\n\t\t\telse\r\n\t\t\t\treturn \"-#{name}=#{value}\"\r\n\t\telse if str.includes(' ')\r\n\t\t\treturn \"\\\"#{str}\\\"\"\r\n\t\telse\r\n\t\t\treturn str\r\n\t\t).join(' ')\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- generate a 3 letter acronym if file stub is <str>-<str>-<str>\r\n\r\nexport tla = (stub) =>\r\n\r\n\tif lMatches = stub.match(///^\r\n\t\t\t([a-z])(?:[a-z]*)\r\n\t\t\t\\-\r\n\t\t\t([a-z])(?:[a-z]*)\r\n\t\t\t\\-\r\n\t\t\t([a-z])(?:[a-z]*)\r\n\t\t\t$///)\r\n\t\t[_, a, b, c] = lMatches\r\n\t\treturn a + b + c\r\n\telse\r\n\t\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport rpad = (str, len, ch=' ') =>\r\n\r\n\tassert (ch.length == 1), \"Not a char\"\r\n\tif notdefined(str)\r\n\t\treturn ch.repeat(len)\r\n\tif !isString(str)\r\n\t\tstr = str.toString()\r\n\textra = len - str.length\r\n\tif (extra < 0) then extra = 0\r\n\treturn str + ch.repeat(extra)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport lpad = (str, len, ch=' ') =>\r\n\r\n\tassert (ch.length == 1), \"Not a char\"\r\n\tif notdefined(str)\r\n\t\treturn ch.repeat(len)\r\n\tif !isString(str)\r\n\t\tstr = str.toString()\r\n\textra = len - str.length\r\n\tif (extra < 0) then extra = 0\r\n\treturn ch.repeat(extra) + str\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport padString = (str, width, align) ->\r\n\r\n\tswitch align\r\n\t\twhen 'left' then return rpad(str, width)\r\n\t\twhen 'center' then return centered(str, width)\r\n\t\twhen 'right' then return lpad(str, width)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport zpad = (n, len) =>\r\n\r\n\tnStr = n.toString()\r\n\treturn lpad(nStr, len, '0')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport findOneOf = (str, lSubStrings, pos=0) =>\r\n\r\n\tassert isString(str), \"not a string: #{OL(str)}\"\r\n\tassert isArray(lSubStrings), \"Not an array: #{OL(lSubStrings)}\"\r\n\tassert (lSubStrings.length > 0), \"lSubStrings is empty array\"\r\n\tloc = -1\r\n\tfor substr in lSubStrings\r\n\t\ti = str.indexOf(substr, pos)\r\n\t\tif (i >= 0)\r\n\t\t\t# --- found\r\n\t\t\tif (loc == -1) || (i < loc)\r\n\t\t\t\tloc = i\r\n\treturn loc\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport matchPos = (str, pos=0) =>\r\n\r\n\tstartCh = str[pos]\r\n\tendCh = switch startCh\r\n\t\twhen '(' then ')'\r\n\t\twhen '[' then ']'\r\n\t\twhen '{' then '}'\r\n\t\telse croak \"Invalid startCh: #{OL(startCh)}\"\r\n\tcount = 1\r\n\tpos += 1\r\n\tloc = findOneOf(str, [startCh, endCh], pos)\r\n\twhile (loc != -1) && (count > 0)\r\n\t\tif (str[loc] == startCh)\r\n\t\t\tcount += 1\r\n\t\telse if (str[loc] == endCh)\r\n\t\t\tcount -= 1\r\n\t\tpos = loc\r\n\t\tloc = findOneOf(str, [startCh, endCh], pos+1)\r\n\tassert (pos >= 0) \\\r\n\t\t\t&& (pos < str.length) \\\r\n\t\t\t&& (str[pos] == endCh) \\\r\n\t\t\t&& (count == 0),\r\n\t\t\t\"No matching #{endCh} found\"\r\n\treturn pos\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- func will receive (str)\r\n#     should return [extractedStr, newpos]\r\n#        newpos must be > pos\r\n#        extractedStr may be undef\r\n\r\nexport splitStr = (str, splitFunc) =>\r\n\r\n\tlParts = []\r\n\tpos = 0\r\n\twhile (pos < str.length)\r\n\t\t[extractedStr, inc] = splitFunc(str.substring(pos))\r\n\t\tassert (inc > 0), \"inc = #{inc}\"\r\n\t\tpos += inc\r\n\t\tif defined(extractedStr)\r\n\t\t\tlParts.push extractedStr\r\n\treturn lParts\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport setsAreEqual = (a, b) =>\r\n\r\n\tassert (a instanceof Set), \"a is not a set\"\r\n\tassert (b instanceof Set), \"b is not a set\"\r\n\treturn (a.size == b.size) \\\r\n\t\t&& [...a].every((val) => b.has(val))\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC !\r\n\r\nexport sleep = (sec) =>\r\n\r\n\tawait new Promise((r) => setTimeout(r, 1000 * sec))\r\n\treturn\r\n"
  ]
}