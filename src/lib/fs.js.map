{
  "version": 3,
  "file": "fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'node:fs'\r\nimport {globSync as glob} from 'glob'\r\nimport NReadLines from 'n-readlines'\r\nimport {temporaryFile} from 'tempy'\r\n\r\nimport {\r\n\tundef, defined, notdefined, words, OL, keys, hasKey,\r\n\tassert, croak, arrayToBlock, getOptions, sliceBlock,\r\n\tisString, isHash, gen2block, toTAML, isArray,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tisMetaDataStart, convertMetaData,\r\n\t} from '@jdeighan/llutils/metadata'\r\n\r\nexport lStatFields = words(\r\n\t'dev ino mode nlink uid gid rdev size blksize blocks',\r\n\t'atimeMs mtimeMs ctimeMs birthtimeMs',\r\n\t'atime mtime ctime birthtime',\r\n\t)\r\n\r\nlDirs = []\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport pushCWD = (dir) =>\r\n\r\n\tlDirs.push process.cwd()\r\n\tprocess.chdir(dir)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport popCWD = () =>\r\n\r\n\tassert (lDirs.length > 0), \"directory stack is empty\"\r\n\tdir = lDirs.pop()\r\n\tprocess.chdir(dir)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isProjRoot = (dir='.', hOptions={}) =>\r\n\r\n\t{strict} = getOptions hOptions, {\r\n\t\tstrict: false\r\n\t\t}\r\n\r\n\tfilePath = \"#{dir}/package.json\"\r\n\tif !isFile(filePath)\r\n\t\treturn false\r\n\r\n\tif !strict\r\n\t\treturn true\r\n\r\n\tlExpectedFiles = [\r\n\t\t'README.md'\r\n\t\t'.gitignore'\r\n\t\t]\r\n\r\n\tfor name in lExpectedFiles\r\n\t\tfilePath = \"#{dir}/#{name}\"\r\n\t\tif !isFile(filePath)\r\n\t\t\treturn false\r\n\r\n\tlExpectedDirs = [\r\n\t\t'node_modules'\r\n\t\t'.git'\r\n\t\t'src'\r\n\t\t'src/lib'\r\n\t\t'src/bin'\r\n\t\t'test'\r\n\t\t]\r\n\tfor name in lExpectedDirs\r\n\t\tdirPath = \"#{dir}/#{name}\"\r\n\t\tif !isDir(dirPath)\r\n\t\t\treturn false\r\n\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# All file/directory operations should operate from memory\r\n#    and can therefore be synchronous\r\n# Relies on the fact that modern OS's keep directory\r\n#    information in memory\r\n# ---------------------------------------------------------------------------\r\n#     convert \\ to /\r\n# --- convert \"C:...\" to \"c:...\"\r\n\r\nexport normalize = (path) =>\r\n\r\n\tpath = path.replaceAll '\\\\', '/'\r\n\tif (path.charAt(1) == ':')\r\n\t\treturn path.charAt(0).toLowerCase() + path.substring(1)\r\n\telse\r\n\t\treturn path\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should be called like: myself(import.meta.url)\r\n#     returns full path of current file\r\n\r\nexport myself = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath url\r\n\treturn normalize path\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkpath = (lParts...) =>\r\n\r\n\tfullPath = pathLib.resolve lParts...\r\n\treturn normalize fullPath\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport samefile = (file1, file2) =>\r\n\r\n\treturn (mkpath(file1) == mkpath(file2))\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport relpath = (lParts...) =>\r\n\r\n\tfullPath = pathLib.resolve lParts...\r\n\treturn normalize pathLib.relative('', fullPath)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fileDir = (filePath) =>\r\n\r\n\th = pathLib.parse(filePath)\r\n\treturn h.dir\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- returned hash has keys:\r\n#\r\n#  dev: 2114,\r\n#  ino: 48064969,\r\n#  mode: 33188,\r\n#  nlink: 1,\r\n#  uid: 85,\r\n#  gid: 100,\r\n#  rdev: 0,\r\n#  size: 527,\r\n#  blksize: 4096,\r\n#  blocks: 8,\r\n#  atimeMs: 1318289051000.1,\r\n#  mtimeMs: 1318289051000.1,\r\n#  ctimeMs: 1318289051000.1,\r\n#  birthtimeMs: 1318289051000.1,\r\n#  atime: Mon, 10 Oct 2011 23:24:11 GMT,\r\n#  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\r\n#  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\r\n#  birthtime: Mon, 10 Oct 2011 23:24:11 GMT\r\n\r\nexport getFileStats = (path) =>\r\n\r\n\treturn fs.lstatSync(path)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isDir = (dirPath) =>\r\n\r\n\tif ! fs.existsSync(dirPath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn getFileStats(dirPath).isDirectory()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport clearDir = (dirPath) =>\r\n\r\n\ttry\r\n\t\thOptions = {withFileTypes: true, recursive: true}\r\n\t\tfor ent in fs.readdirSync(dirPath, hOptions)\r\n\t\t\tsubEnt = mkpath(ent.path, ent.name)\r\n\t\t\tif ent.isFile()\r\n\t\t\t\tfs.rmSync subEnt\r\n\t\t\telse if ent.isDirectory()\r\n\t\t\t\tclearDir subEnt\r\n\tcatch err\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkDir = (dirPath, hOptions={}) =>\r\n\r\n\ttry\r\n\t\tfs.mkdirSync dirPath\r\n\t\treturn true\r\n\tcatch err\r\n\t\tif (err.code == 'EEXIST')\r\n\t\t\tif hOptions.clear\r\n\t\t\t\tclearDir dirPath\r\n\t\t\treturn false\r\n\t\telse\r\n\t\t\tthrow err\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFile = (filePath) =>\r\n\r\n\tif ! fs.existsSync(filePath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn getFileStats(filePath).isFile()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allFiles = (lStrings) =>\r\n\r\n\tassert isArray(lStrings), \"expected array of strings, got #{OL(lStrings)}\"\r\n\tfor str in lStrings\r\n\t\tassert isString(str), \"expected array of strings, got #{OL(lStrings)}\"\r\n\t\tif !isFile(str)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport touch = (filePath) =>\r\n\r\n\tfd = fs.openSync(filePath, 'a')\r\n\tfs.closeSync(fd)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- returns one of:\r\n#        'missing'  - does not exist\r\n#        'dir'      - is a directory\r\n#        'file'     - is a file\r\n#        'unknown'  - exists, but not a file or directory\r\n\r\nexport pathType = (fullPath) =>\r\n\r\n\tassert isString(fullPath), \"not a string\"\r\n\tif fs.existsSync fullPath\r\n\t\tif isFile fullPath\r\n\t\t\treturn 'file'\r\n\t\telse if isDir fullPath\r\n\t\t\treturn 'dir'\r\n\t\telse\r\n\t\t\treturn 'unknown'\r\n\telse\r\n\t\treturn 'missing'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parsePath = (path) =>\r\n\t# --- NOTE: path may be a file URL, e.g. import.meta.url\r\n\t#           path may be a relative path\r\n\r\n\tassert isString(path), \"path is type #{typeof path}\"\r\n\r\n\tif path.match(/^file\\:\\/\\//)\r\n\t\tpath = normalize urlLib.fileURLToPath(path)\r\n\telse\r\n\t\t# --- handles relative paths\r\n\t\tpath = normalize pathLib.resolve(path)\r\n\ttype = pathType path\r\n\r\n\t{root, dir, base, name, ext} = pathLib.parse(path)\r\n\tif lMatches = name.match(///\r\n\t\t\t\\.\r\n\t\t\t([A-Za-z_]+)\r\n\t\t\t$///)\r\n\t\tpurpose = lMatches[1]\r\n\telse\r\n\t\tpurpose = undef\r\n\thFile = {\r\n\t\tpath\r\n\t\tfilePath: path\r\n\t\ttype\r\n\t\troot\r\n\t\tdir\r\n\t\tbase\r\n\t\tfileName: base   # my preferred name\r\n\t\tname             # use this for directory name\r\n\t\tstub: name       # my preferred name\r\n\t\text\r\n\t\tpurpose\r\n\t\t}\r\n\tif isFile(path)\r\n\t\tObject.assign hFile, getFileStats(path)\r\n\treturn hFile\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parentDir = (path) =>\r\n\r\n\thParsed = parsePath(path)\r\n\treturn hParsed.dir\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parallelPath = (path, name=\"temp\") =>\r\n\r\n\tfullPath = mkpath(path)  # make full path with '/' as separator\r\n\t{dir, fileName} = parsePath fullPath\r\n\tif (lMatches = dir.match(///^\r\n\t\t\t(.*)\r\n\t\t\t\\/         # separator\r\n\t\t\t[^\\/]+     # final dir name\r\n\t\t\t$///))\r\n\t\t[_, subpath] = lMatches\r\n\t\treturn \"#{subpath}/#{name}/#{fileName}\"\r\n\telse\r\n\t\tcroak \"Can't get parallelPath for '#{path}'\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport subPath = (path, name=\"temp\") =>\r\n\r\n\tfullPath = mkpath(path)  # make full path with '/' as separator\r\n\t{dir, fileName} = parsePath fullPath\r\n\treturn \"#{dir}/#{name}/#{fileName}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurp - read a file into a string\r\n\r\nexport slurp = (filePath, hOptions={}) =>\r\n\r\n\t{numLines, start} = getOptions hOptions, {\r\n\t\tnumLines: undef\r\n\t\tstart: 0\r\n\t\t}\r\n\r\n\tassert isString(filePath, 'nonEmpty'), \"empty path\"\r\n\tfilePath = mkpath(filePath)\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\tblock = fs.readFileSync(filePath, 'utf8') \\\r\n\t\t\t.toString() \\\r\n\t\t\t.replaceAll('\\r', '')\r\n\tif defined(numLines)\r\n\t\treturn sliceBlock(block, numLines, 0)\r\n\telse if (start > 0)\r\n\t\treturn sliceBlock(block, numLines, 0)\r\n\telse\r\n\t\treturn block\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barf - write a string to a file\r\n#          will ensure that all necessary directories exist\r\n\r\nexport barf = (contents, filePath) =>\r\n\r\n\tmkDirsForFile(filePath)\r\n\tfs.writeFileSync(filePath, contents)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport pathSubDirs = (filePath) =>\r\n\r\n\t{root, dir} = pathLib.parse(filePath)\r\n\treturn {\r\n\t\troot\r\n\t\tlParts: dir.slice(root.length).split(/[\\\\\\/]/)\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkDirsForFile = (filePath) =>\r\n\r\n\t{root, lParts} = pathSubDirs(filePath)\r\n\tdir = root\r\n\tfor part in lParts\r\n\t\tdir += \"/#{part}\"\r\n\t\tif ! isDir(dir)\r\n\t\t\tmkDir(dir)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- yield hFile with keys:\r\n#        path, filePath\r\n#        type\r\n#        root\r\n#        dir\r\n#        base, fileName\r\n#        name, stub\r\n#        ext\r\n#        purpose\r\n#     ...plus stat fields\r\n\r\nexport globFiles = (pattern='*', hGlobOptions={}) ->\r\n\r\n\thGlobOptions = getOptions hGlobOptions, {\r\n\t\twithFileTypes: true\r\n\t\tstat: true\r\n\t\tignore: \"node_modules/**\"\r\n\t\t}\r\n\r\n\tfor ent in glob(pattern, hGlobOptions)\r\n\t\tfilePath = mkpath(ent.fullpath())\r\n\t\t{root, dir, base, name, ext} = pathLib.parse(filePath)\r\n\t\tif lMatches = name.match(///\r\n\t\t\t\t\\.\r\n\t\t\t\t([A-Za-z_]+)\r\n\t\t\t\t$///)\r\n\t\t\tpurpose = lMatches[1]\r\n\t\telse\r\n\t\t\tpurpose = undef\r\n\t\tif ent.isDirectory()\r\n\t\t\ttype = 'dir'\r\n\t\telse if ent.isFile()\r\n\t\t\ttype = 'file'\r\n\t\telse\r\n\t\t\ttype = 'unknown'\r\n\t\thFile = {\r\n\t\t\tfilePath\r\n\t\t\tpath: filePath\r\n\t\t\trelPath: relpath(filePath)\r\n\t\t\ttype\r\n\t\t\troot\r\n\t\t\tdir\r\n\t\t\tbase\r\n\t\t\tfileName: base\r\n\t\t\tname\r\n\t\t\tstub: name\r\n\t\t\text\r\n\t\t\tpurpose\r\n\t\t\t}\r\n\t\tfor key in lStatFields\r\n\t\t\thFile[key] = ent[key]\r\n\t\tyield hFile\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allFilesMatching = (pattern='*', hOptions={}) ->\r\n\t# --- yields hFile with keys:\r\n\t#        path, filePath,\r\n\t#        type, root, dir, base, fileName,\r\n\t#        name, stub, ext, purpose\r\n\t#        (if eager) hMetaData, lLines\r\n\t# --- Valid options:\r\n\t#        hGlobOptions - options to pass to glob\r\n\t#        fileFilter - return path iff fileFilter(filePath) returns true\r\n\t#        eager - read the file and add keys hMetaData, lLines\r\n\t# --- Valid glob options:\r\n\t#        ignore - glob pattern for files to ignore\r\n\t#        dot - include dot files/directories (default: false)\r\n\t#        cwd - change working directory\r\n\r\n\t{hGlobOptions, fileFilter} = getOptions(hOptions, {\r\n\t\thGlobOptions: {\r\n\t\t\tignore: \"node_modules/**\"\r\n\t\t\t}\r\n\t\tfileFilter: (h) =>\r\n\t\t\t{filePath: path} = h\r\n\t\t\treturn isFile(path) && ! path.match(/\\bnode_modules\\b/i)\r\n\t\t})\r\n\r\n\tfor h from globFiles(pattern, hGlobOptions)\r\n\t\tif fileFilter(h)\r\n\t\t\tyield h\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- fileFilter, if defined, gets (filePath)\r\n\r\nexport deleteFilesMatching = (pattern, hOptions={}) =>\r\n\r\n\thOptions = getOptions hOptions, {\r\n\t\tfileFilter: undef\r\n\t\t}\r\n\r\n\tassert (pattern != '*'), \"Can't delete files matching '*'\"\r\n\tfor {relPath} from allFilesMatching(pattern, hOptions)\r\n\t\tfs.rmSync relPath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allLinesIn = (filePath, filterFunc=undef) ->\r\n\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\tnReader = new NReadLines(filePath)\r\n\tloop\r\n\t\tbuffer = nReader.next()\r\n\t\tif (buffer == false)\r\n\t\t\treturn\r\n\t\tresult = buffer.toString().replaceAll('\\r', '')\r\n\t\tyield result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fileExt = (filePath) =>\r\n\r\n\tif lMatches = filePath.match(/\\.[^\\.]+$/)\r\n\t\treturn lMatches[0]\r\n\telse\r\n\t\treturn ''\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport withExt = (filePath, newExt) =>\r\n\r\n\tif newExt.indexOf('.') != 0\r\n\t\tnewExt = '.' + newExt\r\n\r\n\tif lMatches = filePath.match(/^(.*)\\.[^\\.]+$/)\r\n\t\t[_, pre] = lMatches\r\n\t\treturn pre + newExt\r\n\tthrow new Error(\"Bad path: '#{filePath}'\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport newerDestFileExists = (srcPath, lDestPaths...) =>\r\n\r\n\tfor destPath in lDestPaths\r\n\t\tif ! fs.existsSync(destPath)\r\n\t\t\treturn false\r\n\t\tsrcModTime = fs.statSync(srcPath).mtimeMs\r\n\t\tdestModTime = fs.statSync(destPath).mtimeMs\r\n\t\tif (destModTime < srcModTime)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport readTextFile = (filePath, hOptions={}) =>\r\n\t# --- returns {hMetaData, reader, nLines}\r\n\t#        and possibly contents\r\n\r\n\t{eager} = getOptions hOptions, {\r\n\t\teager: false\r\n\t\t}\r\n\r\n\tassert isFile(filePath), \"No such file: #{filePath}\"\r\n\tnReader = new NReadLines(filePath)\r\n\tgetLine = () =>\r\n\t\tbuffer = nReader.next()\r\n\t\tif (buffer == false)\r\n\t\t\tnReader = undef   # prevent further reads\r\n\t\t\treturn undef\r\n\t\treturn buffer.toString().replaceAll('\\r', '')\r\n\r\n\t# --- we need to get the first line to check if\r\n\t#     there's metadata. But if there is not,\r\n\t#     we need to return it by the reader\r\n\r\n\tfirstLine = getLine()\r\n\tif notdefined(firstLine)\r\n\t\treturn {\r\n\t\t\thMetaData: {}\r\n\t\t\treader: () -> return undef\r\n\t\t\tnLines: 0\r\n\t\t\t}\r\n\tlMetaLines = undef\r\n\thMetaData = {}\r\n\r\n\t# --- Get metadata if present\r\n\tif isMetaDataStart(firstLine)\r\n\t\tlMetaLines = []\r\n\t\tline = getLine()\r\n\t\twhile line && (line != firstLine)\r\n\t\t\tlMetaLines.push line\r\n\t\t\tline = getLine()\r\n\t\tblock = arrayToBlock(lMetaLines)\r\n\t\thMetaData = convertMetaData(firstLine, block)\r\n\r\n\t# --- generator that allows reading contents\r\n\treader = () ->\r\n\t\tif notdefined(lMetaLines)\r\n\t\t\tyield firstLine\r\n\t\tline = getLine()\r\n\t\twhile defined(line)\r\n\t\t\tyield line\r\n\t\t\tline = getLine()\r\n\t\treturn\r\n\r\n\t# --- number of lines in file read so far\r\n\tnLines = if defined(lMetaLines)\r\n\t\tlMetaLines.length + 2\r\n\telse\r\n\t\t0\r\n\r\n\tif eager\r\n\t\tcontents = gen2block(reader)\r\n\t\tassert defined(contents), \"readTextFile(): undef contents\"\r\n\t\treturn {\r\n\t\t\thMetaData\r\n\t\t\tcontents\r\n\t\t\tnLines\r\n\t\t\t}\r\n\telse\r\n\t\treturn {\r\n\t\t\thMetaData\r\n\t\t\treader\r\n\t\t\tnLines\r\n\t\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class TextFileWriter\r\n\r\n\tconstructor: (@filePath=undef) ->\r\n\r\n\t\tif !@filePath\r\n\t\t\t@filePath = temporaryFile()\r\n\t\t@writer = fs.createWriteStream(@filePath, {flags: 'w'})\r\n\r\n\twrite: (str) ->\r\n\r\n\t\t@writer.write str\r\n\t\treturn\r\n\r\n\twriteln: (str) ->\r\n\r\n\t\t@writer.write \"#{str}\\n\"\r\n\t\treturn\r\n\r\n\tclose: (filePath=undef) ->\r\n\r\n\t\t@writer.end(() => fs.renameSync(@filePath, filePath))\r\n\t\t@writer = undef\r\n\t\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport insertLinesAfter = (filePath, regexp, lLines) =>\r\n\r\n\tif isString(lLines)\r\n\t\tlLines = [lLines]\r\n\r\n\twritten = false\r\n\t{reader, hMetaData} = readTextFile(filePath)\r\n\twriter = new TextFileWriter()\r\n\tif defined(hMetaData)\r\n\t\twriter.writeln toTAML(hMetaData)\r\n\t\twriter.writeln('---')\r\n\tfor input from reader()\r\n\t\twriter.writeln input\r\n\t\tif !written && input.match(regexp)\r\n\t\t\tfor line in lLines\r\n\t\t\t\twriter.writeln line\r\n\t\t\twritten = true\r\n\twriter.close filePath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#    Get path to parent directory of a directory\r\n\r\nexport getParentDir = (dir) =>\r\n\r\n\thParts = pathLib.parse(dir)\r\n\tif (hParts.dir == hParts.root)\r\n\t\treturn undef\r\n\treturn mkpath(pathLib.resolve(dir, '..'))\r\n\r\n# ---------------------------------------------------------------------------\r\n#    Get all subdirectories of a directory\r\n#       don't return hidden or system subdirectories\r\n#    Return value is just a name, not full paths\r\n\r\nexport getSubDirs = (dir) =>\r\n\r\n\tassert isDir(dir), \"not a directory: #{OL(dir)}\"\r\n\r\n\tdoInclude = (d) ->\r\n\t\tif ! d.isDirectory()\r\n\t\t\treturn false\r\n\t\tdirName = d.name\r\n\t\tif dir in ['$Recycle.Bin', '$WinREAgent']\r\n\t\t\treturn false\r\n\t\tif (dirName.indexOf('.') == 0)\r\n\t\t\treturn false\r\n\t\treturn true\r\n\r\n\thOptions = {\r\n\t\twithFileTypes: true\r\n\t\trecursive: false\r\n\t\t}\r\n\treturn fs.readdirSync(dir, hOptions) \\\r\n\t\t\t.filter(doInclude) \\\r\n\t\t\t.map((d) -> d.name) \\\r\n\t\t\t.sort()\r\n\r\n# ---------------------------------------------------------------------------\r\n# searches downward. Returns a single path or undef\r\n\r\nexport pathTo = (fileName, hOptions={}) =>\r\n\r\n\t{dir} = getOptions hOptions, {\r\n\t\tdir: undef\r\n\t\t}\r\n\tif defined(dir)\r\n\t\tassert isDir(dir), \"Not a directory: #{OL(dir)}\"\r\n\telse\r\n\t\tdir = process.cwd()\r\n\r\n\t# --- first check if the file is in dir\r\n\r\n\tfilePath = mkpath(dir, fileName)\r\n\tif isFile(filePath)\r\n\t\treturn filePath\r\n\r\n\t# --- Search all directories in this directory\r\n\t#     getSubDirs() returns dirs sorted alphabetically\r\n\r\n\tfor subdir in getSubDirs(dir)\r\n\t\tfilePath = pathTo fileName, {dir: mkpath(dir, subdir)}\r\n\t\tif defined(filePath)\r\n\t\t\treturn filePath\r\n\treturn undef\r\n\r\n# ---------------------------------------------------------------------------\r\n# searches upward. Yields multiple files\r\n\r\nexport allPathsTo = (fileName, hOptions={}) ->\r\n\r\n\t{dir} = getOptions hOptions, {\r\n\t\tdir: undef\r\n\t\t}\r\n\tif defined(dir)\r\n\t\tassert isDir(dir), \"Not a directory: #{OL(dir)}\"\r\n\telse\r\n\t\tdir = process.cwd()\r\n\r\n\t# --- first check if the file is in dir\r\n\tfilePath = mkpath(dir, fileName)\r\n\tif isFile(filePath)\r\n\t\tyield filePath\r\n\r\n\twhile defined(dir = getParentDir(dir))\r\n\t\tfilePath = mkpath(dir, fileName)\r\n\t\tif isFile(filePath)\r\n\t\t\tyield filePath\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpJSON - read a file into a hash\r\n\r\nexport slurpJSON = (filePath) =>\r\n\r\n\treturn JSON.parse(slurp(filePath))\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurpPkgJSON - read './package.json' into a hash\r\n\r\nexport slurpPkgJSON = (filePath='./package.json') =>\r\n\r\n\treturn slurpJSON(filePath)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfJSON - write a string to a file\r\n\r\nexport barfJSON = (hJson, filePath) =>\r\n\r\n\tassert isHash(hJson), \"Not a hash: #{OL(hJson)}\"\r\n\tfor key in keys(hJson)\r\n\t\tif notdefined(hJson[key])\r\n\t\t\tdelete hJson[key]\r\n\tstr = JSON.stringify(hJson, null, \"\\t\")\r\n\tbarf(str, filePath)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barfPkgJSON - write package.json file\r\n\r\nlFields = words('name version type license author description',\r\n                'exports bin scripts keywords devDependencies dependencies'\r\n                )\r\n\r\nexport barfPkgJSON = (hJson, filePath='./package.json') =>\r\n\r\n\tassert isHash(hJson), \"Not a hash: #{OL(hJson)}\"\r\n\r\n\t# --- Create a new hash with keys in a particular order\r\n\thJson2 = {}\r\n\r\n\tfor key in lFields\r\n\t\tif hasKey(hJson, key)\r\n\t\t\thJson2[key] = hJson[key]\r\n\r\n\tfor key in keys(hJson)\r\n\t\tif ! hasKey(hJson2, key)\r\n\t\t\thJson2[key] = hJson[key]\r\n\r\n\tbarfJSON hJson2, filePath\r\n\treturn\r\n"
  ]
}