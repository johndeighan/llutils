{
  "version": 3,
  "file": "fs.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# fs.coffee\r\n\r\nimport pathLib from 'node:path'\r\nimport urlLib from 'url'\r\nimport fs from 'fs'\r\nimport {globSync as glob} from 'glob'\r\nimport NReadLines from 'n-readlines'\r\n\r\nimport {\r\n\tundef, defined, notdefined, words, isString, OL,\r\n\tassert, croak, arrayToBlock, getOptions,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tisMetaDataStart, convertMetaData,\r\n\t} from '@jdeighan/llutils/metadata'\r\n\r\nexport lStatFields = words(\r\n\t'dev ino mode nlink uid gid rdev size blksize blocks',\r\n\t'atimeMs mtimeMs ctimeMs birthtimeMs',\r\n\t'atime mtime ctime birthtime',\r\n\t)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isProjRoot = (dir='.', hOptions={}) =>\r\n\r\n\t{strict} = getOptions hOptions, {\r\n\t\tstrict: false\r\n\t\t}\r\n\r\n\tfilePath = \"#{dir}/package.json\"\r\n\tif !isFile(filePath)\r\n\t\treturn false\r\n\r\n\tif !strict\r\n\t\treturn true\r\n\r\n\tlExpectedFiles = [\r\n\t\t'package-lock.json'\r\n\t\t'README.md'\r\n\t\t'.gitignore'\r\n\t\t]\r\n\r\n\tfor name in lExpectedFiles\r\n\t\tfilePath = \"#{dir}/#{name}\"\r\n\t\tif !isFile(filePath)\r\n\t\t\treturn false\r\n\r\n\tlExpectedDirs = [\r\n\t\t'node_modules'\r\n\t\t'.git'\r\n\t\t'src'\r\n\t\t'src/lib'\r\n\t\t'src/bin'\r\n\t\t'test'\r\n\t\t]\r\n\tfor name in lExpectedDirs\r\n\t\tdirPath = \"#{dir}/#{name}\"\r\n\t\tif !isDir(dirPath)\r\n\t\t\treturn false\r\n\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# All file/directory operations should operate from memory\r\n#    and can therefore be synchronous\r\n# Relies on the fact that modern OS's keep directory\r\n#    information in memory\r\n# ---------------------------------------------------------------------------\r\n#     convert \\ to /\r\n# --- convert \"C:...\" to \"c:...\"\r\n\r\nexport normalize = (path) =>\r\n\r\n\tpath = path.replaceAll '\\\\', '/'\r\n\tif (path.charAt(1) == ':')\r\n\t\treturn path.charAt(0).toLowerCase() + path.substring(1)\r\n\telse\r\n\t\treturn path\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Should be called like: myself(import.meta.url)\r\n#     returns full path of current file\r\n\r\nexport myself = (url) =>\r\n\r\n\tpath = urlLib.fileURLToPath url\r\n\treturn normalize path\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkpath = (lParts...) =>\r\n\r\n\tfullPath = pathLib.resolve lParts...\r\n\treturn normalize fullPath\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport relpath = (lParts...) =>\r\n\r\n\tfullPath = pathLib.resolve lParts...\r\n\treturn normalize pathLib.relative('', fullPath)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fileDir = (filePath) =>\r\n\r\n\th = pathLib.parse(filePath)\r\n\treturn h.dir\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- returned hash has keys:\r\n#\r\n#  dev: 2114,\r\n#  ino: 48064969,\r\n#  mode: 33188,\r\n#  nlink: 1,\r\n#  uid: 85,\r\n#  gid: 100,\r\n#  rdev: 0,\r\n#  size: 527,\r\n#  blksize: 4096,\r\n#  blocks: 8,\r\n#  atimeMs: 1318289051000.1,\r\n#  mtimeMs: 1318289051000.1,\r\n#  ctimeMs: 1318289051000.1,\r\n#  birthtimeMs: 1318289051000.1,\r\n#  atime: Mon, 10 Oct 2011 23:24:11 GMT,\r\n#  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\r\n#  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\r\n#  birthtime: Mon, 10 Oct 2011 23:24:11 GMT\r\n\r\nexport getFileStats = (path) =>\r\n\r\n\treturn fs.lstatSync(path)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isDir = (dirPath) =>\r\n\r\n\tif ! fs.existsSync(dirPath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn getFileStats(dirPath).isDirectory()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport clearDir = (dirPath) =>\r\n\r\n\ttry\r\n\t\thOptions = {withFileTypes: true, recursive: true}\r\n\t\tfor ent in fs.readdirSync(dirPath, hOptions)\r\n\t\t\tif ent.isFile()\r\n\t\t\t\tfs.rmSync mkpath(ent.path, ent.name)\r\n\tcatch err\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkDir = (dirPath, hOptions={}) =>\r\n\r\n\ttry\r\n\t\tfs.mkdirSync dirPath\r\n\t\treturn true\r\n\tcatch err\r\n\t\tif (err.code == 'EEXIST')\r\n\t\t\tif hOptions.clear\r\n\t\t\t\tclearDir dirPath\r\n\t\t\treturn false\r\n\t\telse\r\n\t\t\tthrow err\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport touch = (filePath) =>\r\n\r\n\tfd = fs.openSync(filePath, 'a')\r\n\tfs.closeSync(fd)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isFile = (filePath) =>\r\n\r\n\tif ! fs.existsSync(filePath)\r\n\t\treturn false\r\n\ttry\r\n\t\treturn getFileStats(filePath).isFile()\r\n\tcatch\r\n\t\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- returns one of:\r\n#        'missing'  - does not exist\r\n#        'dir'      - is a directory\r\n#        'file'     - is a file\r\n#        'unknown'  - exists, but not a file or directory\r\n\r\nexport pathType = (fullPath) =>\r\n\r\n\tassert isString(fullPath), \"not a string\"\r\n\tif fs.existsSync fullPath\r\n\t\tif isFile fullPath\r\n\t\t\treturn 'file'\r\n\t\telse if isDir fullPath\r\n\t\t\treturn 'dir'\r\n\t\telse\r\n\t\t\treturn 'unknown'\r\n\telse\r\n\t\treturn 'missing'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parsePath = (path) =>\r\n\t# --- NOTE: path may be a file URL, e.g. import.meta.url\r\n\t#           path may be a relative path\r\n\r\n\tassert isString(path), \"path is type #{typeof path}\"\r\n\r\n\tif path.match(/^file\\:\\/\\//)\r\n\t\tpath = normalize urlLib.fileURLToPath(path)\r\n\telse\r\n\t\t# --- handles relative paths\r\n\t\tpath = normalize pathLib.resolve(path)\r\n\ttype = pathType path\r\n\r\n\t{root, dir, base, name, ext} = pathLib.parse(path)\r\n\tif lMatches = name.match(///\r\n\t\t\t\\.\r\n\t\t\t([A-Za-z_]+)\r\n\t\t\t$///)\r\n\t\tpurpose = lMatches[1]\r\n\telse\r\n\t\tpurpose = undef\r\n\thFile = {\r\n\t\tpath\r\n\t\tfilePath: path\r\n\t\ttype\r\n\t\troot\r\n\t\tdir\r\n\t\tbase\r\n\t\tfileName: base   # my preferred name\r\n\t\tname             # use this for directory name\r\n\t\tstub: name       # my preferred name\r\n\t\text\r\n\t\tpurpose\r\n\t\t}\r\n\tif isFile(path)\r\n\t\tObject.assign hFile, getFileStats(path)\r\n\treturn hFile\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parentDir = (path) =>\r\n\r\n\thParsed = parsePath(path)\r\n\treturn hParsed.dir\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport parallelPath = (path, name=\"temp\") =>\r\n\r\n\tfullPath = mkpath(path)  # make full path with '/' as separator\r\n\t{dir, fileName} = parsePath fullPath\r\n\tif (lMatches = dir.match(///^\r\n\t\t\t(.*)\r\n\t\t\t\\/         # separator\r\n\t\t\t[^\\/]+     # final dir name\r\n\t\t\t$///))\r\n\t\t[_, subpath] = lMatches\r\n\t\treturn \"#{subpath}/#{name}/#{fileName}\"\r\n\telse\r\n\t\tcroak \"Can't get parallelPath for '#{path}'\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport subPath = (path, name=\"temp\") =>\r\n\r\n\tfullPath = mkpath(path)  # make full path with '/' as separator\r\n\t{dir, fileName} = parsePath fullPath\r\n\treturn \"#{dir}/#{name}/#{fileName}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n#   slurp - read a file into a string\r\n\r\nexport slurp = (filePath, hOptions) =>\r\n\r\n\tassert isString(filePath, 'nonEmpty'), \"empty path\"\r\n\tfilePath = mkpath(filePath)\r\n\tassert isFile(filePath), \"Not a file: #{OL(filePath)}\"\r\n\tblock = fs.readFileSync(filePath, 'utf8') \\\r\n\t\t\t.toString() \\\r\n\t\t\t.replaceAll('\\r', '')\r\n\treturn block\r\n\r\n# ---------------------------------------------------------------------------\r\n#   barf - write a string to a file\r\n#          will ensure that all necessary directories exist\r\n\r\nexport barf = (text, filePath) =>\r\n\r\n\tmkDirsForFile(filePath)\r\n\tfs.writeFileSync(filePath, text)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport pathSubDirs = (filePath) =>\r\n\r\n\t{root, dir} = pathLib.parse(filePath)\r\n\treturn {\r\n\t\troot\r\n\t\tlParts: dir.slice(root.length).split(/[\\\\\\/]/)\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport mkDirsForFile = (filePath) =>\r\n\r\n\t{root, lParts} = pathSubDirs(filePath)\r\n\tdir = root\r\n\tfor part in lParts\r\n\t\tdir += \"/#{part}\"\r\n\t\tif ! isDir(dir)\r\n\t\t\tmkDir(dir)\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- yield hFile with keys:\r\n#        path, filePath\r\n#        type\r\n#        root\r\n#        dir\r\n#        base, fileName\r\n#        name, stub\r\n#        ext\r\n#        purpose\r\n#     ...plus stat fields\r\n\r\nexport globFiles = (pattern='*', hGlobOptions={}) ->\r\n\r\n\thGlobOptions = getOptions hGlobOptions, {\r\n\t\twithFileTypes: true\r\n\t\tstat: true\r\n\t\t}\r\n\r\n\tfor ent in glob(pattern, hGlobOptions)\r\n\t\tfilePath = mkpath(ent.fullpath())\r\n\t\t{root, dir, base, name, ext} = pathLib.parse(filePath)\r\n\t\tif lMatches = name.match(///\r\n\t\t\t\t\\.\r\n\t\t\t\t([A-Za-z_]+)\r\n\t\t\t\t$///)\r\n\t\t\tpurpose = lMatches[1]\r\n\t\telse\r\n\t\t\tpurpose = undef\r\n\t\tif ent.isDirectory()\r\n\t\t\ttype = 'dir'\r\n\t\telse if ent.isFile()\r\n\t\t\ttype = 'file'\r\n\t\telse\r\n\t\t\ttype = 'unknown'\r\n\t\thFile = {\r\n\t\t\tfilePath\r\n\t\t\tpath: filePath\r\n\t\t\trelPath: relpath(filePath)\r\n\t\t\ttype\r\n\t\t\troot\r\n\t\t\tdir\r\n\t\t\tbase\r\n\t\t\tfileName: base\r\n\t\t\tname\r\n\t\t\tstub: name\r\n\t\t\text\r\n\t\t\tpurpose\r\n\t\t\t}\r\n\t\tfor key in lStatFields\r\n\t\t\thFile[key] = ent[key]\r\n\t\tyield hFile\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allFilesMatching = (pattern='*', hOptions={}) ->\r\n\t# --- yields hFile with keys:\r\n\t#        path, filePath,\r\n\t#        type, root, dir, base, fileName,\r\n\t#        name, stub, ext, purpose\r\n\t#        (if eager) hMetaData, lLines\r\n\t# --- Valid options:\r\n\t#        hGlobOptions - options to pass to glob\r\n\t#        fileFilter - return path iff fileFilter(filePath) returns true\r\n\t#        eager - read the file and add keys hMetaData, lLines\r\n\t# --- Valid glob options:\r\n\t#        ignore - glob pattern for files to ignore\r\n\t#        dot - include dot files/directories (default: false)\r\n\t#        cwd - change working directory\r\n\r\n\t{hGlobOptions, fileFilter} = getOptions(hOptions, {\r\n\t\thGlobOptions: {\r\n\t\t\tignore: \"node_modules\"\r\n\t\t\t}\r\n\t\tfileFilter: (h) =>\r\n\t\t\t{filePath: path} = h\r\n\t\t\treturn isFile(path) && ! path.match(/\\bnode_modules\\b/i)\r\n\t\t})\r\n\r\n\tfor h from globFiles(pattern, hGlobOptions)\r\n\t\tif fileFilter(h)\r\n\t\t\tyield h\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport allLinesIn = (filePath, filterFunc=undef) ->\r\n\r\n\tassert isFile(filePath), \"No such file: #{OL(filePath)}\"\r\n\tnReader = new NReadLines(filePath)\r\n\tloop\r\n\t\tbuffer = nReader.next()\r\n\t\tif (buffer == false)\r\n\t\t\treturn\r\n\t\tresult = buffer.toString().replaceAll('\\r', '')\r\n\t\tyield result\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport fileExt = (filePath) =>\r\n\r\n\tif lMatches = filePath.match(/\\.[^\\.]+$/)\r\n\t\treturn lMatches[0]\r\n\telse\r\n\t\treturn ''\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport withExt = (filePath, newExt) =>\r\n\r\n\tif newExt.indexOf('.') != 0\r\n\t\tnewExt = '.' + newExt\r\n\r\n\tif lMatches = filePath.match(/^(.*)\\.[^\\.]+$/)\r\n\t\t[_, pre] = lMatches\r\n\t\treturn pre + newExt\r\n\tthrow new Error(\"Bad path: '#{filePath}'\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport newerDestFilesExist = (srcPath, lDestPaths...) =>\r\n\r\n\tfor destPath in lDestPaths\r\n\t\tif ! fs.existsSync(destPath)\r\n\t\t\treturn false\r\n\t\tsrcModTime = fs.statSync(srcPath).mtimeMs\r\n\t\tdestModTime = fs.statSync(destPath).mtimeMs\r\n\t\tif (destModTime < srcModTime)\r\n\t\t\treturn false\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport readTextFile = (filePath) =>\r\n\t# --- returns {hMetaData, reader, nLines}\r\n\r\n\tassert isFile(filePath), \"No such file: #{filePath}\"\r\n\tnReader = new NReadLines(filePath)\r\n\tgetLine = () =>\r\n\t\tbuffer = nReader.next()\r\n\t\tif (buffer == false)\r\n\t\t\tnReader = undef   # prevent further reads\r\n\t\t\treturn undef\r\n\t\treturn buffer.toString().replaceAll('\\r', '')\r\n\r\n\t# --- we need to get the first line to check if\r\n\t#     there's metadata. But if there is not,\r\n\t#     we need to return it by the reader\r\n\r\n\tfirstLine = getLine()\r\n\tif notdefined(firstLine)\r\n\t\treturn {\r\n\t\t\thMetaData: {}\r\n\t\t\treader: () -> return undef\r\n\t\t\tnLines: 0\r\n\t\t\t}\r\n\tlMetaLines = undef\r\n\thMetaData = {}\r\n\r\n\t# --- Get metadata if present\r\n\tif isMetaDataStart(firstLine)\r\n\t\tlMetaLines = []\r\n\t\tline = getLine()\r\n\t\twhile line && (line != firstLine)\r\n\t\t\tlMetaLines.push line\r\n\t\t\tline = getLine()\r\n\t\tblock = arrayToBlock(lMetaLines)\r\n\t\thMetaData = convertMetaData(firstLine, block)\r\n\r\n\treturn {\r\n\t\thMetaData\r\n\r\n\t\treader: () ->\r\n\t\t\tif notdefined(lMetaLines)\r\n\t\t\t\tyield firstLine\r\n\t\t\tline = getLine()\r\n\t\t\twhile defined(line)\r\n\t\t\t\tyield line\r\n\t\t\t\tline = getLine()\r\n\t\t\treturn\r\n\r\n\t\tnLines:\r\n\t\t\tif defined(lMetaLines)\r\n\t\t\t\tlMetaLines.length + 2\r\n\t\t\telse\r\n\t\t\t\t0\r\n\t\t}\r\n"
  ]
}