{
  "version": 3,
  "file": "rule-ex.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\rule-ex.coffee"
  ],
  "names": [],
  "mappings": "AAAgB;AAAA,IAAA;;AAEhB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,EAD7B;EACiC,MADjC;EAEC,QAFD;EAEW,SAFX;EAEsB,OAFtB;EAGC,MAHD;EAGS,KAHT;CAAA,MAAA;;AAKA,OAAA;EAAQ,QAAR;CAAA,MAAA;;AAEA,SAAA,GAAY;;AAMZ,OAAA,IAAa;;;;EAAN,MAAA,OAAA;IAGQ,OAAb,WAAa,CAAA,CAAA;MACb,MAAC,CAAA,MAAD,GAAU;IADG;;IAGF,OAAX,SAAW,CAAA,CAAA;AACb,UAAA;MAAE,EAAA,GAAK,MAAC,CAAA;MACN,MAAC,CAAA,MAAD,IAAW;AACX,aAAO;IAHI;;IAMN,OAAL,GAAK,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,CAAA;AACP,UAAA;MAAE,GAAA,GAAM,MAAC,CAAA,EAAE,CAAC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,CAAR;MACN,IAAG,OAAA,CAAQ,GAAR,CAAH;AACC,eAAO,IADR;OAAA,MAAA;QAGC,GAAA,GAAM,IAAI,MAAJ,CAAW,KAAX,EAAkB,GAAlB,EAAuB,GAAvB;QACN,MAAC,CAAA,EAAE,CAAC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,CAAR,EAA2B,GAA3B;AACA,eAAO,IALR;;IAFK;;IASN,WAAa,OAAA,MAAA,SAAoB,CAApB,CAAA;MAAC,IAAC,CAAA;MAAO,IAAC,CAAA;MAAK,IAAC,CAAA;MAE5B,IAAC,CAAA,EAAD,GAAM,MAAM,CAAC,SAAP,CAAA;MAEN,SAAA,CAAU,IAAC,CAAA,KAAX,EAAkB,IAAC,CAAA,EAAnB,EAFF;;MAKE,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,KAAK,CAAC;MACf,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,KAAK,CAAC;MACf,IAAC,CAAA,MAAD,GAAU,IAAC,CAAA,KAAK,CAAC;MAEjB,MAAA,CAAO,SAAA,CAAU,IAAC,CAAA,GAAX,CAAP,EAAwB,CAAA,YAAA,CAAA,CAAe,EAAA,CAAG,IAAC,CAAA,GAAJ,CAAf,CAAA,CAAxB;MACA,IAAC,CAAA,MAAD,GAAU,IAAC,CAAA,MAAM,CAAC;IAZN;;IAcb,QAAU,CAAA,CAAA;AAET,aAAO,IAAC,CAAA,MAAM,CAAC,IAAC,CAAA,GAAF;IAFL;;IAIV,MAAQ,CAAA,CAAA;MAEP,MAAA,CAAQ,IAAC,CAAA,GAAD,GAAK,CAAL,IAAU,IAAC,CAAA,MAAnB,EAA4B,CAAA,UAAA,CAAA,CAAa,IAAb,CAAA,CAA5B;AACA,aAAO,MAAM,CAAC,GAAP,CAAW,IAAC,CAAA,KAAZ,EAAmB,IAAC,CAAA,GAApB,EAAyB,IAAC,CAAA,GAAD,GAAK,CAA9B;IAHA;;IAKR,QAAU,CAAA,CAAA;AAET,aAAO,CAAA,CAAA,CAAA,CAAI,IAAC,CAAA,EAAL,CAAA,EAAA,CAAA,CAAY,YAAA,CAAa,IAAC,CAAA,KAAd,EAAqB,IAAC,CAAA,GAAtB,CAAZ,CAAA;IAFE;;EA5CJ;;EAEN,MAAC,CAAA,MAAD,GAAS;;EAST,MAAC,CAAA,EAAD,GAAK,IAAI,QAAJ,CAAa,CAAb;;;;cA1BU;;;AAiEhB,OAAA,IAAO,QAAA,GAAW,QAAA,CAAC,KAAD,CAAA;EAEjB,MAAA,CAAO,CACN,QAAA,CAAS,KAAT,CADM,EAEL,KAAK,CAAC,MAAN,KAAgB,CAFX,CAAP,EAGI,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,KAAH,CAAjB,CAAA,CAHJ;AAIA,SAAO;IACN,IAAA,EAAM,UADA;IAEN;EAFM;AANU,EAjEF;;;AA8EhB,OAAA,IAAO,WAAA,GAAc,QAAA,CAAC,IAAD,CAAA;EAEpB,MAAA,CAAO,QAAA,CAAS,IAAT,CAAP,EAAuB,CAAA,iBAAA,CAAA,CAAoB,EAAA,CAAG,IAAH,CAApB,CAAA,CAAvB;AACA,SAAO;IACN,IAAA,EAAM,aADA;IAEN,KAAA,EAAO;EAFD;AAHa,EA9EL;;;AAwFhB,OAAA,IAAO,SAAA,GAAY,QAAA,CAAC,KAAD,EAAQ,KAAG,CAAX,CAAA;EAElB,MAAA,CAAO,CACL,KAAK,CAAC,IAAN,KAAc,MADT,EAEN,MAAA,CAAO,KAAP,EAAc,MAAd,CAFM,EAGN,QAAA,CAAS,KAAK,CAAC,IAAf,CAHM,EAIN,CAAC,KAAK,CAAC,IAAN,KAAc,GAAf,CAAA,IAAuB,CAAC,EAAA,KAAM,CAAP,CAJjB,EAKN,MAAA,CAAO,KAAP,EAAc,QAAd,CALM,EAMN,OAAA,CAAQ,KAAK,CAAC,MAAd,CANM,CAAP,EAOI,CAAA,UAAA,CAAA,CAAa,EAAA,CAAG,KAAH,CAAb,CAAA,CAPJ;AAFkB,EAxFH;;;AAsGhB,OAAA,IAAO,YAAA,GAAe,QAAA,CAAC,KAAD,EAAQ,MAAI,KAAZ,CAAA;AAEtB,MAAA,IAAA,EAAA;EAAC,IAAA,GAAO,KAAK,CAAC,MAAM,CAAC,GAAb,CACN,CAAC,KAAD,CAAA,GAAA;AACC,YAAO,KAAK,CAAC,IAAb;AAAA,WACM,UADN;AAEE,eAAO,CAAA,EAAA,CAAA,CAAK,KAAK,CAAC,KAAX,CAAA,EAAA;AAFT,WAGM,aAHN;AAIE,eAAO,CAAA,CAAA,CAAG,KAAK,CAAC,KAAT,CAAA;AAJT;EADD,CADM;EAQP,IAAG,OAAA,CAAQ,GAAR,CAAH;IACC,IAAI,CAAC,MAAL,CAAY,GAAZ,EAAiB,CAAjB,EAAoB,SAApB,EADD;;EAEA,GAAA,GAAM,IAAI,CAAC,IAAL,CAAU,GAAV;AACN,SAAO,CAAA,CAAA,CAAG,KAAK,CAAC,IAAT,CAAA,IAAA,CAAA,CAAoB,GAApB,CAAA;AAbc",
  "sourcesContent": [
    "# rule-ex.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, OL, hasKey,\r\n\tisString, isInteger, isArray,\r\n\tassert, croak,\r\n\t} from '@jdeighan/llutils'\r\nimport {MultiMap} from '@jdeighan/llutils/multi-map'\r\n\r\nraisedDot = 'â€¢'\r\n\r\n# ---------------------------------------------------------------------------\r\n#     class RuleEx\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class RuleEx\r\n\r\n\t@nextID: 0\r\n\t@resetNextID: () =>\r\n\t\t@nextID = 0\r\n\t\treturn\r\n\t@getNextID: () =>\r\n\t\tid = @nextID\r\n\t\t@nextID += 1\r\n\t\treturn id\r\n\r\n\t@mm: new MultiMap(3)\r\n\t@get: (hRule, src, pos) =>\r\n\t\tobj = @mm.get([hRule, src, pos])\r\n\t\tif defined(obj)\r\n\t\t\treturn obj\r\n\t\telse\r\n\t\t\tobj = new RuleEx(hRule, src, pos)\r\n\t\t\t@mm.set [hRule, src, pos], obj\r\n\t\t\treturn obj\r\n\r\n\tconstructor: (@hRule, @src, @pos=0) ->\r\n\r\n\t\t@id = RuleEx.getNextID()\r\n\r\n\t\tcheckRule(@hRule, @id)\r\n\r\n\t\t# --- Copy fields from hRule to this object\r\n\t\t@type = @hRule.type\r\n\t\t@head = @hRule.head\r\n\t\t@lParts = @hRule.lParts\r\n\r\n\t\tassert isInteger(@src), \"Not an int: #{OL(@src)}\"\r\n\t\t@maxpos = @lParts.length\r\n\r\n\tnextPart: () ->\r\n\r\n\t\treturn @lParts[@pos]\r\n\r\n\tgetInc: () ->\r\n\r\n\t\tassert (@pos+1 <= @maxpos), \"Can't inc #{this}\"\r\n\t\treturn RuleEx.get(@hRule, @src, @pos+1)\r\n\r\n\tasString: () ->\r\n\r\n\t\treturn \"[#{@id}] #{ruleAsString(@hRule, @pos)}\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport terminal = (value) ->\r\n\r\n\tassert [\r\n\t\tisString(value),\r\n\t\t(value.length == 1),\r\n\t\t], \"Bad terminal: #{OL(value)}\"\r\n\treturn {\r\n\t\ttype: 'terminal'\r\n\t\tvalue\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport nonterminal = (name) ->\r\n\r\n\tassert isString(name), \"bad nonterminal: #{OL(name)}\"\r\n\treturn {\r\n\t\ttype: 'nonterminal'\r\n\t\tvalue: name\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport checkRule = (hRule, id=1) ->\r\n\r\n\tassert [\r\n\t\t(hRule.type == \"rule\"),\r\n\t\thasKey(hRule, 'head'),\r\n\t\tisString(hRule.head),\r\n\t\t(hRule.head != 'Î¦') || (id == 0),\r\n\t\thasKey(hRule, 'lParts'),\r\n\t\tisArray(hRule.lParts),\r\n\t\t], \"Bad rule: #{OL(hRule)}\"\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport ruleAsString = (hRule, pos=undef) ->\r\n\r\n\tlRHS = hRule.lParts.map(\r\n\t\t(hPart) =>\r\n\t\t\tswitch hPart.type\r\n\t\t\t\twhen \"terminal\"\r\n\t\t\t\t\treturn \"\\\"#{hPart.value}\\\"\"\r\n\t\t\t\twhen \"nonterminal\"\r\n\t\t\t\t\treturn \"#{hPart.value}\"\r\n\t\t)\r\n\tif defined(pos)\r\n\t\tlRHS.splice pos, 0, raisedDot\r\n\trhs = lRHS.join(\" \")\r\n\treturn \"#{hRule.head} -> #{rhs}\"\r\n"
  ]
}