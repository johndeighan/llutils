{
  "version": 3,
  "file": "elm-doc.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\elm-doc.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# elm-doc.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, assert, croak,\r\n\thasKey, keys,\r\n\tisTAML, fromTAML, OL, isEmpty, nonEmpty,\r\n\tisString, isHash, isArray, escapeStr,\r\n\t} from '@jdeighan/llutils'\r\nimport {SectionMap} from '@jdeighan/llutils/section-map'\r\n\r\n# ---------------------------------------------------------------------------\r\n#\r\n# An Elm AST has the following types:\r\n#    module\r\n#       name\r\n#       lFuncDefs\r\n#    funcDef\r\n#       name\r\n#       lParms    - an array of identifiers\r\n#       lStmts\r\n#    funcApply\r\n#       name\r\n#       lArgs\r\n#    const\r\n#       value\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class ElmDocument extends SectionMap\r\n\r\n\tconstructor: (@outfile=undef) ->\r\n\r\n\t\tsuper ['header', 'imports', 'code']\r\n\r\n\t\t@hImports = {}  # --- symbols that must be imported\r\n\r\n\t\t@section('imports').converter = (block) =>\r\n\t\t\treturn @importStr()\r\n\r\n\t\t@section('imports').add 'imports' # --- shouldn't be needed\r\n\r\n\t\t@hDefinedFuncs = {}  # --- {<name>: <arity>, ... }\r\n\r\n\t# ..........................................................\r\n\r\n\taddImport: (name, lArgs) ->\r\n\r\n\t\tassert defined(hSymbols[name]), \"Unknown symbol: #{OL(name)}\"\r\n\t\t{lib, lTypes} = hSymbols[name]\r\n\t\tnumArgs = lTypes.length\r\n\t\tassert (lArgs.length == lTypes.length),\r\n\t\t\t\t\"arity mismatch in #{OL(name)}\"\r\n\r\n\t\tif hasKey(@hImports, lib)\r\n\t\t\tlSymbols = @hImports[lib]\r\n\t\t\tif !lSymbols.includes(name)\r\n\t\t\t\tlSymbols.push name\r\n\t\telse\r\n\t\t\t@hImports[lib] = [name]\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tgetStmt: (hStmt) ->\r\n\r\n\t\tassert isHash(hStmt), \"stmt not a hash: #{OL(hStmt)}\"\r\n\t\tswitch hStmt.type\r\n\r\n\t\t\twhen 'funcApply'\r\n\t\t\t\t{name, lArgs} = hStmt\r\n\t\t\t\tif isString(lArgs)\r\n\t\t\t\t\tlArgs = [lArgs]\r\n\r\n\t\t\t\t# --- Add import, if needed\r\n\t\t\t\t@addImport name, lArgs\r\n\r\n\t\t\t\tlParts = [name]\r\n\t\t\t\tfor arg in lArgs\r\n\t\t\t\t\tif isString(arg)\r\n\t\t\t\t\t\tstr = escapeStr arg, {hEsc: {\r\n\t\t\t\t\t\t\t\"\\r\": '\\\\r'\r\n\t\t\t\t\t\t\t\"\\n\": '\\\\n'\r\n\t\t\t\t\t\t\t\"\\t\": '\\\\t'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tlParts.push \"\\\"#{str}\\\"\"\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcroak \"Not implemented\"\r\n\t\t\t\treturn lParts.join ' '\r\n\r\n\t\t\twhen 'const'\r\n\t\t\t\t{value} = hStmt\r\n\t\t\t\treturn OL(value)\r\n\r\n\t\t\telse\r\n\t\t\t\tcroak \"Not a stmt: #{OL(hStmt)}\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddFuncDef: (hAST, level) ->\r\n\r\n\t\tassert isHash(hAST), \"Not a hash: #{OL(hAST)}\"\r\n\t\tassert (hAST.type == 'funcDef'), \"Not a function def\"\r\n\t\t{name, lParms, lStmts} = hAST\r\n\t\tassert nonEmpty(name), \"Empty name: #{OL(name)}\"\r\n\t\tassert !hasKey(@hDefinedFuncs, name),\r\n\t\t\t\t\"Function #{OL(name)} is already defined\"\r\n\t\t@hDefinedFuncs[name] = lParms.length\r\n\r\n\t\t@section('code').add level, \"#{name} =\"\r\n\t\tfor hStmt in lStmts\r\n\t\t\t@section('code').add level+1, @getStmt(hStmt)\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\taddModule: (hAST) ->\r\n\r\n\t\tif isTAML(hAST)\r\n\t\t\thAST = fromTAML(hAST)\r\n\t\tassert isHash(hAST), \"Not a hash: #{OL(hAST)}\"\r\n\t\tassert (hAST.type == 'module'), \"Not a module\"\r\n\t\t{name, lFuncDefs} = hAST\r\n\t\tassert nonEmpty(name), \"Empty module name: #{OL(name)}\"\r\n\t\t@section('header').add \"module #{name} exposing(main)\\n\"\r\n\r\n\t\tfor hDef in lFuncDefs\r\n\t\t\t@addFuncDef hDef, 0\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\timportStr: () ->\r\n\r\n\t\tlLines = []\r\n\t\tfor lib in keys(@hImports)\r\n\t\t\tlSymbols = @hImports[lib]\r\n\t\t\tstr = lSymbols.join ','\r\n\t\t\tlLines.push \"import #{lib} exposing(#{str})\"\r\n\t\treturn lLines.join(\"\\n\") + \"\\n\"\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nhTypes = {\r\n\tattr:  'Element.Attribute'\r\n\tlAttr: 'list Element.Attribute'\r\n\tlElem: 'list Element.Element'\r\n\t}\r\n\r\nmapType = (str) =>\r\n\tif defined(hTypes[str])\r\n\t\treturn hTypes[str]\r\n\telse\r\n\t\treturn str\r\n\r\nhKnownSymbols = {\r\n\tElement: [\r\n\t\t['layout',      ['lAttr', 'lElem']]\r\n\t\t['text',        ['String']]\r\n\t\t['row',         []]\r\n\t\t['width',       ['Int']]\r\n\t\t['centerX',     []]\r\n\t\t['centerY',     []]\r\n\t\t['spacing',     ['Int']]\r\n\t\t['padding',     ['Int']]\r\n\t\t['el',          ['lAttr']]\r\n\t\t['rgb255',      ['Int','Int','Int']]\r\n\t\t['alignRight',  []]\r\n\t\t['alignLeft',   []]\r\n\t\t['alignCenter', []]\r\n\t\t]\r\n\t}\r\n\r\nhSymbols = {}\r\nfor lib in keys(hKnownSymbols)\r\n\tfor [name, lTypes] in hKnownSymbols[lib]\r\n\t\thSymbols[name] = {\r\n\t\t\tlib\r\n\t\t\tlTypes: lTypes.map mapType\r\n\t\t\t}\r\n"
  ]
}