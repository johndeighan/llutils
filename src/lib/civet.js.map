{
  "version": 3,
  "file": "civet.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\civet.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# civet.coffee\r\n\r\nimport {findConfig, loadConfig} from \"@danielx/civet/config\"\r\nimport {parse, compile} from \"@danielx/civet\"\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, OL, ML, LOG,\r\n\tassert, croak, isString, isEmpty, nonEmpty,\r\n\t} from '@jdeighan/llutils'\r\nimport {checkJS, execJS} from '@jdeighan/llutils/exec-utils'\r\nimport {cieloPreProcess} from '@jdeighan/llutils/cielo'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC!\r\n\r\nexport procCivet = (contents, hMetaData={}, filePath=undef, hOptions={}) ->\r\n\r\n\tassert isString(contents), \"Not a string: #{OL(contents)}\"\r\n\tassert nonEmpty(contents), \"Empty contents: #{OL(contents)}\"\r\n\t{debug, preprocess, strict} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\tpreprocess: cieloPreProcess\r\n\t\tstrict: true\r\n\t\t}\r\n\r\n\tif defined(preprocess)\r\n\t\tcode = preprocess contents, {hOptions..., hMetaData...}, filePath\r\n\telse\r\n\t\tcode = contents\r\n\tif strict\r\n\t\tcode = \"'use strict'\\n#{code}\"\r\n\tconfigPath = await findConfig(process.cwd())\r\n\thConfig = await loadConfig(configPath)\r\n\tjsCode = await compile code, {hConfig..., js: true}\r\n\treturn jsCode\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- ASYNC!\r\n\r\ncroakJS = (code, err, id) =>\r\n\tcroak \"procCivet() failed #{id}:\\n#{ML(code)}\\n(#{err.message})\"\r\n\r\nexport execCivet = (code, hMetaData={}, filePath=undef, hOptions={}) ->\r\n\r\n\tdebugger\r\n\t{debug} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\t}\r\n\r\n\ttry\r\n\t\tjsCode = await procCivet(code, hMetaData, filePath)\r\n\tcatch err\r\n\t\tcroakJS code, err, 1\r\n\r\n\tif debug\r\n\t\tLOG \"JS Code\"\r\n\t\tLOG ML(jsCode)\r\n\r\n\tif (jsCode == 'invalid(javascript)')\r\n\t\tcroakJS code, err, 2\r\n\telse if ! checkJS(jsCode)\r\n\t\tcroakJS code, err, 3\r\n\r\n\ttry\r\n\t\tresult = execJS(jsCode)\r\n\t\tif debug\r\n\t\t\tLOG \"RESULT: #{OL(result)}\"\r\n\t\treturn result\r\n\tcatch err\r\n\t\tcroakJS code, err, 4\r\n"
  ]
}