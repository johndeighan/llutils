{
  "version": 3,
  "file": "file-processor.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\file-processor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# file-processor.coffee\r\n\r\nimport {compile as compileCoffee} from 'coffeescript'\r\nimport {compile as compileSvelte} from 'svelte/compiler'\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, OL, LOG,\r\n\tisString, isFunction, isArray, isHash,\r\n\tassert, croak, keys, hasKey, nonEmpty, gen2block,\r\n\t} from '@jdeighan/llutils'\r\nimport {splitLine, indented} from '@jdeighan/llutils/indent'\r\nimport {\r\n\tisProjRoot, isFile, allFiles, barf, slurp,\r\n\tfileExt, withExt, mkpath, relpath,\r\n\tallFilesMatching, readTextFile, newerDestFileExists,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {LineFetcher} from '@jdeighan/llutils/fetcher'\r\nimport {replaceHereDocs} from '@jdeighan/llutils/heredoc'\r\nimport {hConfig} from '@jdeighan/llutils/config'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- processes all files with file ext in hConfig\r\n#     unprocessed, but matching files are\r\n#        checked for files they use\r\n\r\nexport procFiles = (pattern=\"./{*.*,**/*.*}\", hOptions={}) =>\r\n\r\n\t{debug, force} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\tforce: false\r\n\t\t}\r\n\tif hConfig.force\r\n\t\tforce = true\r\n\r\n\t# --- accumulate over all files\r\n\tlProcessed = []\r\n\thUses = {}        # --- { <file>: [<used file>, ...], ...}\r\n\r\n\t# --- set in filter (filter needs meta data, so save results)\r\n\thMetaData = undef   # --- set for all matching files\r\n\tcontents = undef    #     set only for files that are processed\r\n\r\n\t# --- fileFilter is called for every matching file, changed or not\r\n\t#     we need to check meta data for every matching file\r\n\t#     so, we update lProcessed and hUses here\r\n\r\n\tfileFilter = ({filePath}) =>\r\n\r\n\t\text = fileExt filePath\r\n\r\n\t\t# --- If we're not processing file, simply return false\r\n\t\tif !hasKey(hConfig, ext)\r\n\t\t\treturn false\r\n\t\tif force\r\n\t\t\treturn true\r\n\t\toutExt = hConfig[ext].outExt\r\n\t\tdestFile = withExt(filePath, outExt)\r\n\t\treturn ! newerDestFileExists(filePath, destFile)\r\n\r\n\tfor {relPath} from allFilesMatching(pattern, {fileFilter})\r\n\t\t{processed, lUses} = procOneFile relPath, hOptions\r\n\t\tlProcessed.push relPath\r\n\t\tif nonEmpty(lUses)\r\n\t\t\thUses[relPath] = lUses\r\n\r\n\treturn {\r\n\t\tlProcessed\r\n\t\thUses\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- func must have the following signature:\r\n#        params: (code, hMetaData, filePath)\r\n#        return value:\r\n#           either a string (e.g. code)\r\n#           or a hash with keys:\r\n#              code\r\n#              sourceMap (optional)\r\n#              lUses - an array, possibly empty\r\n# ---------------------------------------------------------------------------\r\n\r\nexport procOneFile = (filePath, hOptions={}) =>\r\n\r\n\text = fileExt filePath\r\n\t[func, outExt] = extractConfig(hConfig, ext)\r\n\tif !defined(func, outExt)\r\n\t\treturn {\r\n\t\t\tprocessed: false\r\n\t\t\tlUses: []\r\n\t\t\t}\r\n\r\n\tassert isFunction(func), \"Bad config: #{OL(hConfig)}\"\r\n\tassert isString(outExt) && outExt.startsWith('.'),\r\n\t\t\t\"Bad config: #{OL(hConfig)}\"\r\n\r\n\t{debug, logOnly, echo} = getOptions hOptions, {\r\n\t\tdebug: false\r\n\t\tlogOnly: false\r\n\t\techo: true\r\n\t\t}\r\n\r\n\trelPath = relpath filePath\r\n\tif echo || logOnly\r\n\t\tLOG relPath\r\n\tif logOnly\r\n\t\treturn {\r\n\t\t\tprocessed: false\r\n\t\t\tlUses: []\r\n\t\t\t}\r\n\r\n\t# --- get file contents, including meta data\r\n\t{hMetaData, contents} = readTextFile(filePath, 'eager')\r\n\tassert isString(contents), \"contents not a string: #{OL(contents)}\"\r\n\tassert nonEmpty(contents), \"empty contents: #{OL(contents)}\"\r\n\r\n\tlUses = []\r\n\tsourceMap = undef\r\n\r\n\thResult = func contents, hMetaData, relPath, hOptions\r\n\tassert isHash(hResult), \"result not a hash: #{OL(hResult)}\"\r\n\t{code, sourceMap, hOtherFiles, lUses} = hResult\r\n\r\n\t# --- Write out main output file\r\n\tassert isString(code), \"code not a string: #{OL(code)}\"\r\n\tassert nonEmpty(code), \"empty code: #{OL(code)}\"\r\n\tbarf code, withExt(relPath, outExt)\r\n\r\n\t# --- Write out final source map\r\n\tif defined(sourceMap)\r\n\t\tbarf sourceMap, withExt(relPath, \"#{outExt}.map\")\r\n\r\n\t# --- Write out other files\r\n\tif defined(hOtherFiles)\r\n\t\tfor ext in keys(hOtherFiles)\r\n\t\t\tbarf hOtherFiles[ext], withExt(relPath, ext)\r\n\r\n\treturn {\r\n\t\tprocessed: true\r\n\t\tlUses\r\n\t\t}\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport extractConfig = (hConfig, ext) ->\r\n\r\n\th = hConfig[ext]\r\n\tif defined(h) && isHash(h)\r\n\t\treturn [h.func, h.outExt]\r\n\telse\r\n\t\treturn [undef, undef]\r\n\r\n# ---------------------------------------------------------------------------\r\n"
  ]
}