{
  "version": 3,
  "file": "file-processor.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\file-processor.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# file-processor.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions, OL,\r\n\tisString, isFunction, isArray, isHash,\r\n\tassert,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\tisProjRoot, isFile, barf, slurp,\r\n\tfileExt, withExt, mkpath,\r\n\tallFilesMatching, readTextFile, newerDestFileExists,\r\n\t} from '@jdeighan/llutils/fs'\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- func must have the following signature:\r\n#        params: (code, hMetaData)\r\n#        return value:\r\n#           either a string (e.g. code)\r\n#           or a hash with keys:\r\n#              code\r\n#              sourceMap (optional)\r\n\r\nexport procFiles = (pattern, outExt, lFuncs, hOptions={}) =>\r\n\r\n\t# --- A file is out of date unless a file exists\r\n\t#        with outExt extension\r\n\t#        that's newer than the original file\r\n\t# --- But ignore files inside node_modules\r\n\r\n\tif isArray(lFuncs)\r\n\t\tfor f in lFuncs\r\n\t\t\tassert isFunction(f), \"not a function: #{OL(f)}\"\r\n\telse\r\n\t\tassert isFunction(lFuncs), \"not a function: #{OL(lFuncs)}\"\r\n\t\tlFuncs = [lFuncs]\r\n\r\n\tassert outExt.startsWith('.'), \"Bad out ext: #{OL(outExt)}\"\r\n\r\n\t{force, debug, logOnly, echo} = getOptions hOptions, {\r\n\t\tforce: false\r\n\t\tdebug: false\r\n\t\tlogOnly: false\r\n\t\techo: true\r\n\t\t}\r\n\r\n\tfileFilter = ({filePath}) =>\r\n\t\tif filePath.match(/\\bnode_modules\\b/i)\r\n\t\t\treturn false\r\n\t\tif force\r\n\t\t\treturn true\r\n\t\tdestFile = withExt(filePath, outExt)\r\n\t\treturn ! newerDestFileExists(filePath, destFile)\r\n\r\n\tnumFilesProcessed = 0\r\n\tfor {relPath} from allFilesMatching(pattern, {fileFilter})\r\n\t\tif echo || logOnly\r\n\t\t\tconsole.log relPath\r\n\t\tif logOnly\r\n\t\t\tcontinue\r\n\r\n\t\t{hMetaData, contents} = readTextFile(relPath, 'eager')\r\n\t\tassert defined(contents), \"procFiles(): undef contents\"\r\n\t\tif debug\r\n\t\t\thMetaData.debug = true\r\n\r\n\t\tlSourceMaps = []\r\n\t\tfor func in lFuncs\r\n\t\t\tresult = func contents, hMetaData\r\n\t\t\tif isString(result)\r\n\t\t\t\tcontents = result\r\n\t\t\t\tlSourceMaps = undef\r\n\t\t\telse\r\n\t\t\t\tassert isHash(result), \"result not a string or hash: #{OL(result)}\"\r\n\t\t\t\t{code, sourceMap} = result\r\n\t\t\t\tassert isString(code), \"code not a string: #{OL(code)}\"\r\n\t\t\t\tcontents = code\r\n\t\t\t\tif defined(lSourceMaps) && defined(sourceMap)\r\n\t\t\t\t\tlSourceMaps.push sourceMap\r\n\t\t\t\telse\r\n\t\t\t\t\tlSourceMaps = undef\r\n\r\n\t\tbarf contents, withExt(relPath, outExt)\r\n\t\tif defined(lSourceMaps) && (lSourceMaps.length == 1)\r\n\t\t\tbarf lSourceMaps[0], withExt(relPath, \"#{outExt}.map\")\r\n\t\tnumFilesProcessed += 1\r\n\treturn numFilesProcessed\r\n"
  ]
}