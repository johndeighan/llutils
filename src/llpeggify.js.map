{
  "version": 3,
  "file": "llpeggify.js",
  "sourceRoot": "..\\",
  "sources": [
    "src\\llpeggify.coffee"
  ],
  "names": [],
  "mappings": "AAIoD;;;;;AAAA,IAAA,GAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;;AAEpD,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,OAD7B;EACsC,IADtC;CAAA,MAAA;;AAGA,OAAA;EACC,OADD;EACU,gBADV;EAC4B,mBAD5B;EACiD,YADjD;CAAA,MAAA;;AAGA,OAAA;EAAQ,OAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,aAAR;CAAA,MAAA,0BAToD;;;AAapD,UAAA,GAAa,CAAC,CAAC,QAAD,CAAD,CAAA,GAAA;AAEb,MAAA;EAAC,QAAA,GAAW,OAAA,CAAQ,QAAR,EAAkB,KAAlB;AACX,SAAO,CAAE,mBAAA,CAAoB,QAApB,EAA8B,QAA9B;AAHG,EAbuC;;;;;;;AAwBpD,MAAA,GAAS,CAAA,EAxB2C;;AAyBpD;;AACA,GAAA,GAAM,IAAI,OAAJ,CAAA;;AACN;AAAA,KAAA,QAAA;GAAI,CAAC,OAAD;EACH,CAAA,CAAC,SAAD,CAAA,GAAc,YAAA,CAAa,OAAb,CAAd;EACA,IAAG,OAAA,CAAQ,SAAR,CAAA,IAAsB,OAAA,CAAQ,OAAA,GAAU,SAAS,CAAC,OAA5B,CAAzB;;IAEC,GAAG,CAAC,GAAJ,CAAQ,OAAR,EAAiB,OAAjB,EAFD;;AAFD;;AAMA,MAAA,GAAS,GAAG,CAAC,aAAJ,CAAA;;AACT,OAAO,CAAC,GAAR,CAAY,MAAZ;;AAEA,KAAA,wCAAA;;EACC,OAAO,CAAC,GAAR,CAAY,OAAZ;EACA,aAAA,CAAc,OAAd;AAFD",
  "sourcesContent": [
    "# llpeggify.coffee\r\n#\r\n# --- Part of build process, can't use getArgs()\r\n#     Processes all *.peggy files where there\r\n#        isn't a corresponding more recent *.js file\r\n\r\nimport {\r\n\tundef, defined, notdefined, isEmpty, keys,\r\n\t} from '@jdeighan/llutils'\r\nimport {\r\n\twithExt, allFilesMatching, newerDestFileExists, readTextFile,\r\n\t} from '@jdeighan/llutils/fs'\r\nimport {DiGraph} from '@jdeighan/llutils/digraph'\r\nimport {procPeggyFile} from '@jdeighan/llutils/peggy'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nfileFilter = ({filePath}) =>\r\n\r\n\tdestFile = withExt(filePath, '.js')\r\n\treturn ! newerDestFileExists(filePath, destFile)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n# --- 1. hash of files to be rebuilt, where\r\n#        the associated value is a list of other files\r\n#        that the file depends on\r\n\r\nhFiles = {}      # --- { <file>: [<dependency>, ... ], ... }\r\ndebugger\r\ndep = new DiGraph()\r\nfor {relPath} from allFilesMatching(\"**/*.peggy\", {fileFilter})\r\n\t{hMetaData} = readTextFile(relPath)\r\n\tif defined(hMetaData) && defined(include = hMetaData.include)\r\n\t\t# --- NOTE: include may be a string or an array\r\n\t\tdep.add relPath, include\r\n\r\nlFiles = dep.getBuildOrder()\r\nconsole.log lFiles\r\n\r\nfor relPath in lFiles\r\n\tconsole.log relPath\r\n\tprocPeggyFile relPath\r\n"
  ]
}