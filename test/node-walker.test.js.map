{
  "version": 3,
  "file": "node-walker.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\node-walker.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# node-walker.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, hasKey, dclone,\r\n\tassert, words\r\n\t} from '@jdeighan/llutils'\r\nimport {hSampleAST} from './node-walker/SampleAST.js'\r\n\r\nimport * as lib from '@jdeighan/llutils/node-walker'\r\nObject.assign(global, lib)\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- A counter walks an AST and\r\n#     counts the number of nodes of each type\r\n\r\nclass Counter extends NodeWalker\r\n\tinit: () ->\r\n\t\t@hCounts = {}\r\n\r\n\tvisit: (hNode, level) ->\r\n\t\t{type} = hNode\r\n\t\tif hasKey(hNode, type)\r\n\t\t\t@hCounts[type] += 1\r\n\t\telse\r\n\t\t\t@hCounts[type] = 1\r\n\r\n\tget: () =>\r\n\t\treturn @hCounts\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\tcounter = new Counter()\r\n\tcounter.walk(hSampleAST)\r\n\r\n\tequal counter.get(), {\r\n\t\tFile: 1\r\n\t\tProgram: 1\r\n\t\tExpressionStatement: 1\r\n\t\tAssignmentExpression: 1\r\n\t\tNumericLiteral: 1\r\n\t\tIdentifier: 1\r\n\t\t}\r\n\t)()\r\n\r\n(() =>\r\n\tcounter = new Counter()\r\n\tcounter.walk({\r\n\t\ttype: 'File'\r\n\t\tprogram: {\r\n\t\t\ttype: 'Program'\r\n\t\t\tbody: [\r\n\t\t\t\t{type: 'ExpressionStatement'}\r\n\t\t\t\t{type: 'AssignmentStatement'}\r\n\t\t\t\t{type: 'ForStatement'}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t})\r\n\r\n\tequal counter.get(), {\r\n\t\tFile: 1\r\n\t\tProgram: 1\r\n\t\tExpressionStatement: 1\r\n\t\tAssignmentStatement: 1\r\n\t\tForStatement: 1\r\n\t\t}\r\n\r\n)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Change type of selected nodes in place\r\n\r\n(() =>\r\n\tlLiterals = ['NumericLiteral', 'StringLiteral']\r\n\r\n\tclass Patcher extends NodeWalker\r\n\r\n\t\tvisit: (hNode) ->\r\n\t\t\tif lLiterals.includes(hNode.type)\r\n\t\t\t\thNode.type = 'Literal'\r\n\r\n\thAST = {\r\n\t\ttype: \"File\"\r\n\t\tprogram: {\r\n\t\t\ttype: \"Program\"\r\n\t\t\tbody: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: \"ExpressionStatement\"\r\n\t\t\t\t\texpression: {\r\n\t\t\t\t\t\ttype: \"AssignmentExpression\"\r\n\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\ttype: \"NumericLiteral\"\r\n\t\t\t\t\t\t\tvalue: 42\r\n\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\ttype: \"Identifier\"\r\n\t\t\t\t\t\t\tname: \"x\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: \"ExpressionStatement\"\r\n\t\t\t\t\texpression: {\r\n\t\t\t\t\t\ttype: \"AssignmentExpression\"\r\n\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\ttype: \"StringLiteral\"\r\n\t\t\t\t\t\t\tvalue: 'abc'\r\n\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\ttype: \"Identifier\"\r\n\t\t\t\t\t\t\tname: \"x\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tpat = new Patcher().walk(hAST)\r\n\r\n\tequal hAST, {\r\n\t\ttype: \"File\"\r\n\t\tprogram: {\r\n\t\t\ttype: \"Program\"\r\n\t\t\tbody: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: \"ExpressionStatement\"\r\n\t\t\t\t\texpression: {\r\n\t\t\t\t\t\ttype: \"AssignmentExpression\"\r\n\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\ttype: \"Literal\"\r\n\t\t\t\t\t\t\tvalue: 42\r\n\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\ttype: \"Identifier\"\r\n\t\t\t\t\t\t\tname: \"x\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: \"ExpressionStatement\"\r\n\t\t\t\t\texpression: {\r\n\t\t\t\t\t\ttype: \"AssignmentExpression\"\r\n\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\ttype: \"Literal\"\r\n\t\t\t\t\t\t\tvalue: 'abc'\r\n\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\ttype: \"Identifier\"\r\n\t\t\t\t\t\t\tname: \"x\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n# --- Remove location information from sample AST\r\n\r\n(() =>\r\n\r\n\tclass Remover extends NodeWalker\r\n\r\n\t\tinit: () ->\r\n\t\t\t@lKeys = words('loc extra range start end tokens')\r\n\t\t\treturn\r\n\r\n\t\tvisit: (hNode, level) ->\r\n\t\t\tfor key in @lKeys\r\n\t\t\t\tif hasKey(hNode, key)\r\n\t\t\t\t\tdelete hNode[key]\r\n\r\n\trem = new Remover()\r\n\thAST = dclone(hSampleAST)\r\n\trem.walk(hAST)\r\n\r\n\tequal hAST, {\r\n\t\ttype: \"File\",\r\n\t\tprogram: {\r\n\t\t\ttype: \"Program\",\r\n\t\t\tbody: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: \"ExpressionStatement\",\r\n\t\t\t\t\texpression: {\r\n\t\t\t\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\ttype: \"NumericLiteral\",\r\n\t\t\t\t\t\t\tvalue: 42,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\ttype: \"Identifier\",\r\n\t\t\t\t\t\t\tname: \"x\",\r\n\t\t\t\t\t\t\tdeclaration: true,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\toperator: \"=\",\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tdirectives: [],\r\n\t\t},\r\n\t\tcomments: [],\r\n\t\t}\r\n\t)()\r\n"
  ]
}