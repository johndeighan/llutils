{
  "version": 3,
  "file": "data-extractor.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\data-extractor.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# data-extractor.test.coffee\r\n\r\nimport {\r\n\tundef, fromTAML,\r\n\t} from '@jdeighan/llutils'\r\nimport {DUMP} from '@jdeighan/llutils/dump'\r\n\r\nimport * as lib from '@jdeighan/llutils/data-extractor'\r\nObject.assign(global, lib)\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\th = fromTAML(\"\"\"\r\n\t\t---\r\n\t\ttype: Assignment\r\n\t\tright: Value\r\n\t\tleft: Variable\r\n\t\tposition:\r\n\t\t\tstart: 1\r\n\t\t\tend: 5\r\n\t\t\tsource:\r\n\t\t\t\tfile: temp.txt\r\n\t\t\"\"\")\r\n\r\n\tequal extract(h, 'type'), {\r\n\t\ttype: 'Assignment'\r\n\t\t}\r\n\r\n\tequal extract(h, \"\"\"\r\n\t\ttype\r\n\t\t\"\"\"),\r\n\t\t{\r\n\t\ttype: 'Assignment'\r\n\t\t}\r\n\r\n\tequal extract(h, \"\"\"\r\n\t\ttype\r\n\t\tleft\r\n\t\tright\r\n\t\t\"\"\"),\r\n\t\t{\r\n\t\ttype: 'Assignment'\r\n\t\tleft: 'Variable'\r\n\t\tright: 'Value'\r\n\t\t}\r\n\r\n\t# --- enclose in parens to not extract\r\n\tequal extract(h, \"\"\"\r\n\t\ttype\r\n\t\t! left\r\n\t\tright\r\n\t\t\"\"\"),\r\n\t\t{\r\n\t\ttype: 'Assignment'\r\n\t\tright: 'Value'\r\n\t\t}\r\n\r\n\t# --- Can't extract same #symbol twice\r\n\tfails () => extract(h, \"\"\"\r\n\t\ttype\r\n\t\tleft\r\n\t\ttype\r\n\t\t\"\"\")\r\n\r\n\t# --- Unless it isn't stored\r\n\tsucceeds () => extract(h, \"\"\"\r\n\t\ttype\r\n\t\tleft\r\n\t\t! type\r\n\t\t\"\"\")\r\n\r\n\t# --- Keys you name must exist\r\n\tfails () => extract(h, \"\"\"\r\n\t\ttype\r\n\t\tleft\r\n\t\tright\r\n\t\tdoesnotexist\r\n\t\t\"\"\")\r\n\r\n\t# --- Unless you mark it as optional\r\n\tsucceeds () => extract(h, \"\"\"\r\n\t\ttype\r\n\t\tleft\r\n\t\tright\r\n\t\t? doesnotexist\r\n\t\t\"\"\")\r\n\r\n\t# --- Provide expected value, in which case\r\n\t#     it's not stored\r\n\tequal extract(h, \"\"\"\r\n\t\ttype=\"Assignment\"\r\n\t\tleft\r\n\t\tright\r\n\t\t\"\"\"),\r\n\t\t{\r\n\t\tleft: 'Variable'\r\n\t\tright: 'Value'\r\n\t\t}\r\n\r\n\t# --- Mismatch causes failure\r\n\tfails () => extract(h, \"\"\"\r\n\t\ttype=\"NonAssignment\"\r\n\t\tleft\r\n\t\tright\r\n\t\t\"\"\")\r\n\r\n\t# --- Extract sub-keys\r\n\tequal extract(h, \"\"\"\r\n\t\ttype=\"Assignment\"\r\n\t\tposition.start\r\n\t\tposition.end\r\n\t\tposition.source.file\r\n\t\t\"\"\"),\r\n\t\t{\r\n\t\tstart: 1\r\n\t\tend: 5\r\n\t\tfile: 'temp.txt'\r\n\t\t}\r\n\r\n\t# --- Rename keys\r\n\tequal extract(h, \"\"\"\r\n\t\ttype=\"Assignment\"\r\n\t\tright as RightSide\r\n\t\tposition.start as StartingPos\r\n\t\t\"\"\"),\r\n\t\t{\r\n\t\tRightSide: 'Value'\r\n\t\tStartingPos: 1\r\n\t\t}\r\n\r\n\t#symbol \"nested\"\r\n\r\n\t# --- Extract sub-keys\r\n\tequal extract(h, \"\"\"\r\n\t\ttype=\"Assignment\"\r\n\t\t! position\r\n\t\t\tstart\r\n\t\t\tend\r\n\t\t\t! source\r\n\t\t\t\tfile\r\n\t\t\"\"\"),\r\n\t\t{\r\n\t\tstart: 1\r\n\t\tend: 5\r\n\t\tfile: 'temp.txt'\r\n\t\t}\r\n\r\n\t)()\r\n\r\n#symbol \"from original test\"\r\n\r\n(() =>\r\n\th = fromTAML(\"\"\"\r\n\t\t---\r\n\t\ttype: Assignment\r\n\t\tright:\r\n\t\t\ttype: Function\r\n\t\t\tparams:\r\n\t\t\t\t-\r\n\t\t\t\t\ttype: Identifier\r\n\t\t\t\t\tname: x\r\n\t\t\t\t-\r\n\t\t\t\t\ttype: Unknown\r\n\t\t\t\t\tname: z\r\n\t\t\t\t-\r\n\t\t\t\t\ttype: Identifier\r\n\t\t\t\t\tname: y\r\n\t\t\tbody:\r\n\t\t\t\ttype: Block\r\n\t\tleft:\r\n\t\t\ttype: Identifier\r\n\t\t\"\"\")\r\n\r\n\tequal extract(h, 'type'), {type: 'Assignment'}\r\n\tequal extract(h, 'type as kind'), {kind: 'Assignment'}\r\n\tequal extract(h, '?type'), {type: 'Assignment'}\r\n\tequal extract(h, '?missing'), {}\r\n\tfails () => extract(h, 'missing')\r\n\tequal extract(h, 'left'), {left: {type: 'Identifier'}}\r\n\r\n\t# --- Optional missing key is not a problem\r\n\tequal extract(h, \"\"\"\r\n\t\t?missing\r\n\t\ttype\r\n\t\t\"\"\"), {type: 'Assignment'}\r\n\r\n\t# --- Non-optional missing key throws exception\r\n\tfails () => extract(h, \"\"\"\r\n\t\ttype\r\n\t\tmissing\r\n\t\t\"\"\")\r\n\r\n\tlike  extract(h, 'right'), {right: {\r\n\t\ttype: 'Function'\r\n\t\tbody: {type: 'Block'}\r\n\t\t}}\r\n\r\n\tequal extract(h, \"\"\"\r\n\t\ttype\r\n\t\tleft\r\n\t\t\"\"\"), {\r\n\t\ttype: 'Assignment'\r\n\t\tleft: {type: 'Identifier'}\r\n\t\t}\r\n\r\n\tequal extract(h, \"\"\"\r\n\t\ttype\r\n\t\tleft\r\n\t\t\"\"\"), {\r\n\t\ttype: 'Assignment'\r\n\t\tleft: {type: 'Identifier'}\r\n\t\t}\r\n\r\n\tlike extract(h, \"\"\"\r\n\t\ttype\r\n\t\tright\r\n\t\t\ttype as rtype\r\n\t\t\"\"\"), {\r\n\t\ttype: 'Assignment'\r\n\t\trtype: 'Function'\r\n\t\t}\r\n\r\n\tlike extract(h, \"\"\"\r\n\t\ttype\r\n\t\tright.type as rtype\r\n\t\t\"\"\"), {\r\n\t\ttype: 'Assignment'\r\n\t\trtype: 'Function'\r\n\t\t}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\th = {\r\n\t\ttype: \"ExportNamedDeclaration\",\r\n\t\tsource: null,\r\n\t\tassertions: [],\r\n\t\texportKind: \"value\",\r\n\t\tspecifiers: [],\r\n\t\tdeclaration: {\r\n\t\t\ttype: \"AssignmentExpression\",\r\n\t\t\tright: {\r\n\t\t\t\ttype: \"ArrowFunctionExpression\",\r\n\t\t\t\tparams: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: \"Identifier\",\r\n\t\t\t\t\t\tname: \"x\",\r\n\t\t\t\t\t\tdeclaration: false\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tbody: {\r\n\t\t\t\t\ttype: \"BlockStatement\",\r\n\t\t\t\t\tbody: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttype: \"ReturnStatement\",\r\n\t\t\t\t\t\t\targument: {\r\n\t\t\t\t\t\t\t\ttype: \"BinaryExpression\",\r\n\t\t\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\t\t\ttype: \"NumericLiteral\",\r\n\t\t\t\t\t\t\t\t\tvalue: 42\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\t\t\ttype: \"Identifier\",\r\n\t\t\t\t\t\t\t\t\tname: \"x\",\r\n\t\t\t\t\t\t\t\t\tdeclaration: false\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\toperator: \"+\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t\tgenerator: false,\r\n\t\t\t\tasync: false,\r\n\t\t\t\tid: null,\r\n\t\t\t\thasIndentedBody: true\r\n\t\t\t},\r\n\t\t\tleft: {\r\n\t\t\t\ttype: \"Identifier\",\r\n\t\t\t\tname: \"func\",\r\n\t\t\t\tdeclaration: true\r\n\t\t\t},\r\n\t\t\toperator: \"=\"\r\n\t\t}\r\n\t}\r\n\r\n\thResult = extract(h, \"\"\"\r\n\t\ttype=\"ExportNamedDeclaration\"\r\n\t\texportKind=\"value\"\r\n\t\t! declaration\r\n\t\t\ttype=\"AssignmentExpression\"\r\n\t\t\tleft.type=\"Identifier\"\r\n\t\t\tleft.name\r\n\t\t\"\"\")\r\n\tequal hResult, {name: 'func'}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\thAST = {\r\n\t\ttype: 'program'\r\n\t\tname: 'John'\r\n\t\tbody: {\r\n\t\t\ttype: 'if'\r\n\t\t\tcond: 'x==2'\r\n\t\t\tbody: {\r\n\t\t\t\ttype: 'assign'\r\n\t\t\t\tleft: 'x'\r\n\t\t\t\tright: 2\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tresult = extract(hAST, \"\"\"\r\n\t\ttype=\"program\"\r\n\t\tname\r\n\t\t! body\r\n\t\t\ttype as bodyType\r\n\t\t\tcond\r\n\t\t\"\"\")\r\n\r\n\tequal result, {\r\n\t\tname: 'John'\r\n\t\tbodyType: 'if'\r\n\t\tcond: 'x==2'\r\n\t\t}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\thAST = {\r\n\t\ttype: 'program'\r\n\t\tname: 'John'\r\n\t\t}\r\n\r\n\tresult = extract(hAST, \"\"\"\r\n\t\ttype=\"program\"\r\n\t\tname\r\n\t\t?body\r\n\t\t\ttype as bodyType\r\n\t\t\tcond\r\n\t\t\"\"\")\r\n\r\n\tequal result, {\r\n\t\tname: 'John'\r\n\t\t}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\thAST = {\r\n\t\ttype: 'program'\r\n\t\tname: 'John'\r\n\t\t}\r\n\r\n\tresult = extract(hAST, \"\"\"\r\n\t\ttype=\"program\"\r\n\t\tname\r\n\t\t! ?body\r\n\t\t\ttype as bodyType\r\n\t\t\tcond\r\n\t\t\"\"\")\r\n\r\n\tequal result, {\r\n\t\tname: 'John'\r\n\t\t}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\thAST = {\r\n\t\ttype: 'program'\r\n\t\tname: 'John'\r\n\t\tbody: {\r\n\t\t\ttype: 'if'\r\n\t\t\tcond: 'x==2'\r\n\t\t\tbody: {\r\n\t\t\t\ttype: 'assign'\r\n\t\t\t\tleft: 'x'\r\n\t\t\t\tright: 2\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tresult = extract(hAST, \"\"\"\r\n\t\ttype=\"program\"\r\n\t\tname\r\n\t\t! ?body\r\n\t\t\ttype as bodyType\r\n\t\t\tcond\r\n\t\t\"\"\")\r\n\r\n\tequal result, {\r\n\t\tname: 'John'\r\n\t\tbodyType: 'if'\r\n\t\tcond: 'x==2'\r\n\t\t}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\thAST = {\r\n\t\ttype: 'program'\r\n\t\tname: 'John'\r\n\t\tbody: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'if'\r\n\t\t\t\tcond: 'x==2'\r\n\t\t\t\tbody: [{type: 'assign', left: 'x', right: 1}]\r\n\t\t\t\t}\r\n\t\t\t{\r\n\t\t\t\ttype: 'then'\r\n\t\t\t\tbody: [{type: 'assign', left: 'y', right: 2}]\r\n\t\t\t\t}\r\n\t\t\t{\r\n\t\t\t\ttype: 'else'\r\n\t\t\t\tcond: 'x==2'\r\n\t\t\t\tbody: [{type: 'assign', left: 'z', right: 3}]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\r\n\tresult = extract(hAST, \"\"\"\r\n\t\ttype = \"program\"\r\n\t\tname\r\n\t\tbody\r\n\t\t\"\"\")\r\n\r\n\tequal result, {\r\n\t\tname: 'John'\r\n\t\tbody: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'if'\r\n\t\t\t\tcond: 'x==2'\r\n\t\t\t\tbody: [{type: 'assign', left: 'x', right: 1}]\r\n\t\t\t\t}\r\n\t\t\t{\r\n\t\t\t\ttype: 'then'\r\n\t\t\t\tbody: [{type: 'assign', left: 'y', right: 2}]\r\n\t\t\t\t}\r\n\t\t\t{\r\n\t\t\t\ttype: 'else'\r\n\t\t\t\tcond: 'x==2'\r\n\t\t\t\tbody: [{type: 'assign', left: 'z', right: 3}]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t)()\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nds = fromTAML(\"\"\"\r\n\t---\r\n\tfName: John\r\n\taka:\r\n\t\t-\r\n\t\t\tid: 1\r\n\t\t\talias: JD\r\n\t\t-\r\n\t\t\tid: 2\r\n\t\t\talias: Deighan\r\n\t\"\"\")\r\n\r\nequal extract(ds, \"\"\"\r\n\tfName\r\n\t?body\r\n\t\ttype\r\n\t\"\"\"), {fName: 'John'}\r\n\r\nequal extract(ds, \"\"\"\r\n\tfName\r\n\t[! aka]\r\n\t\tid\r\n\t\talias\r\n\t\"\"\"), fromTAML(\"\"\"\r\n\t---\r\n\tfName: John\r\n\taka:\r\n\t\t-\r\n\t\t\tid: 1\r\n\t\t\talias: JD\r\n\t\t-\r\n\t\t\tid: 2\r\n\t\t\talias: Deighan\r\n\t\"\"\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nhNode = {\r\n\ttype: 'CallExpression',\r\n\tcallee: { type: 'Identifier', name: 'f', declaration: false },\r\n\targuments: [],\r\n\toptional: false,\r\n\timplicit: false\r\n\t}\r\n\r\nequal extract(hNode, \"\"\"\r\n\tcallee\r\n\t\ttype as calleeType\r\n\t[arguments as lArgs]\r\n\t\ttype\r\n\t\tvalue\r\n\t\"\"\"), {\r\n\tcallee: { type: 'Identifier', name: 'f', declaration: false }\r\n\tcalleeType: 'Identifier'\r\n\tlArgs: []\r\n\t}\r\n"
  ]
}