{
  "version": 3,
  "file": "tracer.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\tracer.test.coffee"
  ],
  "names": [],
  "mappings": "AAAoB;AAEpB,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB;;AACA,OAAO,CAAA,QAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,IAAtB,EANoB;;;;AAWpB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,SAAA,CAAU,UAAV;EAET,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM,YADe;IAErB,IAAA,EAAM;EAFe,CAAhB,CAAN,EAGK,CAAA,OAAA,CAHL;EAOA,MAAM,CAAC,KAAP,GAAe;EAEf,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM;EADe,CAAhB,CAAN,EAEK,CAAA,CAAA,CAFL;EAMA,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM;EADe,CAAhB,CAAN,EAEK,CAAA,OAAA,CAFL;EAMA,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM,YADe;IAErB,MAAA,EAAQ;EAFa,CAAhB,CAAN,EAGK,CAAA,WAAA,CAHL;EAOA,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM,YADe;IAErB,IAAA,EAAM;EAFe,CAAhB,CAAN,EAGK,CAAA,UAAA,CAHL;EAOA,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM;EADe,CAAhB,CAAN,EAEK,CAAA,CAAA,CAFL;EAMA,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM;EADe,CAAhB,CAAN,EAEK,CAAA,OAAA,CAFL;SAMA,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB;IACrB,IAAA,EAAM,YADe;IAErB,MAAA,EAAQ;EAFa,CAAhB,CAAN,EAGK,CAAA,WAAA,CAHL;AAlDA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# tracer.test.coffee\r\n\r\nimport {undef} from '@jdeighan/llutils'\r\nimport * as lib from '@jdeighan/llutils/tracer'\r\nObject.assign(global, lib)\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\n\r\n# ---------------------------------------------------------------------------\r\n#symbol \"getTracer(type, inputStr, hVars={})\"\r\n\r\n(() =>\r\n\ttracer = getTracer('advanced')\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.enter'\r\n\t\trule: 'start'\r\n\t\t}), \"\"\"\r\n\t\t? start\r\n\t\t\"\"\"\r\n\r\n\ttracer.level = 1\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.fail'\r\n\t\t}), \"\"\"\r\n\t\tx\r\n\t\t\"\"\"\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.match'\r\n\t\t}), \"\"\"\r\n\t\t└─> YES\r\n\t\t\"\"\"\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.match'\r\n\t\tresult: 'IDENT'\r\n\t\t}), \"\"\"\r\n\t\t└─> \"IDENT\"\r\n\t\t\"\"\"\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.enter'\r\n\t\trule: 'start'\r\n\t\t}), \"\"\"\r\n\t\t│  ? start\r\n\t\t\"\"\"\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.fail'\r\n\t\t}), \"\"\"\r\n\t\tx\r\n\t\t\"\"\"\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.match'\r\n\t\t}), \"\"\"\r\n\t\t└─> YES\r\n\t\t\"\"\"\r\n\r\n\tequal tracer.traceStr({\r\n\t\ttype: 'rule.match'\r\n\t\tresult: 'IDENT'\r\n\t\t}), \"\"\"\r\n\t\t└─> \"IDENT\"\r\n\t\t\"\"\"\r\n\r\n\t)()\r\n"
  ]
}