{
  "version": 3,
  "file": "llutils.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\llutils.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# llutils.test.coffee\n\nimport * as lib from '@jdeighan/llutils'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\n# ---------------------------------------------------------------------------\n#symbol undef - a synonym for undefined\n\nequal undef, undefined\nnotequal undef, 23\n\n# ---------------------------------------------------------------------------\n#symbol pass() - do nothing\n\nsucceeds () => pass()\n\n# ---------------------------------------------------------------------------\n#symbol range(n) - build iterable of ints\n\nequal Array.from(range(10)), [0,1,2,3,4,5,6,7,8,9]\n\n# ---------------------------------------------------------------------------\n#symbol add_s(n) - add an 's' for plural\n\nequal add_s(0), 's'\nequal add_s(1), ''\nequal add_s(2), 's'\nequal add_s(99), 's'\n\n# ---------------------------------------------------------------------------\n#symbol assert(cond, msg) - assert some condition\n\nfails () => assert(2 == 3)\nsucceeds () => assert(2 == 2)\n\n# ---------------------------------------------------------------------------\n#symbol croak(msg) - throw an exception\n\nfails () => croak(\"bad\")\n\n# ---------------------------------------------------------------------------\n# --- define some objects for later testing\n\ns = 'abc'\nb = true\nn = 3.14159\ni = 42\nl = [1, 2]\nh = {a:1, b:2}\nf = (x) -> return 2*x\nr = /^a*$/\nc = class Dummy\n\tconstructor: (@name='my name') ->\n\t\t@key = 'nothing'\no = new c()\np = new Promise((resolve,reject) => return 42)\ng = () ->\n\tyield 'a'\n\tyield 'b'\n\tyield 'c'\n\treturn\n\n# ---------------------------------------------------------------------------\n#symbol defined(obj) - equal a value defined\n\ntruthy defined(s)\ntruthy defined(i)\ntruthy defined(n)\ntruthy defined(l)\ntruthy defined(h)\ntruthy defined(c)\ntruthy defined(o)\n\nfalsy defined(undef)\nfalsy defined(null)\n\n# ---------------------------------------------------------------------------\n#symbol notdefined(obj) - equal a value not defined\n\ntruthy notdefined(undef)\ntruthy notdefined(null)\n\nfalsy notdefined(s)\nfalsy notdefined(i)\nfalsy notdefined(n)\nfalsy notdefined([1,2])\nfalsy notdefined({a:1, b:2})\nfalsy notdefined(c)\nfalsy notdefined(o)\n\n# ---------------------------------------------------------------------------\n#symbol words(str...) - extract words from 1 or more strings\n\nequal words(), []\nequal words(' ab cd', 'ef gh '), ['ab','cd','ef','gh']\n\n# ---------------------------------------------------------------------------\n#symbol isString(obj) - test if obj equal a string\n\ntruthy isString('abc')\ntruthy isString('abc', {nonempty: true})\n\nfalsy isString(undef)\nfalsy isString(['abc'])\nfalsy isString('', {nonempty: true})\n\n# ---------------------------------------------------------------------------\n#symbol isBoolean(obj) - test if obj equal a boolean\n\ntruthy isBoolean(true)\ntruthy isBoolean(false)\ntruthy isBoolean(new Boolean(true))\n\nfalsy isBoolean(s)\n\n# ---------------------------------------------------------------------------\n#symbol isNumber(obj) - test if obj equal a number\n\ntruthy isNumber(i)\ntruthy isNumber(n)\n\nfalsy isNumber('abc')\nfalsy isNumber(undef)\nfalsy isNumber(['abc'])\n\n# ---------------------------------------------------------------------------\n#symbol isInteger(obj) - test if obj equal n integer\n\ntruthy isInteger(i)\n\nfalsy isInteger(n)\nfalsy isInteger('abc')\nfalsy isInteger(undef)\nfalsy isInteger(['abc'])\n\n# ---------------------------------------------------------------------------\n#symbol isArray(obj) - test if obj equal an array\n\ntruthy isArray(['abc'])\ntruthy isArray(['abc'], 'nonempty')\ntruthy isArray(['abc','def'], 'allStrings')\n\nfalsy isArray('abc')\nfalsy isArray(undef)\nfalsy isArray([], {nonempty: true})\nfalsy isArray([], 'nonempty')\nfalsy isArray(['abc', []], {allStrings: true})\nfalsy isArray(['abc', []], 'allStrings')\n\n# ---------------------------------------------------------------------------\n#symbol isHash(obj) - test if obj equal a hash\n\ntruthy isHash({a:1, b:2})\n\nfalsy isHash('abc')\nfalsy isHash(undef)\nfalsy isHash(o)\n\n# ---------------------------------------------------------------------------\n#symbol isFunction(obj) - test if obj equal a function\n\ntruthy isFunction(() -> return 'abc')\n\nfalsy isFunction(s)\n\n# ---------------------------------------------------------------------------\n#symbol isRegExp(obj) - test if obj equal a regular expression\n\ntruthy isRegExp(/^abc$/)\n\nfalsy isRegExp(s)\n\n# ---------------------------------------------------------------------------\n#symbol isClass(obj) - test if obj equal a class\n\ntruthy isClass(class NewClass)\n\nfalsy isClass(s)\n\n# ---------------------------------------------------------------------------\n#symbol isPromise(obj) - test if obj equal a promise\n\ntruthy isPromise(p)\n\nfalsy isPromise(s)\n\n# ---------------------------------------------------------------------------\n#symbol isClassInstance(obj) - test if obj equal a class instance\n\ntruthy isClassInstance(o)\n\nfalsy isClassInstance(s)\n\n# ---------------------------------------------------------------------------\n#symbol escapeStr(str)\n\nequal escapeStr(\"\\t\\tabc def\"), \"→→abc˳def\"\nequal escapeStr(\"\\t\\tabc def\\r\\n\"), \"→→abc˳def◄▼\"\nequal escapeStr(\"\\t\\tabc def\\r\\nghi\", 'escNoNL'), \"\"\"\n\t\t→→abc˳def◄\n\t\tghi\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol OL(x)\n\nequal OL(undef), 'undef'\nequal OL(null), 'null'\nequal OL('abc def'), '\"abc˳def\"'\nequal OL([1,2]), '[1,2]'\nequal OL({a:1, b:2}), '{\"a\":1,\"b\":2}'\nequal OL({a:'a', b:'b'}), '{\"a\":\"a\",\"b\":\"b\"}'\n\n# ---------------------------------------------------------------------------\n#symbol ML(x)\n\nequal ML(undef), '.undef.'\nequal ML(null), '.null.'\nequal ML(true), 'true'\nequal ML(false), 'false'\nequal ML('abc def'), '\"abc˳def\"'\nequal ML([1,2]), \"\"\"\n\t\t[\n\t\t\t1,\n\t\t\t2\n\t\t]\n\t\t\"\"\"\nequal ML({a:1, b:2}), \"\"\"\n\t\t{\n\t\t\t\"a\": 1,\n\t\t\t\"b\": 2\n\t\t}\n\t\t\"\"\"\nequal ML({a:'a', b:'b'}), \"\"\"\n\t\t{\n\t\t\t\"a\": \"a\",\n\t\t\t\"b\": \"b\"\n\t\t}\n\t\t\"\"\"\nequal ML({\n\t\tmeaning: 42\n\t\tparse: (str) => return 42\n\t\t}), \"\"\"\n\t{\n\t\t\"meaning\": 42,\n\t\t\"parse\": «Function parse»\n\t}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol OLS(lItems)\n\nequal OLS([[1,2], {a:1, b:2}]), '[1,2],{\"a\":1,\"b\":2}'\n\n# ---------------------------------------------------------------------------\n#symbol isEmpty(obj)\n\ntruthy isEmpty(undef)\ntruthy isEmpty(null)\ntruthy isEmpty('')\ntruthy isEmpty('   ')\ntruthy isEmpty([])\ntruthy isEmpty({})\n\nfalsy isEmpty(s)\nfalsy isEmpty(i)\nfalsy isEmpty(0)     # zero equal not empty!!!\nfalsy isEmpty(n)\nfalsy isEmpty(l)\nfalsy isEmpty(h)\n\n# ---------------------------------------------------------------------------\n#symbol nonEmpty(obj)\n\ntruthy nonEmpty(s)\ntruthy nonEmpty(i)\ntruthy nonEmpty(0)     # zero equal not empty!!!\ntruthy nonEmpty(n)\ntruthy nonEmpty(l)\ntruthy nonEmpty(h)\n\nfalsy nonEmpty(undef)\nfalsy nonEmpty(null)\nfalsy nonEmpty('')\nfalsy nonEmpty('   ')\nfalsy nonEmpty([])\nfalsy nonEmpty({})\n\n# ---------------------------------------------------------------------------\n#symbol execCmd(str) - execute a command\n\nequal execCmd('echo this'), \"this\\n\"\n\n# ---------------------------------------------------------------------------\n#symbol chomp(str) - remove trailing \\r and/or \\n\n\nequal chomp(\"abc\\n\"), \"abc\"\nequal chomp(\"abc\\r\\n\"), \"abc\"\n\n# ---------------------------------------------------------------------------\n#symbol hasKey(h, key)\n\ntruthy hasKey({a:1, b:2, c:3}, 'b')\n\nfalsy hasKey({a:1, c:3}, 'b')\n\n# ---------------------------------------------------------------------------\n#symbol removeKeys(h, lKeys)\n\nequal removeKeys({a:1, b:2, c:3}, ['b']), {a:1, c:3}\n\nhash = {\n\ta:1\n\tb:2\n\tc:3\n\tlItems: [{a:1, b:2}, {b:2, c:3}]\n\t}\nequal removeKeys(hash, ['b','c']), {\n\ta:1\n\tlItems: [{a:1}, {}]\n\t}\n\nhAST = {\n\tbody: [\n\t\t{\n\t\t\tdeclarations: Array [{start:0}],\n\t\t\tend: 11,\n\t\t\tkind: 'let',\n\t\t\tstart: 0,\n\t\t\ttype: 'VariableDeclaration',\n\t\t\t},\n\t\t],\n\tend: 11,\n\tsourceType: 'script',\n\tstart: 0,\n\ttype: 'Program',\n\t}\n\nequal(\n\tremoveKeys(hAST, ['start','end']), {\n\t\tbody: [\n\t\t\t{\n\t\t\t\tdeclarations: Array [{}],\n\t\t\t\tkind: 'let',\n\t\t\t\ttype: 'VariableDeclaration',\n\t\t\t\t},\n\t\t\t],\n\t\tsourceType: 'script',\n\t\ttype: 'Program',\n\t\t})\n\nhAST2 = {\n\tbody: [\n\t\t{\n\t\t\tdeclarations: Array [{start:0}],\n\t\t\tend: 12,\n\t\t\tkind: 'let',\n\t\t\tstart: 0,\n\t\t\ttype: 'VariableDeclaration',\n\t\t\t},\n\t\t],\n\tend: 12,\n\tsourceType: 'script',\n\tstart: 0,\n\ttype: 'Program',\n\t}\n\nequal(\n\tremoveKeys(hAST2, ['start','end']), {\n\tbody: [\n\t\t{\n\t\t\tdeclarations: Array [{}],\n\t\t\tkind: 'let',\n\t\t\ttype: 'VariableDeclaration',\n\t\t\t},\n\t\t],\n\tsourceType: 'script',\n\ttype: 'Program',\n\t})\n\n# ---------------------------------------------------------------------------\n#symbol npmLogLevel() - get NPM log level\n\nlogLevel = npmLogLevel()\ntruthy (logLevel == 'silent') || (logLevel == 'warn')\n\n# ---------------------------------------------------------------------------\n#symbol blockToArray(block) - split string on \\r?\\n\n\nequal blockToArray(''), []\nequal blockToArray(\"a\\nb\\nc\"), ['a','b','c']\nequal blockToArray(\"a\\r\\nb\\r\\nc\"), ['a','b','c']\n\nl = blockToArray(\"\"\"\n\tabc\n\tdef\n\t\"\"\")\nequal l, [\n\t'abc'\n\t'def'\n\t]\n\n# ---------------------------------------------------------------------------\n#symbol toArray(strOrArray)\n\nequal toArray(['a','b','c']), ['a','b','c']\nequal toArray(\"\"\"\n\tabc\n\tdef\n\t\"\"\"), ['abc','def']\n\n# ---------------------------------------------------------------------------\n#symbol arrayToBlock(lItems) - join lines with \\n\n\nequal arrayToBlock(['a','b','c']), \"a\\nb\\nc\"\n\n# ---------------------------------------------------------------------------\n#symbol toBlock(strOrArray)\n\nequal toBlock(['a','b','c']), \"\"\"\n\ta\n\tb\n\tc\n\t\"\"\"\nequal toBlock(\"\"\"\n\tabc\n\tdef\n\t\"\"\"), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol untabify(str) - convert TAB to n chars\n\nequal untabify(\"abc\\n\\tdef\"), \"abc\\n   def\"\n\n# ---------------------------------------------------------------------------\n#symbol splitPrefix(str) - separate into indentation and rest\n\nequal splitPrefix(\"   abc\"), [\"   \",\"abc\"]\nequal splitPrefix(\"\\t\\tabc\"), [\"\\t\\t\",\"abc\"]\n\n# ---------------------------------------------------------------------------\n#symbol tabify(str) - convert leading spaces to TABs\n\nstr = \"\"\"\n\tabc\n\t  def\n\t    ghi\n\t\"\"\"\n\nequal tabify(str), \"abc\\n\\tdef\\n\\t\\tghi\"\n\n# ---------------------------------------------------------------------------\n#symbol gen2array(generator)\n\nequal gen2array(g), ['a','b','c']\n\n# ---------------------------------------------------------------------------\n#symbol gen2block(generator)\n\nequal gen2block(g), \"\"\"\n\t\ta\n\t\tb\n\t\tc\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol spaces(n) - create a string of n spaces\n\nequal spaces(3), '   '\n\n# ---------------------------------------------------------------------------\n#symbol tabs(n) - create a string of n TAB chars\n\nequal tabs(3), \"\\t\\t\\t\"\n\n# ---------------------------------------------------------------------------\n#symbol centered(n) - create a string of n TAB chars\n\nequal centered('abcdefg', 5), 'abcdefg'\nequal centered('abc', 5), ' abc '\nequal centered('ab', 10, {char:'-'}), '--  ab  --'\n\n# ---------------------------------------------------------------------------\n#symbol countChars(str, ch)\n\nequal countChars(\"abc,def\", \",\"), 1\nequal countChars(\",abc,def\", \",\"), 2\nequal countChars(\"abc,def,\", \",\"), 2\nequal countChars(\",abc,def,\", \",\"), 3\n\n# ---------------------------------------------------------------------------\n#symbol rtrim(str)\n\nequal rtrim(\"abc  \"), \"abc\"\nequal rtrim(\"abc\\t\\t\"), \"abc\"\nequal rtrim(\"abc \\t\"), \"abc\"\nequal rtrim(\"abc\"), \"abc\"\n\n# ---------------------------------------------------------------------------\n#symbol join(lItems)\n\nequal join('abc'), 'abc'\nequal join(['a','b','c']), 'abc'\nequal join(['a', ['b', 'c']]), 'abc'\nequal join(['a', ['b', 'c']], ['d','e','f'], 'g'), 'abcdefg'\nequal join(['1'], ['.',['3']]), '1.3'\n\n# ---------------------------------------------------------------------------\n#symbol now()\n\nsucceeds () => now()\n\n# ---------------------------------------------------------------------------\n#symbol timeit(func, numReps=100)\n\nsucceeds () => timeit(() -> return 42)\n"
  ]
}