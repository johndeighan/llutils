{
  "version": 3,
  "file": "llutils.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\llutils.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# llutils.test.coffee\n\nimport eq from 'deep-equal'\nimport * as lib from '@jdeighan/llutils'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\n# ---------------------------------------------------------------------------\n#symbol \"undef\"   # --- a synonym for undefined\n\nequal undef, undefined\nnotequal undef, 23\n\n# ---------------------------------------------------------------------------\n#symbol \"eq()\"   # --- deep equality\n\ntruthy eq('abc', 'abc')\ntruthy eq(13, 13)\ntruthy eq(['a','b'], ['a', 'b'])\ntruthy eq({a:1, b:2}, {b:2, a:1})\n\nfalsy eq('abc', ['abc'])\nfalsy eq(['a','b'], ['b', 'a'])\nfalsy eq({a:1, b:2}, {a:1, b:2, c:3})\n\n# ---------------------------------------------------------------------------\n#symbol \"dclone()\"    # --- deep clone\n\nequal dclone({a:1, b:['a',3,'z']}), {a:1, b:['a',3,'z']}\n\n# ---------------------------------------------------------------------------\n#symbol \"pass()\"    # --- do nothing\n\nsucceeds () => pass()\n\n# ---------------------------------------------------------------------------\n#symbol \"range(n)\"   # --- build iterable of ints\n\nequal Array.from(range(10)), [0,1,2,3,4,5,6,7,8,9]\n\n# ---------------------------------------------------------------------------\n#symbol \"rev_range(n)\"   # --- build iterable of ints\n\nequal Array.from(rev_range(10)), [9,8,7,6,5,4,3,2,1,0]\n\n# ---------------------------------------------------------------------------\n#symbol \"add_s(n)\"    # --- add an 's' for plural things\n\nequal add_s(0), 's'\nequal add_s(1), ''\nequal add_s(2), 's'\nequal add_s(99), 's'\n\n# ---------------------------------------------------------------------------\n#symbol \"assert(cond, msg)\"    # --- assert some condition\n\nfails () => assert(2 == 3)\nsucceeds () => assert(2 == 2)\n\n# ---------------------------------------------------------------------------\n#symbol \"croak(msg)\"    # --- throw an exception\n\nfails () => croak(\"bad\")\n\n# ---------------------------------------------------------------------------\n# --- define some objects for later testing\n\ns = 'abc'\nb = true\nn = 3.14159\ni = 42\nl = [1, 2]\nh = {a:1, b:2}\nf = (x) -> return 2*x\nr = /^a*$/\nc = class Dummy\n\tconstructor: (@name='my name') ->\n\t\t@key = 'nothing'\no = new c()\np = new Promise((resolve,reject) => return 42)\ng = () ->\n\tyield 'a'\n\tyield 'b'\n\tyield 'c'\n\treturn\n\n# ---------------------------------------------------------------------------\n#symbol \"defined(obj)\"    # --- equal a value defined\n\ntruthy defined(s)\ntruthy defined(i)\ntruthy defined(n)\ntruthy defined(l)\ntruthy defined(h)\ntruthy defined(c)\ntruthy defined(o)\n\nfalsy defined(undef)\nfalsy defined(null)\n\n# ---------------------------------------------------------------------------\n#symbol \"notdefined(obj)\"    # --- equal a value not defined\n\ntruthy notdefined(undef)\ntruthy notdefined(null)\n\nfalsy notdefined(s)\nfalsy notdefined(i)\nfalsy notdefined(n)\nfalsy notdefined([1,2])\nfalsy notdefined({a:1, b:2})\nfalsy notdefined(c)\nfalsy notdefined(o)\n\n# ---------------------------------------------------------------------------\n#symbol \"words(str...)\"    # --- extract words from 1 or more strings\n\nequal words(), []\nequal words(' ab cd', 'ef gh '), ['ab','cd','ef','gh']\n\n# ---------------------------------------------------------------------------\n#symbol \"isString(obj)\"    # --- test if obj equal a string\n\ntruthy isString('abc')\ntruthy isString('abc', {nonempty: true})\n\nfalsy isString(undef)\nfalsy isString(['abc'])\nfalsy isString('', {nonempty: true})\n\n# ---------------------------------------------------------------------------\n#symbol \"isBoolean(obj)\"    # --- test if obj equal a boolean\n\ntruthy isBoolean(true)\ntruthy isBoolean(false)\ntruthy isBoolean(new Boolean(true))\n\nfalsy isBoolean(s)\n\n# ---------------------------------------------------------------------------\n#symbol \"isNumber(obj)\"    # --- test if obj equal a number\n\ntruthy isNumber(i)\ntruthy isNumber(n)\n\nfalsy isNumber('abc')\nfalsy isNumber(undef)\nfalsy isNumber(['abc'])\n\n# ---------------------------------------------------------------------------\n#symbol \"isInteger(obj)\"    # --- test if obj equal n integer\n\ntruthy isInteger(i)\n\nfalsy isInteger(n)\nfalsy isInteger('abc')\nfalsy isInteger(undef)\nfalsy isInteger(['abc'])\n\n# ---------------------------------------------------------------------------\n#symbol \"isArray(obj)\"    # --- test if obj equal an array\n\ntruthy isArray(['abc'])\ntruthy isArray(['abc'], 'nonempty')\ntruthy isArray(['abc','def'], 'allStrings')\n\nfalsy isArray('abc')\nfalsy isArray(undef)\nfalsy isArray([], {nonempty: true})\nfalsy isArray([], 'nonempty')\nfalsy isArray(['abc', []], {allStrings: true})\nfalsy isArray(['abc', []], 'allStrings')\n\n# ---------------------------------------------------------------------------\n#symbol \"isHash(obj)\"    # --- test if obj equal a hash\n\ntruthy isHash({a:1, b:2})\n\nfalsy isHash('abc')\nfalsy isHash(undef)\nfalsy isHash(o)\n\n# ---------------------------------------------------------------------------\n#symbol \"isFunction(obj)\"    # --- test if obj equal a function\n\ntruthy isFunction(() -> return 'abc')\n\nfalsy isFunction(s)\n\n# ---------------------------------------------------------------------------\n#symbol \"isRegExp(obj)\"    # --- test if obj equal a regular expression\n\ntruthy isRegExp(/^abc$/)\n\nfalsy isRegExp(s)\n\n# ---------------------------------------------------------------------------\n#symbol \"isClass(obj)\"    # --- test if obj equal a class\n\ntruthy isClass(class NewClass)\n\nfalsy isClass(s)\n\n# ---------------------------------------------------------------------------\n#symbol \"isPromise(obj)\"    # --- test if obj equal a promise\n\ntruthy isPromise(p)\n\nfalsy isPromise(s)\n\n# ---------------------------------------------------------------------------\n#symbol \"isClassInstance(obj)\"    # --- test if obj equal a class instance\n\ntruthy isClassInstance(o)\n\nfalsy isClassInstance(s)\n\n# ---------------------------------------------------------------------------\n#symbol \"escapeStr(str)\"\n\nequal escapeStr(\"\\t\\tabc def\"), \"→→abc˳def\"\nequal escapeStr(\"\\t\\tabc def\\r\\n\"), \"→→abc˳def←↓\"\nequal escapeStr(\"\\t\\tabc def\\r\\nghi\", 'escNoNL'), \"\"\"\n\t\t→→abc˳def←\n\t\tghi\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol \"OL(x)\"\n\nequal OL(undef), 'undef'\nequal OL(null), 'null'\nequal OL('abc def'), '\"abc˳def\"'\nequal OL([1,2]), '[1,2]'\nequal OL({a:1, b:2}), '{\"a\":1,\"b\":2}'\nequal OL({a:'a', b:'b'}), '{\"a\":\"a\",\"b\":\"b\"}'\n\n# ---------------------------------------------------------------------------\n#symbol \"CWS\"    # --- trim & collapse whitespace to ' '\n\nequal CWS(\"\"\"\n\n\t\tabc\n\t\tdef\n\t\t\t\tghi\n\n\t\t\"\"\"), \"abc def ghi\"\n\n# ---------------------------------------------------------------------------\n#symbol \"ML(x)\"\n\nequal ML(undef), '.undef.'\nequal ML(null), '.null.'\nequal ML(true), 'true'\nequal ML(false), 'false'\nequal ML('abc def'), '\"abc˳def\"'\nequal ML([1,2]), \"\"\"\n\t\t[\n\t\t\t1,\n\t\t\t2\n\t\t]\n\t\t\"\"\"\nequal ML({a:1, b:2}), \"\"\"\n\t\t{\n\t\t\t\"a\": 1,\n\t\t\t\"b\": 2\n\t\t}\n\t\t\"\"\"\nequal ML({a:'a', b:'b'}), \"\"\"\n\t\t{\n\t\t\t\"a\": \"a\",\n\t\t\t\"b\": \"b\"\n\t\t}\n\t\t\"\"\"\nequal ML({\n\t\tmeaning: 42\n\t\tparse: (str) => return 42\n\t\t}), \"\"\"\n\t{\n\t\t\"meaning\": 42,\n\t\t\"parse\": «Function parse»\n\t}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol \"OLS(lItems)\"\n\nequal OLS([[1,2], {a:1, b:2}]), '[1,2],{\"a\":1,\"b\":2}'\n\n# ---------------------------------------------------------------------------\n#symbol \"isEmpty(obj)\"\n\ntruthy isEmpty(undef)\ntruthy isEmpty(null)\ntruthy isEmpty('')\ntruthy isEmpty('   ')\ntruthy isEmpty([])\ntruthy isEmpty({})\n\nfalsy isEmpty(s)\nfalsy isEmpty(i)\nfalsy isEmpty(0)     # zero equal not empty!!!\nfalsy isEmpty(n)\nfalsy isEmpty(l)\nfalsy isEmpty(h)\n\n# ---------------------------------------------------------------------------\n#symbol \"nonEmpty(obj)\"\n\ntruthy nonEmpty(s)\ntruthy nonEmpty(i)\ntruthy nonEmpty(0)     # zero equal not empty!!!\ntruthy nonEmpty(n)\ntruthy nonEmpty(l)\ntruthy nonEmpty(h)\n\nfalsy nonEmpty(undef)\nfalsy nonEmpty(null)\nfalsy nonEmpty('')\nfalsy nonEmpty('   ')\nfalsy nonEmpty([])\nfalsy nonEmpty({})\n\n# ---------------------------------------------------------------------------\n#symbol \"chomp(str)\"    # --- remove trailing \\r and/or \\n\n\nequal chomp(\"abc\\n\"), \"abc\"\nequal chomp(\"abc\\r\\n\"), \"abc\"\n\n# ---------------------------------------------------------------------------\n#symbol \"hasKey(h, key)\"\n\ntruthy hasKey({a:1, b:2, c:3}, 'b')\n\nfalsy hasKey({a:1, c:3}, 'b')\n\n# ---------------------------------------------------------------------------\n#symbol \"removeKeys(h, lKeys)\"\n\nequal removeKeys({a:1, b:2, c:3}, ['b']), {a:1, c:3}\n\nhash = {\n\ta:1\n\tb:2\n\tc:3\n\tlItems: [{a:1, b:2}, {b:2, c:3}]\n\t}\nequal removeKeys(hash, ['b','c']), {\n\ta:1\n\tlItems: [{a:1}, {}]\n\t}\n\nhAST = {\n\tbody: [\n\t\t{\n\t\t\tdeclarations: Array [{start:0}],\n\t\t\tend: 11,\n\t\t\tkind: 'let',\n\t\t\tstart: 0,\n\t\t\ttype: 'VariableDeclaration',\n\t\t\t},\n\t\t],\n\tend: 11,\n\tsourceType: 'script',\n\tstart: 0,\n\ttype: 'Program',\n\t}\n\nequal(\n\tremoveKeys(hAST, ['start','end']), {\n\t\tbody: [\n\t\t\t{\n\t\t\t\tdeclarations: Array [{}],\n\t\t\t\tkind: 'let',\n\t\t\t\ttype: 'VariableDeclaration',\n\t\t\t\t},\n\t\t\t],\n\t\tsourceType: 'script',\n\t\ttype: 'Program',\n\t\t})\n\nhAST2 = {\n\tbody: [\n\t\t{\n\t\t\tdeclarations: Array [{start:0}],\n\t\t\tend: 12,\n\t\t\tkind: 'let',\n\t\t\tstart: 0,\n\t\t\ttype: 'VariableDeclaration',\n\t\t\t},\n\t\t],\n\tend: 12,\n\tsourceType: 'script',\n\tstart: 0,\n\ttype: 'Program',\n\t}\n\nequal(\n\tremoveKeys(hAST2, ['start','end']), {\n\tbody: [\n\t\t{\n\t\t\tdeclarations: Array [{}],\n\t\t\tkind: 'let',\n\t\t\ttype: 'VariableDeclaration',\n\t\t\t},\n\t\t],\n\tsourceType: 'script',\n\ttype: 'Program',\n\t})\n\n# ---------------------------------------------------------------------------\n#symbol \"blockToArray(block)\"    # --- split string on \\r?\\n\n\nequal blockToArray(''), []\nequal blockToArray(\"a\\nb\\nc\"), ['a','b','c']\nequal blockToArray(\"a\\r\\nb\\r\\nc\"), ['a','b','c']\n\nl = blockToArray(\"\"\"\n\tabc\n\tdef\n\t\"\"\")\nequal l, [\n\t'abc'\n\t'def'\n\t]\n\n# ---------------------------------------------------------------------------\n#symbol \"toArray(strOrArray)\"\n\nequal toArray(['a','b','c']), ['a','b','c']\nequal toArray(\"\"\"\n\tabc\n\tdef\n\t\"\"\"), ['abc','def']\n\n# ---------------------------------------------------------------------------\n#symbol \"arrayToBlock(lItems)\"    # --- join lines with \\n\n\nequal arrayToBlock(['a','b','c']), \"a\\nb\\nc\"\n\n# ---------------------------------------------------------------------------\n#symbol \"toBlock(strOrArray)\"\n\nequal toBlock(['a','b','c']), \"\"\"\n\ta\n\tb\n\tc\n\t\"\"\"\nequal toBlock(\"\"\"\n\tabc\n\tdef\n\t\"\"\"), \"\"\"\n\tabc\n\tdef\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol \"listdiff(lItems, lItemsToRemove)\"\n\nequal listdiff(['a','b','c','d'], ['a','d']), ['b','c']\n\n# ---------------------------------------------------------------------------\n#symbol \"untabify(str)\"    # --- convert TAB to n chars\n\nequal untabify(\"abc\\n\\tdef\"), \"abc\\n   def\"\n\n# ---------------------------------------------------------------------------\n#symbol \"splitPrefix(str)\"    # --- separate into indentation and rest\n\nequal splitPrefix(\"   abc\"), [\"   \",\"abc\"]\nequal splitPrefix(\"\\t\\tabc\"), [\"\\t\\t\",\"abc\"]\n\n# ---------------------------------------------------------------------------\n#symbol \"substrCount(str, substr)\"\n\nequal substrCount('   abc', ' '), 3\nequal substrCount('abcabcabc', 'ab'), 3\n\n# ---------------------------------------------------------------------------\n#symbol \"tabify(str)\"    # --- convert leading spaces to TABs\n\nstr = \"\"\"\n\tabc\n\t  def\n\t    ghi\n\t\"\"\"\n\nequal tabify(str), \"abc\\n\\tdef\\n\\t\\tghi\"\n\n# ---------------------------------------------------------------------------\n#symbol \"gen2array(generator)\"\n\nequal gen2array(g), ['a','b','c']\n\n# ---------------------------------------------------------------------------\n#symbol \"gen2block(generator)\"\n\nequal gen2block(g), \"\"\"\n\t\ta\n\t\tb\n\t\tc\n\t\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol \"spaces(n)\"    # --- create a string of n spaces\n\nequal spaces(3), '   '\n\n# ---------------------------------------------------------------------------\n#symbol \"tabs(n)\"    # --- create a string of n TAB chars\n\nequal tabs(3), \"\\t\\t\\t\"\n\n# ---------------------------------------------------------------------------\n#symbol \"centered(n)\"    # --- create a string of n TAB chars\n\nequal centered('abcdefg', 5), 'abcdefg'\nequal centered('abc', 5), ' abc '\nequal centered('ab', 10, {char:'-'}), '--  ab  --'\n\n# ---------------------------------------------------------------------------\n#symbol \"countChars(str, ch)\"\n\nequal countChars(\"abc,def\", \",\"), 1\nequal countChars(\",abc,def\", \",\"), 2\nequal countChars(\"abc,def,\", \",\"), 2\nequal countChars(\",abc,def,\", \",\"), 3\n\n# ---------------------------------------------------------------------------\n#symbol \"rtrim(str)\"\n\nequal rtrim(\"abc  \"), \"abc\"\nequal rtrim(\"abc\\t\\t\"), \"abc\"\nequal rtrim(\"abc \\t\"), \"abc\"\nequal rtrim(\"abc\"), \"abc\"\n\n# ---------------------------------------------------------------------------\n#symbol \"now()\"\n\nsucceeds () => now()\n\n# ---------------------------------------------------------------------------\n#symbol \"timeit(func, numReps=100)\"\n\nsucceeds () => timeit(() -> return 42)\n\n# ---------------------------------------------------------------------------\n#symbol \"behead(block)\"    # --- separate out first line\n\nequal behead(\"\"\"\n\t---\n\t- a\n\t- b\n\t\"\"\"), [\n\t\t'---'\n\t\t\"\"\"\n\t\t- a\n\t\t- b\n\t\t\"\"\"\n\t\t]\n\n# ---------------------------------------------------------------------------\n#symbol \"isTAML(block)\"    # --- must start with '---'\n\ntruthy isTAML('---\\n23')\ntruthy isTAML('---\\n{\\na:1\\n}')\n\nfalsy isTAML('abc')\n\n# ---------------------------------------------------------------------------\n#symbol \"fromTAML(block)\"\n\nequal fromTAML(\"\"\"\n\t---\n\t- a\n\t- b\n\t\"\"\"), [\n\t'a'\n\t'b'\n\t]\n\nequal fromTAML(\"\"\"\n\t---\n\ta: 1\n\t\"\"\"), {\n\ta: 1\n\t}\n\nequal fromTAML(\"\"\"\n\t---\n\ttype: tree\n\tbody:\n\t\t-\n\t\t\ttype: stmt\n\t\t\tident: abc\n\t\"\"\"), {\n\ttype: 'tree'\n\tbody: [\n\t\t{type: 'stmt', ident: 'abc'}\n\t\t]\n\t}\n\n# ---------------------------------------------------------------------------\n#symbol \"toTAML(ds)\"\n\nequal toTAML([1,2]), \"\"\"\n\t---\n\t- 1\n\t- 2\n\t\"\"\"\n\nequal toTAML({a:1, b:2}), \"\"\"\n\t---\n\ta: 1\n\tb: 2\n\t\"\"\"\n\nequal toTAML([13, {key: 'fName', value: 'John'}]), \"\"\"\n\t---\n\t- 13\n\t- key: fName\n\t\tvalue: John\n\t\"\"\"\n# ---------------------------------------------------------------------------\n#symbol \"sliceBlock(block)\"\n\n(() =>\n\tblock = \"\"\"\n\t\taaa\n\t\tbbb\n\t\tccc\n\t\tddd\n\t\teee\n\t\t\"\"\"\n\n\tequal sliceBlock(block, 0, 3), \"\"\"\n\t\taaa\n\t\tbbb\n\t\tccc\n\t\t\"\"\"\n\n\tequal sliceBlock(block, 1, 4), \"\"\"\n\t\tbbb\n\t\tccc\n\t\tddd\n\t\t\"\"\"\n\n\tequal sliceBlock(block, 3, 4), \"\"\"\n\t\tddd\n\t\t\"\"\"\n)()\n\n# ---------------------------------------------------------------------------\n#symbol \"sortArrayOfHashes(lHashes)\"\n\n(() =>\n\tequal sortArrayOfHashes([\n\t\t{a:1}\n\t\t{a:3}\n\t\t{a:2}\n\t\t], 'a'), [\n\t\t{a:1}\n\t\t{a:2}\n\t\t{a:3}\n\t\t]\n\n\tequal sortArrayOfHashes([\n\t\t{name: 'John', age: 71}\n\t\t{name: 'Arathi', age: 35}\n\t\t{name: 'Lewis', age: 33}\n\t\t{name: 'Ben', age: 39}\n\t\t], 'name'), [\n\t\t{name: 'Arathi', age: 35}\n\t\t{name: 'Ben', age: 39}\n\t\t{name: 'John', age: 71}\n\t\t{name: 'Lewis', age: 33}\n\t\t]\n\n\tequal sortArrayOfHashes([\n\t\t{name: 'John', age: 71}\n\t\t{name: 'Arathi', age: 35}\n\t\t{name: 'Lewis', age: 33}\n\t\t{name: 'Ben', age: 39}\n\t\t], 'age'), [\n\t\t{name: 'Lewis', age: 33}\n\t\t{name: 'Arathi', age: 35}\n\t\t{name: 'Ben', age: 39}\n\t\t{name: 'John', age: 71}\n\t\t]\n\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"cmdArgStr(lArgs=undef)\"\n\nequal cmdArgStr([\"-cmd=doit\"]), '-cmd=doit'\nequal cmdArgStr([\"-cmd=echo <file>\"]), '-cmd=\"echo <file>\"'\nequal cmdArgStr([\"something\"]), 'something'\nequal cmdArgStr([\"some thing\"]), '\"some thing\"'\nequal cmdArgStr([\n\t\"-cmd=doit\"\n\t\"-cmd=echo <file>\"\n\t\"something\"\n\t\"some thing\"\n\t]), \"\"\"\n\t-cmd=doit -cmd=\"echo <file>\" something \"some thing\"\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol rpad(str, len, ch)\n\nequal rpad('abc', 5), 'abc  '\n\n# ---------------------------------------------------------------------------\n#symbol lpad(str, len, ch)\n\nequal lpad('abc', 5), '  abc'\n\n# ---------------------------------------------------------------------------\n#symbol zpad(str, len, ch)\n\nequal zpad(3, 5), '00003'\n\n# ---------------------------------------------------------------------------\n#symbol findOneOf(str, lChars, pos)\n\nequal findOneOf('abcde', ['b','d']), 1\nequal findOneOf('abcde', ['b','e']), 1\nequal findOneOf('ace', ['b','e']), 2\nequal findOneOf('acd', ['b','e']), -1\n\nequal findOneOf('some thing DO {xxx} CHECK {xxx} yyy', ['CHECK']), 20\nequal findOneOf('some thing DO {xxx} CHECK {xxx} yyy', ['DO']), 11\nequal findOneOf('some thing DO {xxx} CHECK {xxx} yyy', ['CHECK','DO']), 11\nequal findOneOf('some thing DO {xxx} CHECK {xxx} yyy', ['DO','CHECK']), 11\n\n# ---------------------------------------------------------------------------\n#symbol matchPos(str, pos)\n\nequal matchPos(\"(where f() = '23')\"), 17\nequal matchPos(\"{return addContext(result[1])}\"), 29\nequal matchPos(\"{return popContext()}\"), 20\nequal matchPos(\"some text {return addContext(result[1])}\", 10), 39\nequal matchPos(\"some text {return popContext()}\", 10), 30\n\nfails () => matchPos(\"(missing\", 0)\nfails () => matchPos(\"(miss()ing\", 0)\nequal matchPos(\"(miss()ing\", 5), 6\n\n# ---------------------------------------------------------------------------\n#symbol splitString(str, func) - func is (pos, str) => [extract, newpos]\n\n(() =>\n\tsplitter = (str) =>\n\t\ti = str.indexOf('DO')\n\t\tif (i == -1)\n\t\t\treturn [str.trim() || undef, str.length]\n\t\telse if (i == 0)\n\t\t\treturn ['DO', 2]\n\t\telse\n\t\t\treturn [str.substring(0, i).trim() || undef, i]\n\n\tequal splitStr('abc', splitter), ['abc']\n\tequal splitStr('abcDOxyz', splitter), ['abc','DO','xyz']\n\tequal splitStr('abc DO xyz', splitter), ['abc','DO','xyz']\n\tequal splitStr('DO   ', splitter), ['DO']\n\tequal splitStr('   DO', splitter), ['DO']\n\tequal splitStr('   DO   ', splitter), ['DO']\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol cleanHash(h) - removes empty values\n\nequal cleanHash({a:1, b:undef, c:[], d:{}, e:'   '}), {a:1}\n\n# ---------------------------------------------------------------------------\n#symbol setsAreEqual(a, b)\n\ntruthy setsAreEqual(new Set([1,2,3]), new Set([1,3,2]))\nfalsy  setsAreEqual(new Set([1,2,3]), new Set([1,2,4]))\nfalsy  setsAreEqual(new Set([1,2,3]), new Set([1,2,3,4]))\n\n# ---------------------------------------------------------------------------\n#symbol tla(stub)\n\nequal tla('low-level-build'), 'llb'\n"
  ]
}