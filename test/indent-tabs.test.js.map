{
  "version": 3,
  "file": "indent-tabs.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\indent-tabs.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# indent.tabs.test.coffee\n\nimport {undef, spaces, tabs} from '@jdeighan/llutils'\nimport * as lib from '@jdeighan/llutils/indent'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\n# USE TABS\n\n# ---------------------------------------------------------------------------\n#symbol \"indentLevel(str)\"\n\n(() =>\n\tequal indentLevel('abc'), 0\n\tequal indentLevel('\\tabc'), 1\n\tequal indentLevel('\\t\\tabc'), 2\n\tfails () => indentLevel('\\t abc')\n\tfails () => indentLevel(' \\tabc')\n\tequal indentLevel('abc'), 0\n\t)()\n\n(() =>\n\tequal indentLevel('abc'), 0\n\tequal indentLevel('\\tabc'), 1\n\tequal indentLevel('\\t\\tabc'), 2\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"splitLine(line, oneIndent)\"\n\n(() =>\n\tequal splitLine('abc'), [0, 'abc']\n\tequal splitLine('\\t\\tabc'), [2, 'abc']\n\t)()\n\n(() =>\n\tequal splitLine('\\tabc'), [1, 'abc']\n\n\t# --- fails since we're now expecting TABs\n\tfails () =>  splitLine('      abc')\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"indented(input, level, oneIndent)\"\n\n(() =>\n\tequal indented('abc'), '\\tabc'\n\tequal indented('abc', 2), '\\t\\tabc'\n\t)()\n\n(() =>\n\tequal indentLevel('\\tabc'), 1\n\tequal indented('abc', 2), tabs(2) + 'abc'\n\t)()\n\n# --- Test with blocks\n\n(() =>\n\tequal indented(\"\"\"\n\t\tfirst line\n\t\t\\tsecond line\n\t\t\\t\\tthird line\n\t\t\"\"\"), \"\"\"\n\t\t\\tfirst line\n\t\t\\t\\tsecond line\n\t\t\\t\\t\\tthird line\n\t\t\"\"\"\n\n\tequal indented(\"\"\"\n\t\tfirst line\n\t\t\\tsecond line\n\t\t\\t\\tthird line\n\t\t\"\"\", 2), \"\"\"\n\t\t\\t\\tfirst line\n\t\t\\t\\t\\tsecond line\n\t\t\\t\\t\\t\\tthird line\n\t\t\"\"\"\n\n\t# --- Test with arrays\n\n\tequal indented([\n\t\t'first line'\n\t\t'\\tsecond line'\n\t\t'\\t\\tthird line'\n\t\t]), [\n\t\t'\\tfirst line'\n\t\t'\\t\\tsecond line'\n\t\t'\\t\\t\\tthird line'\n\t\t]\n\n\tequal indented([\n\t\t'first line'\n\t\t'\\tsecond line'\n\t\t'\\t\\tthird line'\n\t\t], 2), [\n\t\t'\\t\\tfirst line'\n\t\t'\\t\\t\\tsecond line'\n\t\t'\\t\\t\\t\\tthird line'\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"undented(input)\"\n(() =>\n\tequal undented(\"\"\"\n\t\t\\tabc\n\t\t\\t\\tdef\n\t\t\\t\\t\\tghi\n\t\t\"\"\"), \"\"\"\n\t\tabc\n\t\t\\tdef\n\t\t\\t\\tghi\n\t\t\"\"\"\n\t)()\n"
  ]
}