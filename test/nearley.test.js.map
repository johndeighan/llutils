{
  "version": 3,
  "file": "nearley.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\nearley.test.coffee"
  ],
  "names": [],
  "mappings": "AAAqB;AAErB,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB;;AACA,OAAO,CAAA,QAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,IAAtB,EANqB;;;;AAWrB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAA;;;;;;;;;;;;;;;KAAA;EAkBP,MAAA,GAAS,WAAA,CAAY,IAAZ;SACT,KAAA,CAAM,MAAN,EAAc,CAAA;;;;;;;;;;iBAAA,CAAd;AApBA,CAAD,CAAA,CAAA;;AAmCA,CAAC,CAAA,CAAA,GAAA;AACD,MAAA,IAAA,EAAA;EAAC,IAAA,GAAO,CAAA;;;;;;;;;;;;;;;;;KAAA;EAoBP,MAAA,GAAS,WAAA,CAAY,IAAZ;SACT,KAAA,CAAM,MAAN,EAAc,CAAA;;;;;;;;;;;;iBAAA,CAAd;AAtBA,CAAD,CAAA,CAAA,EA9CqB;;;;AAwFrB,QAAA,CAAS,CAAA,CAAA,GAAA;SAAM,WAAA,CAAY,CAAA;;;;;;;IAAA,CAAZ,EAUd;IAAC,IAAA,EAAM;EAAP,CAVc,EAWd,KAXc,EAYd;IAAC,KAAA,EAAO;EAAR,CAZc;AAAN,CAAT,EAxFqB;;;;AA0GrB,CAAC,KAAA,CAAA,CAAA,GAAA;AACD,MAAA,QAAA,EAAA;EAAC,QAAA,GAAW;EACX,SAAA,GAAY,CAAA,MAAM,gBAAA,CAAiB,KAAjB,EAAwB,QAAxB,EAAkC,OAAlC,CAAN;SACZ,GAAA,CAAI,SAAJ;AAHA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# nearley.test.coffee\n\nimport {undef} from '@jdeighan/llutils'\nimport * as lib from '@jdeighan/llutils/nearley'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\n# ---------------------------------------------------------------------------\n#symbol \"fixNearlyJs(jsCode)\n\n(() =>\n\tcode = \"\"\"\n\t\t// Generated automatically by nearley\n\t\t// http://github.com/Hardmath123/nearley\n\t\t(function() {\n\t\t  var grammar, id;\n\t\t  id = function(d) {\n\t\t\t return d[0];\n\t\t  };\n\t\t  grammar = {\n\t\t\t Lexer: void 0,\n\t\t  };\n\t\t  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t\t return module.exports = grammar;\n\t\t  } else {\n\t\t\t return window.grammar = grammar;\n\t\t  }\n\t\t})();\n\t\t\"\"\"\n\tresult = fixNearlyJs(code)\n\tequal result, \"\"\"\n\t\t// Generated automatically by nearley\n\t\t// http://github.com/Hardmath123/nearley\n\n\t\t  var grammar, id;\n\t\t  id = function(d) {\n\t\t\t return d[0];\n\t\t  };\n\t\t  grammar = {\n\t\t\t Lexer: void 0,\n\t\t  };\n\t\texport {grammar};\n\t\t\"\"\"\n\t)()\n\n(() =>\n\tcode = \"\"\"\n\t\t// Generated automatically by nearley, version unknown\n\t\t// http://github.com/Hardmath123/nearley\n\t\t(function () {\n\t\tfunction id(x) { return x[0]; }\n\t\tvar grammar = {\n\t\t\t Lexer: undefined,\n\t\t\t ParserRules: [\n\t\t\t {\"name\": \"a$string$1\", \"symbols\": [{\"literal\":\"a\"}, {\"literal\":\"b\"}, {\"literal\":\"c\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n\t\t\t {\"name\": \"a\", \"symbols\": [\"a$string$1\"]}\n\t\t]\n\t\t  , ParserStart: \"a\"\n\t\t}\n\t\tif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n\t\t\tmodule.exports = grammar;\n\t\t} else {\n\t\t\twindow.grammar = grammar;\n\t\t}\n\t\t})();\n\t\t\"\"\"\n\tresult = fixNearlyJs(code)\n\tequal result, \"\"\"\n\t\t// Generated automatically by nearley, version unknown\n\t\t// http://github.com/Hardmath123/nearley\n\n\t\tfunction id(x) { return x[0]; }\n\t\tvar grammar = {\n\t\t\t Lexer: undefined,\n\t\t\t ParserRules: [\n\t\t\t {\"name\": \"a$string$1\", \"symbols\": [{\"literal\":\"a\"}, {\"literal\":\"b\"}, {\"literal\":\"c\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n\t\t\t {\"name\": \"a\", \"symbols\": [\"a$string$1\"]}\n\t\t]\n\t\t  , ParserStart: \"a\"\n\t\t}\n\t\texport {grammar};\n\t\t\"\"\"\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"procNearley(code, hMeta, hOptions)\"    # --- compile nearley code\n\nsucceeds () => procNearley(\"\"\"\n\tstart -> \"abc\" {%\n\t\t(data) =>\n\t\t\treturn 42\n\t\t\t%}\n\tstart -> \"def\" {%\n\t\t(data) =>\n\t\t\treturn 13\n\t\t\t%}\n\t\"\"\",\n\t{type: 'coffee'},\n\tundef,\n\t{debug: true}\n\t)\n\n# ---------------------------------------------------------------------------\n#symbol \"getNearleyParser(code, hMeta, hOptions)\"\n\n(() =>\n\texprPath = './test/nearley/expr.ne'\n\tparseExpr = await getNearleyParser(undef, exprPath, 'debug')\n\tLOG parseExpr\n\t)()\n"
  ]
}