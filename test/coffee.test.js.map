{
  "version": 3,
  "file": "coffee.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\coffee.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# coffee.test.coffee\n\nimport {undef, isString} from '@jdeighan/llutils'\nimport {slurp} from '@jdeighan/llutils/fs'\nimport {TextBlockList} from '@jdeighan/llutils/text-block'\nimport * as lib from '@jdeighan/llutils/coffee'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\n# ---------------------------------------------------------------------------\n#symbol \"brew(code)\"\n\nsucceeds () => brew('v = 5')\nfails () => brew('let v = 5')\nequal brew('v = 5').js, \"\"\"\n\tvar v;\n\n\tv = 5;\n\t\"\"\"\n\nequal brew('v = 5', {shebang: true}).js, \"\"\"\n\t#!/usr/bin/env node\n\tvar v;\n\n\tv = 5;\n\t\"\"\"\n\nequal brew('v = 5', {shebang: 'abc'}).js, \"\"\"\n\tabc\n\tvar v;\n\n\tv = 5;\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n#symbol \"toAST(code)\"\n\nsucceeds () => toAST('v = 5')\nfails () => toAST('let v = 5')\n\n# ---------------------------------------------------------------------------\n#symbol \"basicInfo(astOrCode)\"\n\n(() =>\n\tt = new UnitTester()\n\tt.transformValue = (code) ->\n\t\treturn basicInfo(code).lMissing || []\n\n\tt.samelist \"\"\"\n\t\timport {undef} from '@jdeighan/llutils'\n\t\t\"\"\", []\n\n\tt.samelist \"\"\"\n\t\timport {undef} from '@jdeighan/llutils'\n\t\timport {LOG} from '@jdeighan/llutils/log'\n\t\t\"\"\", []\n\n\tt.samelist \"\"\"\n\t\tx = a\n\t\t\"\"\", ['a']\n\n\tt.samelist \"\"\"\n\t\timport {a} from 'xyz'\n\t\tx = a\n\t\t\"\"\", []\n\n\tt.samelist \"\"\"\n\t\timport {a} from 'xyz'\n\t\tx = a\n\t\t\"\"\", []\n\n\tt.samelist \"\"\"\n\t\tn = 23\n\t\t\"\"\", []\n\n\tt.samelist \"\"\"\n\t\tn = 23\n\t\tx = n\n\t\t\"\"\", []\n\n\tt.samelist \"\"\"\n\t\timport {f} from 'xyz'\n\n\t\tfunc = () =>\n\t\t\tf(x,y)\n\n\t\tf(a,b)\n\t\t\"\"\", ['x','y','a','b']\n\n\tt.samelist \"\"\"\n\t\tif (f() == undef)\n\t\t\tconsole.log \"Not defined\"\n\t\t\"\"\", ['f', 'undef', 'console']\n\n\tt.samelist \"\"\"\n\t\tx = x + y\n\t\t\"\"\", ['x', 'y']\n\n\tt.samelist \"\"\"\n\t\tfunc = () =>\n\t\t\tf(x,y)\n\t\t\"\"\", ['x','y','f']\n\n\tt.samelist \"\"\"\n\t\tfunc = () =>\n\t\t\tf(x,y)\n\t\tf = (m,n) =>\n\t\t\tconsole.log 'OK'\n\t\t\"\"\", ['x','y','console']\n\n\t)()\n\n# ---------------------------------------------------------------------------\n\nfilePath = \"test/brew/test.coffee\"\ncode = slurp filePath\n\ntruthy isString(code)\n\nblocks = new TextBlockList()\nblocks.addBlock filePath, code\n\n{orgCode, js} = brew code\ntruthy (orgCode == code)\n\nblocks.addBlock 'JavaScript', js\n\nequal blocks.asString('format=box'), '''\n\t┌────────  test/brew/test.coffee  ─────────┐\n\t│ import {undef} from '@jdeighan/llutils'  │\n\t│                                          │\n\t│ hAST = {                                 │\n\t│    type: 'program'                       │\n\t│    name: 'John'                          │\n\t│    }                                     │\n\t│                                          │\n\t│ equal extract(hAST, \"\"\"                  │\n\t│    type=\"program\"                        │\n\t│    \"\"\"), {name: 'John'}                  │\n\t│                                          │\n\t├──────────────  JavaScript  ──────────────┤\n\t│ var hAST;                                │\n\t│                                          │\n\t│ import {                                 │\n\t│   undef                                  │\n\t│ } from '@jdeighan/llutils';              │\n\t│                                          │\n\t│ hAST = {                                 │\n\t│   type: 'program',                       │\n\t│   name: 'John'                           │\n\t│ };                                       │\n\t│                                          │\n\t│ equal(extract(hAST, `type=\"program\"`), { │\n\t│   name: 'John'                           │\n\t│ });                                      │\n\t└──────────────────────────────────────────┘\n\t'''\n"
  ]
}