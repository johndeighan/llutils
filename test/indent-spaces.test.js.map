{
  "version": 3,
  "file": "indent-spaces.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\indent-spaces.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# indent.spaces.test.coffee\n\nimport {undef, spaces, tabs} from '@jdeighan/llutils'\nimport * as lib from '@jdeighan/llutils/indent'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\n# USE 3 SPACES\n\n# ---------------------------------------------------------------------------\n#symbol \"indentLevel(str)\"\n\n(() =>\n\tequal indentLevel('abc'), 0\n\tequal indentLevel('   abc'), 1\n\tequal indentLevel('      abc'), 2\n\tfails () => indentLevel('\\t abc')\n\tfails () => indentLevel(' \\tabc')\n\tequal indentLevel('abc'), 0\n\t)()\n\n(() =>\n\tequal indentLevel('abc'), 0\n\tequal indentLevel('   abc'), 1\n\tequal indentLevel('      abc'), 2\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"splitLine(line, oneIndent)\"\n\n(() =>\n\tequal splitLine('abc'), [0, 'abc']\n\tequal splitLine('      abc'), [2, 'abc']\n\t)()\n\n(() =>\n\tequal splitLine('   abc'), [1, 'abc']\n\n\t# --- fails since we're now expecting spaces\n\tfails () =>  splitLine('\\t\\tabc')\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"indented(input, level, oneIndent)\"\n\n(() =>\n\tequal indented('abc'), '   abc'\n\tequal indented('abc', 2), '      abc'\n\t)()\n\n(() =>\n\tequal indentLevel('   abc'), 1\n\tequal indented('abc', 2), spaces(6) + 'abc'\n\t)()\n\n# --- Test with blocks\n\n(() =>\n\tequal indented(\"\"\"\n\t\tfirst line\n\t\t   second line\n\t\t      third line\n\t\t\"\"\"), \"\"\"\n\t\t#{spaces(3)}first line\n\t\t      second line\n\t\t         third line\n\t\t\"\"\"\n\n\tequal indented(\"\"\"\n\t\tfirst line\n\t\t   second line\n\t\t      third line\n\t\t\"\"\", 2), \"\"\"\n\t\t#{spaces(6)}first line\n\t\t         second line\n\t\t            third line\n\t\t\"\"\"\n\n\t# --- Test with arrays\n\n\tequal indented([\n\t\t'first line'\n\t\t'   second line'\n\t\t'      third line'\n\t\t]), [\n\t\t'   first line'\n\t\t'      second line'\n\t\t'         third line'\n\t\t]\n\n\tequal indented([\n\t\t'first line'\n\t\t'   second line'\n\t\t'      third line'\n\t\t], 2), [\n\t\t'      first line'\n\t\t'         second line'\n\t\t'            third line'\n\t\t]\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"undented(input)\"\n(() =>\n\tequal undented(\"\"\"\n\t\t#{spaces(6)}abc\n\t\t         def\n\t\t            ghi\n\t\t\"\"\"), \"\"\"\n\t\tabc\n\t\t   def\n\t\t      ghi\n\t\t\"\"\"\n\t)()\n"
  ]
}