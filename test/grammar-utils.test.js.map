{
  "version": 3,
  "file": "grammar-utils.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\grammar-utils.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# grammar-utils.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined,\r\n\t} from '@jdeighan/llutils'\r\nimport * as lib from '@jdeighan/llutils/grammar-utils'\r\nObject.assign(global, lib)\r\nimport {\r\n\tterminal, nonterminal, RuleEx,\r\n\t} from '@jdeighan/llutils/rule-ex'\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\n(() =>\r\n\thAST = {\r\n\t\ttype: \"grammar\"\r\n\t\tlRules: [\r\n\t\t\t{\r\n\t\t\t\ttype: \"rule\"\r\n\t\t\t\thead: \"E\"\r\n\t\t\t\tlParts: [\r\n\t\t\t\t\tnonterminal \"T\"\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: \"rule\"\r\n\t\t\t\thead: \"E\"\r\n\t\t\t\tlParts: [\r\n\t\t\t\t\tnonterminal \"E\"\r\n\t\t\t\t\tterminal    \"+\"\r\n\t\t\t\t\tnonterminal \"T\"\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: \"rule\"\r\n\t\t\t\thead: \"T\"\r\n\t\t\t\tlParts: [\r\n\t\t\t\t\tnonterminal \"P\"\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: \"rule\"\r\n\t\t\t\thead: \"T\"\r\n\t\t\t\tlParts: [\r\n\t\t\t\t\tnonterminal \"T\"\r\n\t\t\t\t\tterminal    \"*\"\r\n\t\t\t\t\tnonterminal \"P\"\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: \"rule\"\r\n\t\t\t\thead: \"P\"\r\n\t\t\t\tlParts: [\r\n\t\t\t\t\tterminal \"a\"\r\n\t\t\t\t\t]\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t}\r\n\r\n\tgrammar = undef\r\n\tsucceeds () =>\r\n\t\tgrammar = new Grammar(hAST)\r\n\ttruthy grammar.isNonTerminal 'E'\r\n\ttruthy grammar.isNonTerminal 'T'\r\n\tfalsy  grammar.isNonTerminal 'X'\r\n\r\n\ttruthy grammar instanceof Grammar\r\n\tequal grammar.root(), \"E\"\r\n\tequal grammar.asString(), \"\"\"\r\n\t\tE -> T\r\n\t\tE -> E \"+\" T\r\n\t\tT -> P\r\n\t\tT -> T \"*\" P\r\n\t\tP -> \"a\"\r\n\t\t\"\"\"\r\n\tnRules = 0\r\n\tfor rule from grammar.alternatives(\"T\")\r\n\t\tnRules = nRules + 1\r\n\t\tequal rule.head, \"T\"\r\n\tequal nRules, 2\r\n\r\n\t# --- T -> T * P\r\n\trx = new RuleEx(grammar.getRule(3), 0)\r\n\tequal rx.pos, 0\r\n\r\n\trx2 = rx3 = rx4 = rx5 = undef\r\n\r\n\tsucceeds () => rx2 = rx.getInc()\r\n\tequal rx2.pos, 1\r\n\r\n\tsucceeds () => rx3 = rx2.getInc()\r\n\tsucceeds () => rx4 = rx3.getInc()\r\n\tequal rx4.pos, 3\r\n\r\n\tfails () => rx5 = rx4.getInc()\r\n\r\n\tparser = undef\r\n\tsucceeds () => parser = new EarleyParser(hAST)\r\n#\tsucceeds () => parser.parse(\"a+a*a\")\r\n\t)()\r\n\r\n"
  ]
}