{
  "version": 3,
  "file": "digraph.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\digraph.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# digraph.test.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, assert, croak,\r\n\t} from '@jdeighan/llutils'\r\nimport * as lib from '@jdeighan/llutils/digraph'\r\nObject.assign(global, lib)\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\n\r\n# ---------------------------------------------------------------------------\r\n#symbol \"DiGraph\"\r\n\r\n(() =>\r\n\tdep = new DiGraph()\r\n\tdep.add 'a', ['b']\r\n\tdep.add 'b', ['c']\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"c b a\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"a\" -> \"b\"\r\n\t\t\t\"b\" -> \"c\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n(() =>\r\n\tdep = new DiGraph()\r\n\tdep.add 'a', ['b','c']\r\n\tdep.add 'b', ['d']\r\n\tdep.add 'c', ['d']\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"d c b a\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"a\" -> \"b\"\r\n\t\t\t\"a\" -> \"c\"\r\n\t\t\t\"b\" -> \"d\"\r\n\t\t\t\"c\" -> \"d\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n(() =>\r\n\tdep = new DiGraph()\r\n\tdep.add 'a', ['b','c']\r\n\tdep.add 'b', ['f','d']\r\n\tdep.add 'c', ['d','e']\r\n\tdep.add 'f', ['g']\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"g e d f c b a\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"a\" -> \"b\"\r\n\t\t\t\"a\" -> \"c\"\r\n\t\t\t\"b\" -> \"f\"\r\n\t\t\t\"b\" -> \"d\"\r\n\t\t\t\"c\" -> \"d\"\r\n\t\t\t\"c\" -> \"e\"\r\n\t\t\t\"f\" -> \"g\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# --- test adding additional, transitive dependencies\r\n\r\n(() =>\r\n\tdep = new DiGraph()\r\n\tdep.add 'a', ['b','c','e','f','g']\r\n\tdep.add 'b', ['f','d']\r\n\tdep.add 'c', ['d','e']\r\n\tdep.add 'f', ['g']\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"g e d f c b a\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"a\" -> \"b\"\r\n\t\t\t\"a\" -> \"c\"\r\n\t\t\t\"b\" -> \"f\"\r\n\t\t\t\"b\" -> \"d\"\r\n\t\t\t\"c\" -> \"d\"\r\n\t\t\t\"c\" -> \"e\"\r\n\t\t\t\"f\" -> \"g\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# --- test normalizing keys and dependencies\r\n\r\n(() =>\r\n\tdep = new DiGraph({\r\n\t\tnormalize: (s) => return s.toUpperCase().repeat(2)\r\n\t\t})\r\n\tdep.add 'a', ['b','c','e','f','g']\r\n\tdep.add 'b', ['f','d']\r\n\tdep.add 'c', ['d','e']\r\n\tdep.add 'f', ['g']\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"GG EE DD FF CC BB AA\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"AA\" -> \"BB\"\r\n\t\t\t\"AA\" -> \"CC\"\r\n\t\t\t\"BB\" -> \"FF\"\r\n\t\t\t\"BB\" -> \"DD\"\r\n\t\t\t\"CC\" -> \"DD\"\r\n\t\t\t\"CC\" -> \"EE\"\r\n\t\t\t\"FF\" -> \"GG\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# --- test filtering dependencies\r\n\r\n(() =>\r\n\tdep = new DiGraph({\r\n\t\tnormalize: (s) => return s.toUpperCase().repeat(2)\r\n\t\tfilterDep: (s) => (s != 'd')\r\n\t\t})\r\n\tdep.add 'a', ['b','c','e','f','g']\r\n\tdep.add 'b', ['f','d']\r\n\tdep.add 'c', ['d','e']\r\n\tdep.add 'f', ['g']\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"GG EE FF CC BB AA\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"AA\" -> \"BB\"\r\n\t\t\t\"AA\" -> \"CC\"\r\n\t\t\t\"BB\" -> \"FF\"\r\n\t\t\t\"CC\" -> \"EE\"\r\n\t\t\t\"FF\" -> \"GG\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# --- allow simple string as a dependency\r\n\r\n(() =>\r\n\tdep = new DiGraph()\r\n\tdep.add 'a', 'b'\r\n\tdep.add 'b', 'c'\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"c b a\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"a\" -> \"b\"\r\n\t\t\t\"b\" -> \"c\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# --- node types, styles\r\n\r\n(() =>\r\n\tdep = new DiGraph({\r\n\t\thStyles: {\r\n\t\t\tcoffee: ' [color=red]'\r\n\t\t\tpeggy:  ' [color=blue]'\r\n\t\t\t}\r\n\t\t})\r\n\tdep.add 'a', 'b', {nodeType: 'coffee'}\r\n\tdep.add 'b', 'c', {nodeType: 'peggy'}\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"c b a\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"a\" [color=red]\r\n\t\t\t\"a\" -> \"b\"\r\n\t\t\t\"b\" [color=blue]\r\n\t\t\t\"b\" -> \"c\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n# --- node types, styles as hash\r\n\r\n(() =>\r\n\tdep = new DiGraph({\r\n\t\thStyles: {\r\n\t\t\tcoffee: {color: 'red'}\r\n\t\t\tpeggy:  {color: 'blue'}\r\n\t\t\t}\r\n\t\t})\r\n\tdep.add 'a', 'b', {nodeType: 'coffee'}\r\n\tdep.add 'b', 'c', {nodeType: 'peggy'}\r\n\tequal dep.getBuildOrder().join(' '),\r\n\t\t\"c b a\"\r\n\tequal dep.dotProgram(), \"\"\"\r\n\t\tdigraph {\r\n\t\t\t\"a\" [color=red]\r\n\t\t\t\"a\" -> \"b\"\r\n\t\t\t\"b\" [color=blue]\r\n\t\t\t\"b\" -> \"c\"\r\n\t\t\t}\r\n\t\t\"\"\"\r\n\t)()\r\n\r\n"
  ]
}