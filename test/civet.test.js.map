{
  "version": 3,
  "file": "civet.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\civet.test.coffee"
  ],
  "names": [],
  "mappings": "AAAmB;AAAA,IAAA;;AAEnB,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB;;AACA,OAAO,CAAA,QAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,IAAtB,EALmB;;;;;;;;;;AAgBnB,CAAA,GAAI,IAAI,UAAJ,CAAA;;AACJ,CAAC,CAAC,cAAF,GAAmB,MAAA,QAAA,CAAC,GAAD,CAAA;AACnB,MAAA;AAAC;AACC,WAAO,CAAA,MAAM,SAAA,CAAU,GAAV,CAAN,EADR;GAEA,aAAA;IAAM;AACL,WAAO,CAAA,CAAA,GAAA;aAAM,KAAA,CAAM,CAAA,UAAA,CAAA,CAAa,EAAA,CAAG,GAAH,CAAb,CAAA,CAAN;IAAN,EADR;;AAHkB,EAjBA;;;AAyBnB,CAAC,CAAC,KAAF,CAAQ,CAAA;;KAAA,CAAR;;AAMA,CAAC,CAAC,KAAF,CAAQ,CAAA;;;UAAA,CAAR;;AAOA,CAAC,CAAC,KAAF,CAAQ,CAAA;KAAA,CAAR,EAGM,EAHN;;AAKA,CAAC,CAAC,KAAF,CAAQ,CAAA;KAAA,CAAR,EAGM,EAHN;;AAKA,CAAC,CAAC,KAAF,CAAQ,CAAA;KAAA,CAAR,EAGM,EAHN;;AAKA,CAAC,CAAC,KAAF,CAAQ,CAAA;;kCAAA,CAAR,EAIM,EAJN;;AAMA,CAAC,CAAC,KAAF,CAAQ,CAAA;;;KAAA,CAAR,EAKM,EALN,EA3DmB;;;AAoEnB,CAAC,CAAC,KAAF,CAAQ,CAAA;;;;;UAAA,CAAR,EAOM,EAPN,EApEmB;;;AA+EnB,CAAC,CAAC,KAAF,CAAQ,CAAA;;;;UAAA,CAAR,EAMM,EANN",
  "sourcesContent": [
    "# civet.test.coffee\r\n\r\nimport * as lib from '@jdeighan/llutils/civet'\r\nObject.assign(global, lib)\r\nimport * as lib2 from '@jdeighan/llutils/utest'\r\nObject.assign(global, lib2)\r\n\r\n# ---------------------------------------------------------------------------\r\n#symbol \"execCivet(str)\"    # --- execute civet code\r\n\r\n# equal await execCivet('let x = 42; x'), 42\r\n# equal await execCivet('let x = \"Hello World\"; x'), \"Hello World\"\r\n# fails () => await execCivet(\"not real JS code +\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nu = new UnitTester()\r\nu.transformValue = (str) ->\r\n\ttry\r\n\t\treturn await execCivet(str)\r\n\tcatch err\r\n\t\treturn () => croak(\"Bad code: #{OL(str)}\")\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nu.fails \"\"\"\r\n\t# --- must declare variables\r\n\tx = 42\r\n\t2 * x\r\n\t\"\"\"\r\n\r\nu.fails \"\"\"\r\n\t# --- can't redefine variables in same scope\r\n\tlet x = 42\r\n\t2 * x\r\n\tlet x = 13\r\n\t\"\"\"\r\n\r\nu.equal \"\"\"\r\n\tlet x = 42\r\n\t2 * x\r\n\t\"\"\", 84\r\n\r\nu.equal \"\"\"\r\n\tconst x = 42\r\n\t2 * x\r\n\t\"\"\", 84\r\n\r\nu.equal \"\"\"\r\n\tvar x = 42\r\n\t2 * x\r\n\t\"\"\", 84\r\n\r\nu.equal \"\"\"\r\n\t# --- comment ok here\r\n\tlet x = 42   # --- comment ok here\r\n\t2 * x        #     comment ok here\r\n\t\"\"\", 84\r\n\r\nu.equal \"\"\"\r\n\tlet x = 42\r\n\tx\r\n\t__END__\r\n\t2 * x\r\n\t\"\"\", 42\r\n\r\n# --- multi-line strings are delimited by \\n with no trailing \\n\r\n\r\nu.equal \"\"\"\r\n\tlet str = '''\r\n\t\tline 1\r\n\t\tline 2\r\n\t\t'''\r\n\r\n\tstr.length\r\n\t\"\"\", 13\r\n\r\n# --- HEREDOC syntax\r\n\r\nu.equal \"\"\"\r\n\tlet str = <<<\r\n\t\tline 1\r\n\t\tline 2\r\n\r\n\tstr.length\r\n\t\"\"\", 13\r\n"
  ]
}