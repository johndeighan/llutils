{
  "version": 3,
  "file": "cielo.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\cielo.test.coffee"
  ],
  "names": [],
  "mappings": "AAAmB;AAAA,IAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,OAAA,EAAA,WAAA,EAAA;;AAEnB,OAAA;EAAQ,KAAR;EAAe,MAAf;EAAuB,EAAvB;EAA2B,QAA3B;CAAA,MAAA;;AACA,OAAA;EAAQ,KAAR;CAAA,MAAA;;AACA,OAAA;EAAQ,aAAR;CAAA,MAAA;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB;;AACA,OAAO,CAAA,QAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,IAAtB;;AAEA,CAAA,GAAI,IAAI,UAAJ,CAAA;;AACJ,CAAC,CAAC,cAAF,GAAmB,CAAC,GAAD,CAAA,GAAA;EAClB,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,cAAA,CAAA,CAAiB,EAAA,CAAG,GAAH,CAAjB,CAAA,CAAtB;AACA,SAAO,eAAA,CAAgB,GAAhB;AAFW,EAXA;;;;;;;AAqBnB,GAAA,GAAM;;AAEN,CAAC,CAAC,KAAF,CAAQ,CAAA;;;;;;;;;;kBAAA,CAAR,EAYM,CAAA;;oBAAA,CAAA,CAGiB,GAHjB,CAAA;kBAAA,CAZN;;AAmBA,CAAC,CAAC,KAAF,CAAQ,CAAA;;;;;;;;;;;kBAAA,CAAR,EAaM,CAAA;;oBAAA,CAAA,CAGiB,GAHjB,CAAA,sBAAA,CAbN,EA1CmB;;;AA+DnB,QAAA,GAAW;;AACX,IAAA,GAAO,KAAA,CAAM,QAAN;;AAEP,MAAA,CAAO,QAAA,CAAS,IAAT,CAAP;;AAEA,MAAA,GAAS,IAAI,aAAJ,CAAA;;AACT,MAAM,CAAC,QAAP,CAAgB,QAAhB,EAA0B,IAA1B;;AAEA,CAAA,CAAC,OAAD,EAAU,WAAV,EAAuB,EAAvB,CAAA,GAA6B,KAAA,CAAM,IAAN,CAA7B;;AACA,MAAA,CAAQ,OAAA,KAAW,IAAnB;;AAEA,MAAM,CAAC,QAAP,CAAgB,cAAhB,EAAgC,WAAhC;;AACA,MAAM,CAAC,QAAP,CAAgB,YAAhB,EAA8B,EAA9B;;AAEA,KAAA,CAAM,MAAM,CAAC,QAAP,CAAgB,YAAhB,CAAN,EAAqC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAAA,CAArC",
  "sourcesContent": [
    "# cielo.test.coffee\n\nimport {undef, assert, OL, isString} from '@jdeighan/llutils'\nimport {slurp} from '@jdeighan/llutils/fs'\nimport {TextBlockList} from '@jdeighan/llutils/text-block'\nimport * as lib from '@jdeighan/llutils/cielo'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\nt = new UnitTester()\nt.transformValue = (str) =>\n\tassert isString(str), \"Not a string: #{OL(str)}\"\n\treturn cieloPreProcess(str)\n\n# ---------------------------------------------------------------------------\n#    - Handles HEREDOC syntax\n#    - ends file upon seeing '__END__'\n# ---------------------------------------------------------------------------\n#symbol \"cieloPreProcess(code)\"\n\nbsl = \"\\\\\"\n\nt.equal \"\"\"\n\timport {undef} from '@jdeighan/llutils'\n\n\tequal fromTAML(<<<), <<<\n\t\ta: 1\n\t\tb: 2\n\n\t\t---\n\t\ta: 1\n\t\tb: 2\n\n\tconsole.log 'DONE'\n\t\"\"\", \"\"\"\n\timport {undef} from '@jdeighan/llutils'\n\n\tequal fromTAML(\"a: 1#{bsl}nb: 2\"), {\"a\":1,\"b\":2}\n\tconsole.log 'DONE'\n\t\"\"\"\n\nt.equal \"\"\"\n\timport {undef} from '@jdeighan/llutils'\n\n\tequal fromTAML(<<<), <<<\n\t\ta: 1\n\t\tb: 2\n\n\t\t---\n\t\ta: 1\n\t\tb: 2\n\n\t__END__\n\tconsole.log 'DONE'\n\t\"\"\", \"\"\"\n\timport {undef} from '@jdeighan/llutils'\n\n\tequal fromTAML(\"a: 1#{bsl}nb: 2\"), {\"a\":1,\"b\":2}\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n\nfilePath = \"test/bless/test.cielo\"\ncode = slurp filePath\n\ntruthy isString(code)\n\nblocks = new TextBlockList()\nblocks.addBlock filePath, code\n\n{orgCode, preprocCode, js} = bless code\ntruthy (orgCode == code)\n\nblocks.addBlock 'PreProcessed', preprocCode\nblocks.addBlock 'JavaScript', js\n\nequal blocks.asString('format=box'), '''\n\t┌────────  test/bless/test.cielo  ─────────┐\n\t│ import {undef} from '@jdeighan/llutils'  │\n\t│                                          │\n\t│ hAST = <<<                               │\n\t│    ---                                   │\n\t│    type: program                         │\n\t│    name: John                            │\n\t│                                          │\n\t│ equal extract(hAST, \"\"\"                  │\n\t│    type=\"program\"                        │\n\t│    \"\"\"), {name: 'John'}                  │\n\t│                                          │\n\t│ __END__                                  │\n\t│                                          │\n\t│ any old garbage can be here              │\n\t│                                          │\n\t├─────────────  PreProcessed  ─────────────┤\n\t│ import {undef} from '@jdeighan/llutils'  │\n\t│                                          │\n\t│ hAST = {\"type\":\"program\",\"name\":\"John\"}  │\n\t│ equal extract(hAST, \"\"\"                  │\n\t│    type=\"program\"                        │\n\t│    \"\"\"), {name: 'John'}                  │\n\t│                                          │\n\t├──────────────  JavaScript  ──────────────┤\n\t│ var hAST;                                │\n\t│                                          │\n\t│ import {                                 │\n\t│   undef                                  │\n\t│ } from '@jdeighan/llutils';              │\n\t│                                          │\n\t│ hAST = {                                 │\n\t│   \"type\": \"program\",                     │\n\t│   \"name\": \"John\"                         │\n\t│ };                                       │\n\t│                                          │\n\t│ equal(extract(hAST, `type=\"program\"`), { │\n\t│   name: 'John'                           │\n\t│ });                                      │\n\t└──────────────────────────────────────────┘\n\t'''\n"
  ]
}