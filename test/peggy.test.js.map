{
  "version": 3,
  "file": "peggy.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\peggy.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# peggy.test.coffee\n\nimport {undef, splitStr} from '@jdeighan/llutils'\nimport * as lib from '@jdeighan/llutils/peggy'\nObject.assign(global, lib)\nimport * as lib2 from '@jdeighan/llutils/utest'\nObject.assign(global, lib2)\n\nexprPath = './test/peggy/expr.peggy'\nparseExpr = await getParser(exprPath)\n\n# ---------------------------------------------------------------------------\n#symbol matchExprSplitter(str)    # --- returns [str, skipLen]\n\n(() =>\n\tstr = \"result: expr DO {add(result)} lChars: [A-Z]+\"\n\texpect = \"result: expr & {add(result);return true;} lChars: [A-Z]+\"\n\n\tequal splitStr(str, meSplitter).join(' '), expect\n\t)()\n\n# ---------------------------------------------------------------------------\n#symbol \"procPeggy(code, hMeta, hOptions)\"    # --- compile peggy code\n\nsucceeds () => procPeggy(\"\"\"\n\tstart\n\t\t\"abc\"\n\t\t\treturn 42\n\t\t\"def\"\n\t\t\treturn 13\n\t\"\"\", {type: 'coffee'})\n\n# ---------------------------------------------------------------------------\n#symbol \"getParser(filePath)\"    # --- get parser\n\n# --- This has already been executed\n# parseExpr = await getParser(exprPath)\n\nequal parseExpr('2+2'), 4\nequal parseExpr('3*5'), 15\nfails () => parseExpr('*44')\nequal parseExpr('2 + 2'), 4\nequal parseExpr('(2 + 4) * 3'), 18\nlike parseExpr('3.14 * 5'), 15.7\n\n# ---------------------------------------------------------------------------\n\nsucceeds () ->\n\twriter = new ByteCodeWriter()\n\n# ---------------------------------------------------------------------------\n\nsucceeds () ->\n\tdumper = new OpDumper()\n\n# ---------------------------------------------------------------------------\n#symbol \"getTracer(type, inputStr, hVars={})\"\n\n(() =>\n\ttracer = getTracer('advanced')\n\n\tequal tracer.traceStr({\n\t\ttype: 'rule.enter'\n\t\trule: 'start'\n\t\t}), \"\"\"\n\t\t? start\n\t\t\"\"\"\n\n\tequal tracer.traceStr({\n\t\ttype: 'rule.fail'\n\t\t}, 1), \"\"\"\n\t\t└─> FAIL\n\t\t\"\"\"\n\n\tequal tracer.traceStr({\n\t\ttype: 'rule.match'\n\t\t}, 1), \"\"\"\n\t\t└─> YES\n\t\t\"\"\"\n\n\tequal tracer.traceStr({\n\t\ttype: 'rule.match'\n\t\tresult: 'IDENT'\n\t\t}, 1), \"\"\"\n\t\t└─> \"IDENT\"\n\t\t\"\"\"\n\n\tequal tracer.traceStr({\n\t\ttype: 'rule.enter'\n\t\trule: 'start'\n\t\t}, 1), \"\"\"\n\t\t│  ? start\n\t\t\"\"\"\n\n\tequal tracer.traceStr({\n\t\ttype: 'string.fail'\n\t\t}, 1), \"\"\"\n\t\tx   string\n\t\t\"\"\"\n\n\tequal tracer.traceStr({\n\t\ttype: 'rule.match'\n\t\t}, 1), \"\"\"\n\t\t└─> YES\n\t\t\"\"\"\n\n\tequal tracer.traceStr({\n\t\ttype: 'rule.match'\n\t\tresult: 'IDENT'\n\t\t}, 1), \"\"\"\n\t\t└─> \"IDENT\"\n\t\t\"\"\"\n\n\t)()\n"
  ]
}