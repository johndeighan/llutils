{
  "version": 3,
  "file": "utest.test.js",
  "sourceRoot": "..\\",
  "sources": [
    "test\\utest.test.coffee"
  ],
  "names": [],
  "mappings": "AAAmB;AAEnB,OAAA;EAAQ,QAAR;EAAkB,EAAlB;EAAsB,MAAtB;CAAA,MAAA;;AACA,OAAO,CAAA,OAAP,MAAA;;AACA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,GAAtB,EAJmB;;;AAQnB,CAAC,CAAC,KAAF,CAAQ,CAAA,GAAE,CAAV,EAAa,CAAb;;AACA,CAAC,CAAC,IAAF,CAAO;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE,CAAR;EAAW,CAAA,EAAE;AAAb,CAAP,EAAwB;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE;AAAR,CAAxB;;AACA,CAAC,CAAC,QAAF,CAAW,CAAA,GAAE,CAAb,EAAgB,CAAhB;;AACA,CAAC,CAAC,MAAF,CAAS,EAAT;;AACA,CAAC,CAAC,KAAF,CAAQ,KAAR;;AACA,CAAC,CAAC,QAAF,CAAW,yBAAX,EAAsC,MAAtC;;AACA,CAAC,CAAC,QAAF,CAAW,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAX,EAA0B,GAA1B;;AACA,CAAC,CAAC,OAAF,CAAU,kBAAV,EAA8B,KAA9B;;AACA,CAAC,CAAC,KAAF,CAAQ,CAAA,CAAA,GAAA;EAAM,MAAM,IAAI,KAAJ,CAAU,KAAV;AAAZ,CAAR;;AACA,CAAC,CAAC,QAAF,CAAW,CAAA,CAAA,GAAA;AAAM,SAAO;AAAb,CAAX;;AACA,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,KAAhB,EAlBmB;;AAmBnB,CAAC,CAAC,IAAF,CAAO,OAAP,EAAgB,QAAhB,EAnBmB;;;AAuBnB,KAAA,CAAM,CAAA,GAAE,CAAR,EAAW,CAAX;;AACA,IAAA,CAAK;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE,CAAR;EAAW,CAAA,EAAE;AAAb,CAAL,EAAsB;EAAC,CAAA,EAAE,CAAH;EAAM,CAAA,EAAE;AAAR,CAAtB;;AACA,QAAA,CAAS,CAAA,GAAE,CAAX,EAAc,CAAd;;AACA,MAAA,CAAO,EAAP;;AACA,KAAA,CAAM,KAAN;;AACA,QAAA,CAAS,yBAAT,EAAoC,MAApC;;AACA,QAAA,CAAS,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAT,EAAwB,GAAxB;;AACA,OAAA,CAAQ,kBAAR,EAA4B,KAA5B;;AACA,KAAA,CAAM,CAAA,CAAA,GAAA;EAAM,MAAM,IAAI,KAAJ,CAAU,KAAV;AAAZ,CAAN;;AACA,QAAA,CAAS,CAAA,CAAA,GAAA;AAAM,SAAO;AAAb,CAAT;;AACA,IAAA,CAAK,OAAL,EAAc,KAAd,EAjCmB;;AAkCnB,IAAA,CAAK,OAAL,EAAc,QAAd,EAlCmB;;;AAsCnB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,MAAA,GAAS,IAAI,UAAJ,CAAA;EACT,MAAM,CAAC,cAAP,GAAwB,CAAC,GAAD,CAAA,GAAA;IACvB,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,OAAA,CAAA,CAAU,GAAV,CAAA,CAAtB;AACA,WAAO,GAAG,CAAC,WAAJ,CAAA;EAFgB;SAIxB,MAAM,CAAC,KAAP,CAAa,KAAb,EAAoB,KAApB;AANA,CAAD,CAAA,CAAA,EAtCmB;;;;AAkDnB,SAAA,CAAU,CAAA;GAAA,CAAV,EAGM,CAAA;GAAA,CAHN;;AAQA,SAAA,CAAU,CAAA;;GAAA,CAAV,EAIM,CAAA;GAAA,CAJN;;AASA,SAAA,CAAU,CAAA;GAAA,CAAV,EAGM,CAAA;;GAAA,CAHN,EAnEmB;;;;AA+EnB,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,IAAA,GAAO,CAAA,CAAA,GAAA;IACN,IAAI,CAAC,KAAL,CAAW,cAAX;EADM;SAIP,MAAA,CAAO,IAAP,EAAa,WAAb;AALA,CAAD,CAAA,CAAA;;AAQA,CAAC,CAAA,CAAA,GAAA;AACD,MAAA;EAAC,IAAA,GAAO,CAAA,CAAA,GAAA;IACN,IAAI,CAAC,KAAL,CAAW,aAAX;EADM;SAIP,QAAA,CAAS,IAAT;AALA,CAAD,CAAA,CAAA",
  "sourcesContent": [
    "# utest.test.coffee\n\nimport {isString, OL, assert} from '@jdeighan/llutils'\nimport * as lib from '@jdeighan/llutils/utest'\nObject.assign(global, lib)\n\n# ---------------------------------------------------------------------------\n\nu.equal 2+2, 4\nu.like {a:1, b:2, c:3}, {a:1, c:3}\nu.notequal 2+2, 5\nu.truthy 42\nu.falsy false\nu.includes \"this is a long sentence\", \"long\"\nu.includes ['a','b','c'], 'b'\nu.matches \"another 42 lines\", /\\d+/\nu.fails () => throw new Error(\"bad\")\nu.succeeds () => return 'me'\nu.like \"abc\\n\", \"abc\"         # strings are right trimmed\nu.like \"abc\\n\", \"abc   \"\n\n# ---------------------------------------------------------------------------\n\nequal 2+2, 4\nlike {a:1, b:2, c:3}, {a:1, c:3}\nnotequal 2+2, 5\ntruthy 42\nfalsy false\nincludes \"this is a long sentence\", \"long\"\nincludes ['a','b','c'], 'b'\nmatches \"another 42 lines\", /\\d+/\nfails () => throw new Error(\"bad\")\nsucceeds () => return 'me'\nlike \"abc\\n\", \"abc\"           # strings are right trimmed\nlike \"abc\\n\", \"abc   \"\n\n# ---------------------------------------------------------------------------\n\n(() =>\n\tutest2 = new UnitTester()\n\tutest2.transformValue = (val) =>\n\t\tassert isString(val), \"val is #{val}\"\n\t\treturn val.toUpperCase()\n\n\tutest2.equal 'abc', 'ABC'\n\t)()\n\n# ---------------------------------------------------------------------------\n# --- test samelines\n\nsamelines \"\"\"\n\tabc\n\tdef\n\t\"\"\", \"\"\"\n\tdef\n\tabc\n\t\"\"\"\n\nsamelines \"\"\"\n\tabc\n\n\tdef\n\t\"\"\", \"\"\"\n\tdef\n\tabc\n\t\"\"\"\n\nsamelines \"\"\"\n\tabc\n\tdef\n\t\"\"\", \"\"\"\n\tdef\n\n\tabc\n\t\"\"\"\n\n# ---------------------------------------------------------------------------\n# --- test throws()\n\n(() =>\n\tfunc = () =>\n\t\tJSON.parse('{\"key\": 42,}')\n\t\treturn\n\n\tthrows func, SyntaxError\n\t)()\n\n(() =>\n\tfunc = () =>\n\t\tJSON.parse('{\"key\": 42}')\n\t\treturn\n\n\tsucceeds func\n\t)()\n\n"
  ]
}